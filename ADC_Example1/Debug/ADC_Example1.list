
ADC_Example1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004900  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b14  08004b14  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004b1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000020  08004b3c  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004b3c  00006158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0f  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002248  00000000  00000000  00016b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00018da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aad  00000000  00000000  00019b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffe5  00000000  00000000  0001a645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f83d  00000000  00000000  0003a62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3856  00000000  00000000  00049e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d6bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a80  00000000  00000000  0011d700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00121180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ac0 	.word	0x08004ac0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004ac0 	.word	0x08004ac0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// start single ended ADC peripheral
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	@ 0x7f
 800054c:	4827      	ldr	r0, [pc, #156]	@ (80005ec <main+0xa8>)
 800054e:	f002 f8a3 	bl	8002698 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(500);
 8000552:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000556:	f000 fc25 	bl	8000da4 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbb3 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f849 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f90b 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000566:	f000 f891 	bl	800068c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fa32 	bl	80009d4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000570:	2101      	movs	r1, #1
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fa64 	bl	8000a40 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000578:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <main+0xac>)
 800057a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800057e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <main+0xac>)
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000586:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <main+0xac>)
 8000588:	2200      	movs	r2, #0
 800058a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800058c:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <main+0xac>)
 800058e:	2200      	movs	r2, #0
 8000590:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000592:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <main+0xac>)
 8000594:	2200      	movs	r2, #0
 8000596:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000598:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <main+0xac>)
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fadc 	bl	8000b58 <BSP_COM_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <main+0x66>
  {
    Error_Handler();
 80005a6:	f000 f925 	bl	80007f4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ae:	f000 fbf9 	bl	8000da4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);                    // start adc
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <main+0xa8>)
 80005b4:	f001 f840 	bl	8001638 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);  // to start ADC in Polling mode
 80005b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <main+0xa8>)
 80005be:	f001 f939 	bl	8001834 <HAL_ADC_PollForConversion>

	  //expression can be see in live expression tab
	  int channel1 = HAL_ADC_GetValue(&hadc1);      // get ADC values in expression
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <main+0xa8>)
 80005c4:	f001 fa2a 	bl	8001a1c <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	607b      	str	r3, [r7, #4]
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80005cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <main+0xa8>)
 80005d2:	f001 f92f 	bl	8001834 <HAL_ADC_PollForConversion>

	  //expression can be see in live expression tab
	  int channel2 = HAL_ADC_GetValue(&hadc1);		// get ADC values in expression
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <main+0xa8>)
 80005d8:	f001 fa20 	bl	8001a1c <HAL_ADC_GetValue>
 80005dc:	4603      	mov	r3, r0
 80005de:	603b      	str	r3, [r7, #0]
	  HAL_ADC_Stop(&hadc1);
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <main+0xa8>)
 80005e2:	f001 f8f3 	bl	80017cc <HAL_ADC_Stop>
  {
 80005e6:	bf00      	nop
 80005e8:	e7df      	b.n	80005aa <main+0x66>
 80005ea:	bf00      	nop
 80005ec:	2000004c 	.word	0x2000004c
 80005f0:	2000003c 	.word	0x2000003c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	@ 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fa2f 	bl	8004a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f002 fc92 	bl	8002f40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	@ 0x40
 8000628:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	@ 0x55
 8000638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fd2c 	bl	80030a8 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 f8cd 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f82a 	bl	80036cc <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 f8b9 	bl	80007f4 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2220      	movs	r2, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f9de 	bl	8004a66 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b2:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_ADC1_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	4817      	ldr	r0, [pc, #92]	@ (8000774 <MX_ADC1_Init+0xe8>)
 8000716:	f000 fde1 	bl	80012dc <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000720:	f000 f868 	bl	80007f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072c:	4619      	mov	r1, r3
 800072e:	4811      	ldr	r0, [pc, #68]	@ (8000774 <MX_ADC1_Init+0xe8>)
 8000730:	f002 f814 	bl	800275c <HAL_ADCEx_MultiModeConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800073a:	f000 f85b 	bl	80007f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_ADC1_Init+0xec>)
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2306      	movs	r3, #6
 8000744:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074a:	237f      	movs	r3, #127	@ 0x7f
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074e:	2304      	movs	r3, #4
 8000750:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	@ (8000774 <MX_ADC1_Init+0xe8>)
 800075c:	f001 f96c 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000766:	f000 f845 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3730      	adds	r7, #48	@ 0x30
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000004c 	.word	0x2000004c
 8000778:	04300002 	.word	0x04300002

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a1a      	ldr	r2, [pc, #104]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_GPIO_Init+0x74>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007a0:	f043 0320 	orr.w	r3, r3, #32
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0320 	and.w	r3, r3, #32
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	@ 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000836:	f002 fc27 	bl	8003088 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09e      	sub	sp, #120	@ 0x78
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f004 f8fc 	bl	8004a66 <memset>
  if(hadc->Instance==ADC1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000876:	d134      	bne.n	80008e2 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800087c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800087e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000882:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4618      	mov	r0, r3
 800088a:	f003 f93b 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000894:	f7ff ffae 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 800089e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_ADC_MspInit+0xa4>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c8:	2301      	movs	r3, #1
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008cc:	2303      	movs	r3, #3
 80008ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f002 f995 	bl	8002c0c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008e2:	bf00      	nop
 80008e4:	3778      	adds	r7, #120	@ 0x78
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 fa0f 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f8e2 	bl	8000b1c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f004 f863 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fdc7 	bl	8000544 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80009c4:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 80009c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80009cc:	20000158 	.word	0x20000158

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <BSP_LED_Init+0x64>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <BSP_LED_Init+0x64>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <BSP_LED_Init+0x64>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80009f6:	2320      	movs	r3, #32
 80009f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <BSP_LED_Init+0x68>)
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f8f9 	bl	8002c0c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <BSP_LED_Init+0x68>)
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	2120      	movs	r1, #32
 8000a24:	2200      	movs	r2, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fa72 	bl	8002f10 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000a50:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <BSP_PB_Init+0xc4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a2b      	ldr	r2, [pc, #172]	@ (8000b04 <BSP_PB_Init+0xc4>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <BSP_PB_Init+0xc4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10c      	bne.n	8000a96 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <BSP_PB_Init+0xc8>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 f8bc 	bl	8002c0c <HAL_GPIO_Init>
 8000a94:	e031      	b.n	8000afa <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a9a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <BSP_PB_Init+0xc8>)
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	f107 020c 	add.w	r2, r7, #12
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f8ae 	bl	8002c0c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <BSP_PB_Init+0xcc>)
 8000ab6:	441a      	add	r2, r3
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4915      	ldr	r1, [pc, #84]	@ (8000b10 <BSP_PB_Init+0xd0>)
 8000abc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	f002 f85e 	bl	8002b84 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <BSP_PB_Init+0xcc>)
 8000ace:	1898      	adds	r0, r3, r2
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <BSP_PB_Init+0xd4>)
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f002 f835 	bl	8002b4a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ae0:	2028      	movs	r0, #40	@ 0x28
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <BSP_PB_Init+0xd8>)
 8000ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	f001 fff8 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000af2:	2328      	movs	r3, #40	@ 0x28
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 f80e 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000b8 	.word	0x200000b8
 8000b10:	08004af0 	.word	0x08004af0
 8000b14:	20000010 	.word	0x20000010
 8000b18:	20000014 	.word	0x20000014

08000b1c <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <BSP_PB_IRQHandler+0x20>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 f83c 	bl	8002bac <HAL_EXTI_IRQHandler>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000b8 	.word	0x200000b8

08000b40 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d903      	bls.n	8000b76 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b6e:	f06f 0301 	mvn.w	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e018      	b.n	8000ba8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2294      	movs	r2, #148	@ 0x94
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <BSP_COM_Init+0x5c>)
 8000b80:	4413      	add	r3, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f852 	bl	8000c2c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2294      	movs	r2, #148	@ 0x94
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <BSP_COM_Init+0x5c>)
 8000b92:	4413      	add	r3, r2
 8000b94:	6839      	ldr	r1, [r7, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f80e 	bl	8000bb8 <MX_LPUART1_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000ba2:	f06f 0303 	mvn.w	r3, #3
 8000ba6:	e000      	b.n	8000baa <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000c0 	.word	0x200000c0

08000bb8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_LPUART1_Init+0x60>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	895b      	ldrh	r3, [r3, #10]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	891b      	ldrh	r3, [r3, #8]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	899b      	ldrh	r3, [r3, #12]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c04:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f003 f9b8 	bl	8003f7c <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ff8d 	bl	8000b40 <BSP_PB_Callback>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c68:	4a15      	ldr	r2, [pc, #84]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <COM1_MspInit+0x94>)
 8000c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f001 ffb7 	bl	8002c0c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f001 ffaa 	bl	8002c0c <HAL_GPIO_Init>
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f001 fefc 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f80d 	bl	8000cf4 <HAL_InitTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	e001      	b.n	8000cea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce6:	f7ff fd8b 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cea:	79fb      	ldrb	r3, [r7, #7]

}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_InitTick+0x68>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d022      	beq.n	8000d4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_InitTick+0x6c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <HAL_InitTick+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 ff08 	bl	8002b32 <HAL_SYSTICK_Config>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10f      	bne.n	8000d48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d809      	bhi.n	8000d42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d36:	f001 fed4 	bl	8002ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_InitTick+0x70>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e004      	b.n	8000d52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e001      	b.n	8000d52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000001c 	.word	0x2000001c
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000018 	.word	0x20000018

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a03      	ldr	r2, [pc, #12]	@ (8000d84 <HAL_IncTick+0x1c>)
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000154 	.word	0x20000154
 8000d88:	2000001c 	.word	0x2000001c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000154 	.word	0x20000154

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dbc:	d004      	beq.n	8000dc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_Delay+0x40>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc8:	bf00      	nop
 8000dca:	f7ff ffdf 	bl	8000d8c <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d8f7      	bhi.n	8000dca <HAL_Delay+0x26>
  {
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000001c 	.word	0x2000001c

08000de8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3360      	adds	r3, #96	@ 0x60
 8000e62:	461a      	mov	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <LL_ADC_SetOffset+0x44>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	03fff000 	.word	0x03fff000

08000e98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3360      	adds	r3, #96	@ 0x60
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3360      	adds	r3, #96	@ 0x60
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b087      	sub	sp, #28
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3360      	adds	r3, #96	@ 0x60
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3360      	adds	r3, #96	@ 0x60
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3330      	adds	r3, #48	@ 0x30
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	211f      	movs	r1, #31
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	0e9b      	lsrs	r3, r3, #26
 8000fea:	f003 011f 	and.w	r1, r3, #31
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3314      	adds	r3, #20
 800101a:	461a      	mov	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0e5b      	lsrs	r3, r3, #25
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2107      	movs	r1, #7
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0d1b      	lsrs	r3, r3, #20
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0318 	and.w	r3, r3, #24
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001084:	40d9      	lsrs	r1, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	400b      	ands	r3, r1
 800108a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800108e:	431a      	orrs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0007ffff 	.word	0x0007ffff

080010a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6093      	str	r3, [r2, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001118:	d101      	bne.n	800111e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800113c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001140:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001168:	d101      	bne.n	800116e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800118c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b8:	f043 0202 	orr.w	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <LL_ADC_IsEnabled+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_IsEnabled+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d101      	bne.n	800120a <LL_ADC_IsDisableOngoing+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsDisableOngoing+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b04      	cmp	r3, #4
 800127a:	d101      	bne.n	8001280 <LL_ADC_REG_IsConversionOngoing+0x18>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800129e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a2:	f043 0220 	orr.w	r2, r3, #32
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d101      	bne.n	80012ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e19b      	b.n	800162e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fa9f 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fef1 	bl	8001104 <LL_ADC_IsDeepPowerDownEnabled>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fed7 	bl	80010e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff0c 	bl	8001154 <LL_ADC_IsInternalRegulatorEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fef0 	bl	800112c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800134c:	4b97      	ldr	r3, [pc, #604]	@ (80015ac <HAL_ADC_Init+0x2d0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	4a97      	ldr	r2, [pc, #604]	@ (80015b0 <HAL_ADC_Init+0x2d4>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	3301      	adds	r3, #1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001360:	e002      	b.n	8001368 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feee 	bl	8001154 <LL_ADC_IsInternalRegulatorEnabled>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff62 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 80013a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 8134 	bne.w	800161c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 8130 	bne.w	800161c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013c4:	f043 0202 	orr.w	r2, r3, #2
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fefb 	bl	80011cc <LL_ADC_IsEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d137      	bne.n	800144c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013e4:	d004      	beq.n	80013f0 <HAL_ADC_Init+0x114>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a72      	ldr	r2, [pc, #456]	@ (80015b4 <HAL_ADC_Init+0x2d8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d10f      	bne.n	8001410 <HAL_ADC_Init+0x134>
 80013f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80013f4:	f7ff feea 	bl	80011cc <LL_ADC_IsEnabled>
 80013f8:	4604      	mov	r4, r0
 80013fa:	486e      	ldr	r0, [pc, #440]	@ (80015b4 <HAL_ADC_Init+0x2d8>)
 80013fc:	f7ff fee6 	bl	80011cc <LL_ADC_IsEnabled>
 8001400:	4603      	mov	r3, r0
 8001402:	4323      	orrs	r3, r4
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e008      	b.n	8001422 <HAL_ADC_Init+0x146>
 8001410:	4869      	ldr	r0, [pc, #420]	@ (80015b8 <HAL_ADC_Init+0x2dc>)
 8001412:	f7ff fedb 	bl	80011cc <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800142e:	d004      	beq.n	800143a <HAL_ADC_Init+0x15e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a5f      	ldr	r2, [pc, #380]	@ (80015b4 <HAL_ADC_Init+0x2d8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_ADC_Init+0x162>
 800143a:	4a60      	ldr	r2, [pc, #384]	@ (80015bc <HAL_ADC_Init+0x2e0>)
 800143c:	e000      	b.n	8001440 <HAL_ADC_Init+0x164>
 800143e:	4a60      	ldr	r2, [pc, #384]	@ (80015c0 <HAL_ADC_Init+0x2e4>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff fcce 	bl	8000de8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7f5b      	ldrb	r3, [r3, #29]
 8001450:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001456:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800145c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001462:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800146a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	3b01      	subs	r3, #1
 8001480:	045b      	lsls	r3, r3, #17
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001494:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	4b46      	ldr	r3, [pc, #280]	@ (80015c4 <HAL_ADC_Init+0x2e8>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff feef 	bl	80012b6 <LL_ADC_INJ_IsConversionOngoing>
 80014d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d17b      	bne.n	80015d8 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d178      	bne.n	80015d8 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001502:	f023 0302 	bic.w	r3, r3, #2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	430b      	orrs	r3, r1
 800150e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d017      	beq.n	8001548 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001530:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6911      	ldr	r1, [r2, #16]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001546:	e013      	b.n	8001570 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001556:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800156c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001576:	2b01      	cmp	r3, #1
 8001578:	d126      	bne.n	80015c8 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001590:	4311      	orrs	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800159c:	430a      	orrs	r2, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	e015      	b.n	80015d8 <HAL_ADC_Init+0x2fc>
 80015ac:	20000000 	.word	0x20000000
 80015b0:	053e2d63 	.word	0x053e2d63
 80015b4:	50000100 	.word	0x50000100
 80015b8:	50000400 	.word	0x50000400
 80015bc:	50000300 	.word	0x50000300
 80015c0:	50000700 	.word	0x50000700
 80015c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10c      	bne.n	80015fa <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f023 010f 	bic.w	r1, r3, #15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	1e5a      	subs	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f8:	e007      	b.n	800160a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020f 	bic.w	r2, r2, #15
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	65da      	str	r2, [r3, #92]	@ 0x5c
 800161a:	e007      	b.n	800162c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800162c:	7ffb      	ldrb	r3, [r7, #31]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop

08001638 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001648:	d004      	beq.n	8001654 <HAL_ADC_Start+0x1c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a5c      	ldr	r2, [pc, #368]	@ (80017c0 <HAL_ADC_Start+0x188>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_ADC_Start+0x20>
 8001654:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <HAL_ADC_Start+0x18c>)
 8001656:	e000      	b.n	800165a <HAL_ADC_Start+0x22>
 8001658:	4b5b      	ldr	r3, [pc, #364]	@ (80017c8 <HAL_ADC_Start+0x190>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd24 	bl	80010a8 <LL_ADC_GetMultimode>
 8001660:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fdfe 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 809f 	bne.w	80017b2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Start+0x4a>
 800167e:	2302      	movs	r3, #2
 8001680:	e09a      	b.n	80017b8 <HAL_ADC_Start+0x180>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 febc 	bl	8002408 <ADC_Enable>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8086 	bne.w	80017a8 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a42      	ldr	r2, [pc, #264]	@ (80017c0 <HAL_ADC_Start+0x188>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d002      	beq.n	80016c0 <HAL_ADC_Start+0x88>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	e001      	b.n	80016c4 <HAL_ADC_Start+0x8c>
 80016c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d002      	beq.n	80016d2 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ea:	d106      	bne.n	80016fa <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f0:	f023 0206 	bic.w	r2, r3, #6
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80016f8:	e002      	b.n	8001700 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	221c      	movs	r2, #28
 8001706:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2a      	ldr	r2, [pc, #168]	@ (80017c0 <HAL_ADC_Start+0x188>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d002      	beq.n	8001720 <HAL_ADC_Start+0xe8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	e001      	b.n	8001724 <HAL_ADC_Start+0xec>
 8001720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4293      	cmp	r3, r2
 800172a:	d008      	beq.n	800173e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d002      	beq.n	800173e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b09      	cmp	r3, #9
 800173c:	d114      	bne.n	8001768 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001754:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fd59 	bl	8001218 <LL_ADC_REG_StartConversion>
 8001766:	e026      	b.n	80017b6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <HAL_ADC_Start+0x188>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d002      	beq.n	8001784 <HAL_ADC_Start+0x14c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e001      	b.n	8001788 <HAL_ADC_Start+0x150>
 8001784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001788:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00f      	beq.n	80017b6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800179e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017a6:	e006      	b.n	80017b6 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80017b0:	e001      	b.n	80017b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
 80017b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	50000100 	.word	0x50000100
 80017c4:	50000300 	.word	0x50000300
 80017c8:	50000700 	.word	0x50000700

080017cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Stop+0x16>
 80017de:	2302      	movs	r3, #2
 80017e0:	e023      	b.n	800182a <HAL_ADC_Stop+0x5e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017ea:	2103      	movs	r1, #3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fd4f 	bl	8002290 <ADC_ConversionStop>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d111      	bne.n	8001820 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fe99 	bl	8002534 <ADC_Disable>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001846:	d004      	beq.n	8001852 <HAL_ADC_PollForConversion+0x1e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a70      	ldr	r2, [pc, #448]	@ (8001a10 <HAL_ADC_PollForConversion+0x1dc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_ADC_PollForConversion+0x22>
 8001852:	4b70      	ldr	r3, [pc, #448]	@ (8001a14 <HAL_ADC_PollForConversion+0x1e0>)
 8001854:	e000      	b.n	8001858 <HAL_ADC_PollForConversion+0x24>
 8001856:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <HAL_ADC_PollForConversion+0x1e4>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fc25 	bl	80010a8 <LL_ADC_GetMultimode>
 800185e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d102      	bne.n	800186e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001868:	2308      	movs	r3, #8
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	e037      	b.n	80018de <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d002      	beq.n	8001880 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d111      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0b3      	b.n	8001a06 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800189e:	2304      	movs	r3, #4
 80018a0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018a2:	e01c      	b.n	80018de <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x84>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a57      	ldr	r2, [pc, #348]	@ (8001a10 <HAL_ADC_PollForConversion+0x1dc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_PollForConversion+0x88>
 80018b8:	4b56      	ldr	r3, [pc, #344]	@ (8001a14 <HAL_ADC_PollForConversion+0x1e0>)
 80018ba:	e000      	b.n	80018be <HAL_ADC_PollForConversion+0x8a>
 80018bc:	4b56      	ldr	r3, [pc, #344]	@ (8001a18 <HAL_ADC_PollForConversion+0x1e4>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fc00 	bl	80010c4 <LL_ADC_GetMultiDMATransfer>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ce:	f043 0220 	orr.w	r2, r3, #32
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e095      	b.n	8001a06 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018da:	2304      	movs	r3, #4
 80018dc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018de:	f7ff fa55 	bl	8000d8c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018e4:	e021      	b.n	800192a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018ec:	d01d      	beq.n	800192a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018ee:	f7ff fa4d 	bl	8000d8c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <HAL_ADC_PollForConversion+0xd0>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d112      	bne.n	800192a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10b      	bne.n	800192a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001916:	f043 0204 	orr.w	r2, r3, #4
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e06d      	b.n	8001a06 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0d6      	beq.n	80018e6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fb1f 	bl	8000f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7f5b      	ldrb	r3, [r3, #29]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d118      	bne.n	800198e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d111      	bne.n	800198e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_ADC_PollForConversion+0x1dc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d002      	beq.n	800199e <HAL_ADC_PollForConversion+0x16a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	e001      	b.n	80019a2 <HAL_ADC_PollForConversion+0x16e>
 800199e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d008      	beq.n	80019bc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d002      	beq.n	80019bc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d104      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	e00d      	b.n	80019e2 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_ADC_PollForConversion+0x1dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x1a2>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e001      	b.n	80019da <HAL_ADC_PollForConversion+0x1a6>
 80019d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d104      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2208      	movs	r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e008      	b.n	8001a04 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	220c      	movs	r2, #12
 8001a02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	50000100 	.word	0x50000100
 8001a14:	50000300 	.word	0x50000300
 8001a18:	50000700 	.word	0x50000700

08001a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b6      	sub	sp, #216	@ 0xd8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x24>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f000 bc04 	b.w	8002264 <HAL_ADC_ConfigChannel+0x82c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fbfd 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 83e8 	bne.w	8002246 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7ff fa95 	bl	8000fb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fbeb 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc0b 	bl	80012b6 <LL_ADC_INJ_IsConversionOngoing>
 8001aa0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 81d9 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 81d4 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff fa9c 	bl	800100a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa43 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ae0:	e00e      	b.n	8001b00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fa8b 	bl	800100a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa33 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d022      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b32:	f7ff f98d 	bl	8000e50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f7ff f9d9 	bl	8000efa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x126>
 8001b58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b5c:	e000      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x128>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	461a      	mov	r2, r3
 8001b62:	f7ff f9e5 	bl	8000f30 <LL_ADC_SetOffsetSaturation>
 8001b66:	e17b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f992 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x15c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f987 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x19a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f97c 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x1b2>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	e018      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1e4>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f94b 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2101      	movs	r1, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f92f 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x222>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f924 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x260>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f919 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x278>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e018      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x2aa>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f8e8 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f8cc 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x2e8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f8c1 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 021f 	and.w	r2, r3, #31
 8001d1e:	e01e      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x326>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8b6 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x33e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	e016      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x36c>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f887 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f86b 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x3aa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f860 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e017      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3da>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2103      	movs	r1, #3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f855 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3f2>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e011      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x416>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e003      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f832 	bl	8000ec4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f9b1 	bl	80011cc <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 813d 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff f8ee 	bl	8001060 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4aa2      	ldr	r2, [pc, #648]	@ (8002114 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 812e 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x480>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_ConfigChannel+0x4b4>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	bf94      	ite	ls
 8001ee6:	2301      	movls	r3, #1
 8001ee8:	2300      	movhi	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d079      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x4d4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x500>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x520>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x550>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x576>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x5a8>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	e07e      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x5c8>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	069b      	lsls	r3, r3, #26
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ffe:	e015      	b.n	800202c <HAL_ADC_ConfigChannel+0x5f4>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_ConfigChannel+0x614>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	e017      	b.n	800207c <HAL_ADC_ConfigChannel+0x644>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
  return result;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x670>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	051b      	lsls	r3, r3, #20
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	e01b      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x6a8>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return result;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	051b      	lsls	r3, r3, #20
 80020dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe ff8f 	bl	800100a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_ADC_ConfigChannel+0x6e0>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80af 	beq.w	8002258 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002102:	d004      	beq.n	800210e <HAL_ADC_ConfigChannel+0x6d6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_ADC_ConfigChannel+0x6e4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x6ec>
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_ADC_ConfigChannel+0x6e8>)
 8002110:	e009      	b.n	8002126 <HAL_ADC_ConfigChannel+0x6ee>
 8002112:	bf00      	nop
 8002114:	407f0000 	.word	0x407f0000
 8002118:	80080000 	.word	0x80080000
 800211c:	50000100 	.word	0x50000100
 8002120:	50000300 	.word	0x50000300
 8002124:	4b51      	ldr	r3, [pc, #324]	@ (800226c <HAL_ADC_ConfigChannel+0x834>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fe84 	bl	8000e34 <LL_ADC_GetCommonPathInternalCh>
 800212c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4e      	ldr	r2, [pc, #312]	@ (8002270 <HAL_ADC_ConfigChannel+0x838>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x70c>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4d      	ldr	r2, [pc, #308]	@ (8002274 <HAL_ADC_ConfigChannel+0x83c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d134      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12e      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002158:	d17e      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002162:	d004      	beq.n	800216e <HAL_ADC_ConfigChannel+0x736>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a43      	ldr	r2, [pc, #268]	@ (8002278 <HAL_ADC_ConfigChannel+0x840>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x73a>
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_ADC_ConfigChannel+0x844>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x73c>
 8002172:	4a3e      	ldr	r2, [pc, #248]	@ (800226c <HAL_ADC_ConfigChannel+0x834>)
 8002174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002178:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7fe fe45 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002184:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_ADC_ConfigChannel+0x848>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	4a3e      	ldr	r2, [pc, #248]	@ (8002284 <HAL_ADC_ConfigChannel+0x84c>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800219e:	e002      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f9      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	e054      	b.n	8002258 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a35      	ldr	r2, [pc, #212]	@ (8002288 <HAL_ADC_ConfigChannel+0x850>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d120      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021cc:	d144      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x7aa>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <HAL_ADC_ConfigChannel+0x840>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x7ae>
 80021e2:	4a26      	ldr	r2, [pc, #152]	@ (800227c <HAL_ADC_ConfigChannel+0x844>)
 80021e4:	e000      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x7b0>
 80021e6:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_ADC_ConfigChannel+0x834>)
 80021e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f7fe fe0b 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f8:	e02e      	b.n	8002258 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a23      	ldr	r2, [pc, #140]	@ (800228c <HAL_ADC_ConfigChannel+0x854>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d129      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d123      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_ADC_ConfigChannel+0x840>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01e      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002222:	d004      	beq.n	800222e <HAL_ADC_ConfigChannel+0x7f6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <HAL_ADC_ConfigChannel+0x840>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x7fa>
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_ADC_ConfigChannel+0x844>)
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x7fc>
 8002232:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_ADC_ConfigChannel+0x834>)
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f7fe fde5 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
 8002244:	e008      	b.n	8002258 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002260:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002264:	4618      	mov	r0, r3
 8002266:	37d8      	adds	r7, #216	@ 0xd8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	50000700 	.word	0x50000700
 8002270:	c3210000 	.word	0xc3210000
 8002274:	90c00010 	.word	0x90c00010
 8002278:	50000100 	.word	0x50000100
 800227c:	50000300 	.word	0x50000300
 8002280:	20000000 	.word	0x20000000
 8002284:	053e2d63 	.word	0x053e2d63
 8002288:	c7520000 	.word	0xc7520000
 800228c:	cb840000 	.word	0xcb840000

08002290 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe ffde 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe ffff 	bl	80012b6 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8098 	beq.w	80023f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02a      	beq.n	800232c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7f5b      	ldrb	r3, [r3, #29]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d126      	bne.n	800232c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7f1b      	ldrb	r3, [r3, #28]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d122      	bne.n	800232c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022ea:	e014      	b.n	8002316 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4a45      	ldr	r2, [pc, #276]	@ (8002404 <ADC_ConversionStop+0x174>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d90d      	bls.n	8002310 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f8:	f043 0210 	orr.w	r2, r3, #16
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e074      	b.n	80023fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3301      	adds	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	2b40      	cmp	r3, #64	@ 0x40
 8002322:	d1e3      	bne.n	80022ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2240      	movs	r2, #64	@ 0x40
 800232a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d014      	beq.n	800235c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ff96 	bl	8001268 <LL_ADC_REG_IsConversionOngoing>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe ff53 	bl	80011f2 <LL_ADC_IsDisableOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe ff72 	bl	8001240 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d014      	beq.n	800238c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ffa5 	bl	80012b6 <LL_ADC_INJ_IsConversionOngoing>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00c      	beq.n	800238c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ff3b 	bl	80011f2 <LL_ADC_IsDisableOngoing>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe ff81 	bl	800128e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d005      	beq.n	800239e <ADC_ConversionStop+0x10e>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d105      	bne.n	80023a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002398:	230c      	movs	r3, #12
 800239a:	617b      	str	r3, [r7, #20]
        break;
 800239c:	e005      	b.n	80023aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800239e:	2308      	movs	r3, #8
 80023a0:	617b      	str	r3, [r7, #20]
        break;
 80023a2:	e002      	b.n	80023aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023a4:	2304      	movs	r3, #4
 80023a6:	617b      	str	r3, [r7, #20]
        break;
 80023a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023aa:	f7fe fcef 	bl	8000d8c <HAL_GetTick>
 80023ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023b0:	e01b      	b.n	80023ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023b2:	f7fe fceb 	bl	8000d8c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d914      	bls.n	80023ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e007      	b.n	80023fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1dc      	bne.n	80023b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	a33fffff 	.word	0xa33fffff

08002408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fed7 	bl	80011cc <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d176      	bne.n	8002512 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b3c      	ldr	r3, [pc, #240]	@ (800251c <ADC_Enable+0x114>)
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	f043 0210 	orr.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e062      	b.n	8002514 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fe92 	bl	800117c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002460:	d004      	beq.n	800246c <ADC_Enable+0x64>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <ADC_Enable+0x118>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <ADC_Enable+0x68>
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <ADC_Enable+0x11c>)
 800246e:	e000      	b.n	8002472 <ADC_Enable+0x6a>
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <ADC_Enable+0x120>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fcde 	bl	8000e34 <LL_ADC_GetCommonPathInternalCh>
 8002478:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800247a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002482:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <ADC_Enable+0x124>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <ADC_Enable+0x128>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800249c:	e002      	b.n	80024a4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024aa:	f7fe fc6f 	bl	8000d8c <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b0:	e028      	b.n	8002504 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fe88 	bl	80011cc <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fe58 	bl	800117c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024cc:	f7fe fc5e 	bl	8000d8c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d914      	bls.n	8002504 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d00d      	beq.n	8002504 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	f043 0210 	orr.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e007      	b.n	8002514 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d1cf      	bne.n	80024b2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	8000003f 	.word	0x8000003f
 8002520:	50000100 	.word	0x50000100
 8002524:	50000300 	.word	0x50000300
 8002528:	50000700 	.word	0x50000700
 800252c:	20000000 	.word	0x20000000
 8002530:	053e2d63 	.word	0x053e2d63

08002534 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fe56 	bl	80011f2 <LL_ADC_IsDisableOngoing>
 8002546:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fe3d 	bl	80011cc <LL_ADC_IsEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d047      	beq.n	80025e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d144      	bne.n	80025e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030d 	and.w	r3, r3, #13
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10c      	bne.n	8002586 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fe17 	bl	80011a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2203      	movs	r2, #3
 800257c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800257e:	f7fe fc05 	bl	8000d8c <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002584:	e029      	b.n	80025da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e023      	b.n	80025ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025a2:	f7fe fbf3 	bl	8000d8c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d914      	bls.n	80025da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e007      	b.n	80025ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1dc      	bne.n	80025a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <LL_ADC_IsEnabled>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <LL_ADC_IsEnabled+0x18>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_ADC_IsEnabled+0x1a>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_StartCalibration>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800262a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002634:	4313      	orrs	r3, r2
 8002636:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_IsCalibrationOnGoing>:
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800265a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800265e:	d101      	bne.n	8002664 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_ADC_REG_IsConversionOngoing>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d101      	bne.n	800268a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e04d      	b.n	8002750 <HAL_ADCEx_Calibration_Start+0xb8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff39 	bl	8002534 <ADC_Disable>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d136      	bne.n	800273a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff96 	bl	8002618 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026ec:	e014      	b.n	8002718 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <HAL_ADCEx_Calibration_Start+0xc0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d90d      	bls.n	8002718 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	f023 0312 	bic.w	r3, r3, #18
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e01b      	b.n	8002750 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff94 	bl	800264a <LL_ADC_IsCalibrationOnGoing>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e2      	bne.n	80026ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	f023 0303 	bic.w	r3, r3, #3
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002738:	e005      	b.n	8002746 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	0004de01 	.word	0x0004de01

0800275c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b0a1      	sub	sp, #132	@ 0x84
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002776:	2302      	movs	r3, #2
 8002778:	e0cb      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002782:	2300      	movs	r3, #0
 8002784:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002786:	2300      	movs	r3, #0
 8002788:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002792:	d102      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002794:	4b61      	ldr	r3, [pc, #388]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	e001      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0aa      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff57 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff51 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 808c 	bne.w	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8088 	bne.w	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e8:	d004      	beq.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4b      	ldr	r2, [pc, #300]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80027f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80027f6:	e000      	b.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80027f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80027fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d041      	beq.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002804:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002816:	035b      	lsls	r3, r3, #13
 8002818:	430b      	orrs	r3, r1
 800281a:	431a      	orrs	r2, r3
 800281c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800281e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002828:	d004      	beq.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3b      	ldr	r2, [pc, #236]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d10f      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002834:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002838:	f7ff fedb 	bl	80025f2 <LL_ADC_IsEnabled>
 800283c:	4604      	mov	r4, r0
 800283e:	4837      	ldr	r0, [pc, #220]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002840:	f7ff fed7 	bl	80025f2 <LL_ADC_IsEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	4323      	orrs	r3, r4
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e008      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002854:	4834      	ldr	r0, [pc, #208]	@ (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002856:	f7ff fecc 	bl	80025f2 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d04c      	beq.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800286a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002872:	f023 030f 	bic.w	r3, r3, #15
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6811      	ldr	r1, [r2, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	430a      	orrs	r2, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002884:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002886:	e03d      	b.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002892:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80028a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028ac:	f7ff fea1 	bl	80025f2 <LL_ADC_IsEnabled>
 80028b0:	4604      	mov	r4, r0
 80028b2:	481a      	ldr	r0, [pc, #104]	@ (800291c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80028b4:	f7ff fe9d 	bl	80025f2 <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4323      	orrs	r3, r4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e008      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80028c8:	4817      	ldr	r0, [pc, #92]	@ (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80028ca:	f7ff fe92 	bl	80025f2 <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028ee:	e009      	b.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002902:	e000      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002904:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800290e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002912:	4618      	mov	r0, r3
 8002914:	3784      	adds	r7, #132	@ 0x84
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	50000100 	.word	0x50000100
 8002920:	50000300 	.word	0x50000300
 8002924:	50000700 	.word	0x50000700
 8002928:	50000400 	.word	0x50000400

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff40 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff90 	bl	8002a20 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5f 	bl	80029cc <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff33 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa4 	bl	8002a88 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	460b      	mov	r3, r1
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	605a      	str	r2, [r3, #4]
      break;
 8002b68:	e005      	b.n	8002b76 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	bf00      	nop
  }

  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e003      	b.n	8002ba0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2201      	movs	r2, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <HAL_EXTI_IRQHandler+0x5c>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4798      	blx	r3
    }
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40010414 	.word	0x40010414

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c1a:	e15a      	b.n	8002ed2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 814c 	beq.w	8002ecc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d005      	beq.n	8002c4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d130      	bne.n	8002cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c82:	2201      	movs	r2, #1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	f003 0201 	and.w	r2, r3, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d017      	beq.n	8002cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d123      	bne.n	8002d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	6939      	ldr	r1, [r7, #16]
 8002d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0203 	and.w	r2, r3, #3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80a6 	beq.w	8002ecc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d80:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef0 <HAL_GPIO_Init+0x2e4>)
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <HAL_GPIO_Init+0x2e4>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d8c:	4b58      	ldr	r3, [pc, #352]	@ (8002ef0 <HAL_GPIO_Init+0x2e4>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d98:	4a56      	ldr	r2, [pc, #344]	@ (8002ef4 <HAL_GPIO_Init+0x2e8>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	220f      	movs	r2, #15
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc2:	d01f      	beq.n	8002e04 <HAL_GPIO_Init+0x1f8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef8 <HAL_GPIO_Init+0x2ec>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d019      	beq.n	8002e00 <HAL_GPIO_Init+0x1f4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <HAL_GPIO_Init+0x2f0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_GPIO_Init+0x1f0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8002f00 <HAL_GPIO_Init+0x2f4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00d      	beq.n	8002df8 <HAL_GPIO_Init+0x1ec>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a49      	ldr	r2, [pc, #292]	@ (8002f04 <HAL_GPIO_Init+0x2f8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <HAL_GPIO_Init+0x1e8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a48      	ldr	r2, [pc, #288]	@ (8002f08 <HAL_GPIO_Init+0x2fc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_GPIO_Init+0x1e4>
 8002dec:	2305      	movs	r3, #5
 8002dee:	e00a      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002df0:	2306      	movs	r3, #6
 8002df2:	e008      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002df4:	2304      	movs	r3, #4
 8002df6:	e006      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e004      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e002      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002e04:	2300      	movs	r3, #0
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	f002 0203 	and.w	r2, r2, #3
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e16:	4937      	ldr	r1, [pc, #220]	@ (8002ef4 <HAL_GPIO_Init+0x2e8>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e24:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e48:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e72:	4a26      	ldr	r2, [pc, #152]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e78:	4b24      	ldr	r3, [pc, #144]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f ae9d 	bne.w	8002c1c <HAL_GPIO_Init+0x10>
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	48000400 	.word	0x48000400
 8002efc:	48000800 	.word	0x48000800
 8002f00:	48000c00 	.word	0x48000c00
 8002f04:	48001000 	.word	0x48001000
 8002f08:	48001400 	.word	0x48001400
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d141      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5a:	d131      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f5c:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f62:	4a46      	ldr	r2, [pc, #280]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f6c:	4b43      	ldr	r3, [pc, #268]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f74:	4a41      	ldr	r2, [pc, #260]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f7c:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2232      	movs	r2, #50	@ 0x32
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	4a3f      	ldr	r2, [pc, #252]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	e002      	b.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	4b38      	ldr	r3, [pc, #224]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	d102      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f2      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fae:	4b33      	ldr	r3, [pc, #204]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d158      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e057      	b.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fd0:	e04d      	b.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd8:	d141      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b28      	ldr	r3, [pc, #160]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d131      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fee:	4a23      	ldr	r2, [pc, #140]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff8:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003000:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003008:	4b1d      	ldr	r3, [pc, #116]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2232      	movs	r2, #50	@ 0x32
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	e002      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d102      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003046:	d112      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e011      	b.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800305c:	e007      	b.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003066:	4a05      	ldr	r2, [pc, #20]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800306c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40007000 	.word	0x40007000
 8003080:	20000000 	.word	0x20000000
 8003084:	431bde83 	.word	0x431bde83

08003088 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003096:	6093      	str	r3, [r2, #8]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40007000 	.word	0x40007000

080030a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e2fe      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d075      	beq.n	80031b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c6:	4b97      	ldr	r3, [pc, #604]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d0:	4b94      	ldr	r3, [pc, #592]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d102      	bne.n	80030e6 <HAL_RCC_OscConfig+0x3e>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_OscConfig+0x44>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d10b      	bne.n	8003104 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05b      	beq.n	80031b0 <HAL_RCC_OscConfig+0x108>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d157      	bne.n	80031b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e2d9      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x74>
 800310e:	4b85      	ldr	r3, [pc, #532]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a84      	ldr	r2, [pc, #528]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xb0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x98>
 8003126:	4b7f      	ldr	r3, [pc, #508]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7e      	ldr	r2, [pc, #504]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b7c      	ldr	r3, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7b      	ldr	r2, [pc, #492]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xb0>
 8003140:	4b78      	ldr	r3, [pc, #480]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a77      	ldr	r2, [pc, #476]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b75      	ldr	r3, [pc, #468]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a74      	ldr	r2, [pc, #464]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd fe14 	bl	8000d8c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fd fe10 	bl	8000d8c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e29e      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317a:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xc0>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fd fe00 	bl	8000d8c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd fdfc 	bl	8000d8c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	@ 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e28a      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a2:	4b60      	ldr	r3, [pc, #384]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0xe8>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d075      	beq.n	80032aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4b59      	ldr	r3, [pc, #356]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c8:	4b56      	ldr	r3, [pc, #344]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0x136>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_OscConfig+0x13c>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11f      	bne.n	8003224 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x154>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e25d      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b49      	ldr	r3, [pc, #292]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	4946      	ldr	r1, [pc, #280]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003210:	4b45      	ldr	r3, [pc, #276]	@ (8003328 <HAL_RCC_OscConfig+0x280>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fd6d 	bl	8000cf4 <HAL_InitTick>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d043      	beq.n	80032a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e249      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322c:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3c      	ldr	r2, [pc, #240]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd fda8 	bl	8000d8c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fd fda4 	bl	8000d8c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e232      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003252:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	492d      	ldr	r1, [pc, #180]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
 8003272:	e01a      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2a      	ldr	r2, [pc, #168]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800327a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fd84 	bl	8000d8c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fd fd80 	bl	8000d8c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e20e      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800329a:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1e0>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d041      	beq.n	800333a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c4:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fd fd5d 	bl	8000d8c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d6:	f7fd fd59 	bl	8000d8c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1e7      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ef      	beq.n	80032d6 <HAL_RCC_OscConfig+0x22e>
 80032f6:	e020      	b.n	800333a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fd fd40 	bl	8000d8c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800330e:	e00d      	b.n	800332c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7fd fd3c 	bl	8000d8c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d906      	bls.n	800332c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1ca      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800332c:	4b8c      	ldr	r3, [pc, #560]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ea      	bne.n	8003310 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a6 	beq.w	8003494 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800334c:	4b84      	ldr	r3, [pc, #528]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x2b4>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x2b6>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b7f      	ldr	r3, [pc, #508]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	4a7e      	ldr	r2, [pc, #504]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336c:	6593      	str	r3, [r2, #88]	@ 0x58
 800336e:	4b7c      	ldr	r3, [pc, #496]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	4b79      	ldr	r3, [pc, #484]	@ (8003564 <HAL_RCC_OscConfig+0x4bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <HAL_RCC_OscConfig+0x4bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	@ (8003564 <HAL_RCC_OscConfig+0x4bc>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd fcf9 	bl	8000d8c <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fd fcf5 	bl	8000d8c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e183      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003564 <HAL_RCC_OscConfig+0x4bc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d108      	bne.n	80033d6 <HAL_RCC_OscConfig+0x32e>
 80033c4:	4b66      	ldr	r3, [pc, #408]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	4a65      	ldr	r2, [pc, #404]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d4:	e024      	b.n	8003420 <HAL_RCC_OscConfig+0x378>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d110      	bne.n	8003400 <HAL_RCC_OscConfig+0x358>
 80033de:	4b60      	ldr	r3, [pc, #384]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_OscConfig+0x378>
 8003400:	4b57      	ldr	r3, [pc, #348]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	4a56      	ldr	r2, [pc, #344]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003410:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003416:	4a52      	ldr	r2, [pc, #328]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fd fcb0 	bl	8000d8c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fd fcac 	bl	8000d8c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e138      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003446:	4b46      	ldr	r3, [pc, #280]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ed      	beq.n	8003430 <HAL_RCC_OscConfig+0x388>
 8003454:	e015      	b.n	8003482 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fd fc99 	bl	8000d8c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fd fc95 	bl	8000d8c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e121      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003474:	4b3a      	ldr	r3, [pc, #232]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ed      	bne.n	800345e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003482:	7ffb      	ldrb	r3, [r7, #31]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003492:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03c      	beq.n	800351a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01c      	beq.n	80034e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fd fc68 	bl	8000d8c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034c0:	f7fd fc64 	bl	8000d8c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0f2      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034d2:	4b23      	ldr	r3, [pc, #140]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ef      	beq.n	80034c0 <HAL_RCC_OscConfig+0x418>
 80034e0:	e01b      	b.n	800351a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fc4b 	bl	8000d8c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034fa:	f7fd fc47 	bl	8000d8c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0d5      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800350e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ef      	bne.n	80034fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80c9 	beq.w	80036b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003524:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f000 8083 	beq.w	8003638 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d15e      	bne.n	80035f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd fc21 	bl	8000d8c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	e00c      	b.n	8003568 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7fd fc1d 	bl	8000d8c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d905      	bls.n	8003568 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0ab      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	4b55      	ldr	r3, [pc, #340]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ec      	bne.n	800354e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003574:	4b52      	ldr	r3, [pc, #328]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4b52      	ldr	r3, [pc, #328]	@ (80036c4 <HAL_RCC_OscConfig+0x61c>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6a11      	ldr	r1, [r2, #32]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003584:	3a01      	subs	r2, #1
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003596:	0852      	lsrs	r2, r2, #1
 8003598:	3a01      	subs	r2, #1
 800359a:	0552      	lsls	r2, r2, #21
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035a2:	0852      	lsrs	r2, r2, #1
 80035a4:	3a01      	subs	r2, #1
 80035a6:	0652      	lsls	r2, r2, #25
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035ae:	06d2      	lsls	r2, r2, #27
 80035b0:	430a      	orrs	r2, r1
 80035b2:	4943      	ldr	r1, [pc, #268]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b8:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c4:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a3d      	ldr	r2, [pc, #244]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fbdc 	bl	8000d8c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fbd8 	bl	8000d8c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e066      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	4b35      	ldr	r3, [pc, #212]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x530>
 80035f6:	e05e      	b.n	80036b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a30      	ldr	r2, [pc, #192]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fbc2 	bl	8000d8c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fbbe 	bl	8000d8c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04c      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361e:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800362a:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	4924      	ldr	r1, [pc, #144]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 8003630:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <HAL_RCC_OscConfig+0x620>)
 8003632:	4013      	ands	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
 8003636:	e03e      	b.n	80036b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e039      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003644:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <HAL_RCC_OscConfig+0x618>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	429a      	cmp	r2, r3
 8003656:	d12c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	3b01      	subs	r3, #1
 8003664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d123      	bne.n	80036b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d11b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d113      	bne.n	80036b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	019f800c 	.word	0x019f800c
 80036c8:	feeefffc 	.word	0xfeeefffc

080036cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e11e      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b91      	ldr	r3, [pc, #580]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b8e      	ldr	r3, [pc, #568]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	498c      	ldr	r1, [pc, #560]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b8a      	ldr	r3, [pc, #552]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e106      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d073      	beq.n	8003808 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d129      	bne.n	800377c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003728:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f4      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003738:	f000 f99e 	bl	8003a78 <RCC_GetSysClockFreqFromPLLSource>
 800373c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4a7c      	ldr	r2, [pc, #496]	@ (8003934 <HAL_RCC_ClockConfig+0x268>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d93f      	bls.n	80037c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d033      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	d12f      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003766:	4b72      	ldr	r3, [pc, #456]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800376e:	4a70      	ldr	r2, [pc, #448]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003774:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e024      	b.n	80037c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d107      	bne.n	8003794 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003784:	4b6a      	ldr	r3, [pc, #424]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0c6      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003794:	4b66      	ldr	r3, [pc, #408]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0be      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037a4:	f000 f8ce 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4a61      	ldr	r2, [pc, #388]	@ (8003934 <HAL_RCC_ClockConfig+0x268>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d909      	bls.n	80037c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80037bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4957      	ldr	r1, [pc, #348]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fd fad8 	bl	8000d8c <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fd fad4 	bl	8000d8c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e095      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d023      	beq.n	800385c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a42      	ldr	r2, [pc, #264]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003826:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800382a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003838:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003840:	4a3b      	ldr	r2, [pc, #236]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003842:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003846:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4936      	ldr	r1, [pc, #216]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
 800385a:	e008      	b.n	800386e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d105      	bne.n	800386e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4a32      	ldr	r2, [pc, #200]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 8003868:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800386e:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d21d      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387c:	4b2b      	ldr	r3, [pc, #172]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 020f 	bic.w	r2, r3, #15
 8003884:	4929      	ldr	r1, [pc, #164]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800388c:	f7fd fa7e 	bl	8000d8c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fd fa7a 	bl	8000d8c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e03b      	b.n	8003922 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_RCC_ClockConfig+0x260>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1ed      	bne.n	8003894 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4917      	ldr	r1, [pc, #92]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e2:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490f      	ldr	r1, [pc, #60]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f6:	f000 f825 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <HAL_RCC_ClockConfig+0x264>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	490c      	ldr	r1, [pc, #48]	@ (8003938 <HAL_RCC_ClockConfig+0x26c>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x270>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_ClockConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd f9ea 	bl	8000cf4 <HAL_InitTick>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40022000 	.word	0x40022000
 8003930:	40021000 	.word	0x40021000
 8003934:	04c4b400 	.word	0x04c4b400
 8003938:	08004ad8 	.word	0x08004ad8
 800393c:	20000000 	.word	0x20000000
 8003940:	20000018 	.word	0x20000018

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800394a:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b04      	cmp	r3, #4
 8003954:	d102      	bne.n	800395c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003956:	4b2a      	ldr	r3, [pc, #168]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e047      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d102      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	e03e      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800396e:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d136      	bne.n	80039e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003984:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3301      	adds	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003998:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a2:	68d2      	ldr	r2, [r2, #12]
 80039a4:	0a12      	lsrs	r2, r2, #8
 80039a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	617b      	str	r3, [r7, #20]
      break;
 80039b0:	e00c      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b2:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	0a12      	lsrs	r2, r2, #8
 80039c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
      break;
 80039ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0e5b      	lsrs	r3, r3, #25
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	e001      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039ec:	693b      	ldr	r3, [r7, #16]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	016e3600 	.word	0x016e3600

08003a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08004ae8 	.word	0x08004ae8

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a50:	f7ff ffda 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	@ (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08004ae8 	.word	0x08004ae8

08003a78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d10c      	bne.n	8003ab6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9c:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa6:	68d2      	ldr	r2, [r2, #12]
 8003aa8:	0a12      	lsrs	r2, r2, #8
 8003aaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
    break;
 8003ab4:	e00c      	b.n	8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab6:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	4a0e      	ldr	r2, [pc, #56]	@ (8003af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0a12      	lsrs	r2, r2, #8
 8003ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    break;
 8003ace:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0e5b      	lsrs	r3, r3, #25
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	3301      	adds	r3, #1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aea:	687b      	ldr	r3, [r7, #4]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40021000 	.word	0x40021000
 8003afc:	016e3600 	.word	0x016e3600
 8003b00:	00f42400 	.word	0x00f42400

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b10:	2300      	movs	r3, #0
 8003b12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8098 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b43      	ldr	r3, [pc, #268]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	4a3f      	ldr	r2, [pc, #252]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a39      	ldr	r2, [pc, #228]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd f917 	bl	8000d8c <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b60:	e009      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fd f913 	bl	8000d8c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d902      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	74fb      	strb	r3, [r7, #19]
        break;
 8003b74:	e005      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b76:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ef      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d159      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01e      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d019      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b23      	ldr	r3, [pc, #140]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb0:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bd0:	4a18      	ldr	r2, [pc, #96]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fd f8d3 	bl	8000d8c <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be8:	e00b      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fd f8cf 	bl	8000d8c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d902      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	74fb      	strb	r3, [r7, #19]
            break;
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ec      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c24:	4903      	ldr	r1, [pc, #12]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	74bb      	strb	r3, [r7, #18]
 8003c32:	e005      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4ba7      	ldr	r3, [pc, #668]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	4aa6      	ldr	r2, [pc, #664]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	499d      	ldr	r1, [pc, #628]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c80:	4b98      	ldr	r3, [pc, #608]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f023 020c 	bic.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4995      	ldr	r1, [pc, #596]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca2:	4b90      	ldr	r3, [pc, #576]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	498c      	ldr	r1, [pc, #560]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cc4:	4b87      	ldr	r3, [pc, #540]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4984      	ldr	r1, [pc, #528]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	497b      	ldr	r1, [pc, #492]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d08:	4b76      	ldr	r3, [pc, #472]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	4973      	ldr	r1, [pc, #460]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	496a      	ldr	r1, [pc, #424]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4c:	4b65      	ldr	r3, [pc, #404]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4962      	ldr	r1, [pc, #392]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	4959      	ldr	r1, [pc, #356]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d90:	4b54      	ldr	r3, [pc, #336]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	4951      	ldr	r1, [pc, #324]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d015      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	4948      	ldr	r1, [pc, #288]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd0:	d105      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd2:	4b44      	ldr	r3, [pc, #272]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a43      	ldr	r2, [pc, #268]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ddc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d015      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	493a      	ldr	r1, [pc, #232]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e08:	d105      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e14:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	492c      	ldr	r1, [pc, #176]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e40:	d105      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e42:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a27      	ldr	r2, [pc, #156]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	491e      	ldr	r1, [pc, #120]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e78:	d105      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e92:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	4910      	ldr	r1, [pc, #64]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ebc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	4902      	ldr	r1, [pc, #8]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f08:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4918      	ldr	r1, [pc, #96]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	490a      	ldr	r1, [pc, #40]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f83b 	bl	800401c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2224      	movs	r2, #36	@ 0x24
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fb2e 	bl	8004628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f82f 	bl	8004030 <UART_SetConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e01b      	b.n	8004014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fbad 	bl	800476c <UART_CheckIdleState>
 8004012:	4603      	mov	r3, r0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b08c      	sub	sp, #48	@ 0x30
 8004036:	af00      	add	r7, sp, #0
 8004038:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4baa      	ldr	r3, [pc, #680]	@ (8004308 <UART_SetConfig+0x2d8>)
 8004060:	4013      	ands	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004068:	430b      	orrs	r3, r1
 800406a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a9f      	ldr	r2, [pc, #636]	@ (800430c <UART_SetConfig+0x2dc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004098:	4313      	orrs	r3, r2
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80040a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	f023 010f 	bic.w	r1, r3, #15
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a90      	ldr	r2, [pc, #576]	@ (8004310 <UART_SetConfig+0x2e0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d125      	bne.n	8004120 <UART_SetConfig+0xf0>
 80040d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004314 <UART_SetConfig+0x2e4>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d81a      	bhi.n	8004118 <UART_SetConfig+0xe8>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <UART_SetConfig+0xb8>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004109 	.word	0x08004109
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004111 	.word	0x08004111
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e116      	b.n	800432e <UART_SetConfig+0x2fe>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e112      	b.n	800432e <UART_SetConfig+0x2fe>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410e:	e10e      	b.n	800432e <UART_SetConfig+0x2fe>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004116:	e10a      	b.n	800432e <UART_SetConfig+0x2fe>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411e:	e106      	b.n	800432e <UART_SetConfig+0x2fe>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7c      	ldr	r2, [pc, #496]	@ (8004318 <UART_SetConfig+0x2e8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d138      	bne.n	800419c <UART_SetConfig+0x16c>
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <UART_SetConfig+0x2e4>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d82d      	bhi.n	8004194 <UART_SetConfig+0x164>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <UART_SetConfig+0x110>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004175 	.word	0x08004175
 8004144:	08004195 	.word	0x08004195
 8004148:	08004195 	.word	0x08004195
 800414c:	08004195 	.word	0x08004195
 8004150:	08004185 	.word	0x08004185
 8004154:	08004195 	.word	0x08004195
 8004158:	08004195 	.word	0x08004195
 800415c:	08004195 	.word	0x08004195
 8004160:	0800417d 	.word	0x0800417d
 8004164:	08004195 	.word	0x08004195
 8004168:	08004195 	.word	0x08004195
 800416c:	08004195 	.word	0x08004195
 8004170:	0800418d 	.word	0x0800418d
 8004174:	2300      	movs	r3, #0
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417a:	e0d8      	b.n	800432e <UART_SetConfig+0x2fe>
 800417c:	2302      	movs	r3, #2
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004182:	e0d4      	b.n	800432e <UART_SetConfig+0x2fe>
 8004184:	2304      	movs	r3, #4
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418a:	e0d0      	b.n	800432e <UART_SetConfig+0x2fe>
 800418c:	2308      	movs	r3, #8
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004192:	e0cc      	b.n	800432e <UART_SetConfig+0x2fe>
 8004194:	2310      	movs	r3, #16
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419a:	e0c8      	b.n	800432e <UART_SetConfig+0x2fe>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5e      	ldr	r2, [pc, #376]	@ (800431c <UART_SetConfig+0x2ec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d125      	bne.n	80041f2 <UART_SetConfig+0x1c2>
 80041a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004314 <UART_SetConfig+0x2e4>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041b0:	2b30      	cmp	r3, #48	@ 0x30
 80041b2:	d016      	beq.n	80041e2 <UART_SetConfig+0x1b2>
 80041b4:	2b30      	cmp	r3, #48	@ 0x30
 80041b6:	d818      	bhi.n	80041ea <UART_SetConfig+0x1ba>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d00a      	beq.n	80041d2 <UART_SetConfig+0x1a2>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d814      	bhi.n	80041ea <UART_SetConfig+0x1ba>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <UART_SetConfig+0x19a>
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d008      	beq.n	80041da <UART_SetConfig+0x1aa>
 80041c8:	e00f      	b.n	80041ea <UART_SetConfig+0x1ba>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d0:	e0ad      	b.n	800432e <UART_SetConfig+0x2fe>
 80041d2:	2302      	movs	r3, #2
 80041d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d8:	e0a9      	b.n	800432e <UART_SetConfig+0x2fe>
 80041da:	2304      	movs	r3, #4
 80041dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e0:	e0a5      	b.n	800432e <UART_SetConfig+0x2fe>
 80041e2:	2308      	movs	r3, #8
 80041e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e8:	e0a1      	b.n	800432e <UART_SetConfig+0x2fe>
 80041ea:	2310      	movs	r3, #16
 80041ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041f0:	e09d      	b.n	800432e <UART_SetConfig+0x2fe>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004320 <UART_SetConfig+0x2f0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d125      	bne.n	8004248 <UART_SetConfig+0x218>
 80041fc:	4b45      	ldr	r3, [pc, #276]	@ (8004314 <UART_SetConfig+0x2e4>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004206:	2bc0      	cmp	r3, #192	@ 0xc0
 8004208:	d016      	beq.n	8004238 <UART_SetConfig+0x208>
 800420a:	2bc0      	cmp	r3, #192	@ 0xc0
 800420c:	d818      	bhi.n	8004240 <UART_SetConfig+0x210>
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d00a      	beq.n	8004228 <UART_SetConfig+0x1f8>
 8004212:	2b80      	cmp	r3, #128	@ 0x80
 8004214:	d814      	bhi.n	8004240 <UART_SetConfig+0x210>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <UART_SetConfig+0x1f0>
 800421a:	2b40      	cmp	r3, #64	@ 0x40
 800421c:	d008      	beq.n	8004230 <UART_SetConfig+0x200>
 800421e:	e00f      	b.n	8004240 <UART_SetConfig+0x210>
 8004220:	2300      	movs	r3, #0
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e082      	b.n	800432e <UART_SetConfig+0x2fe>
 8004228:	2302      	movs	r3, #2
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e07e      	b.n	800432e <UART_SetConfig+0x2fe>
 8004230:	2304      	movs	r3, #4
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e07a      	b.n	800432e <UART_SetConfig+0x2fe>
 8004238:	2308      	movs	r3, #8
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e076      	b.n	800432e <UART_SetConfig+0x2fe>
 8004240:	2310      	movs	r3, #16
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e072      	b.n	800432e <UART_SetConfig+0x2fe>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	@ (8004324 <UART_SetConfig+0x2f4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d12a      	bne.n	80042a8 <UART_SetConfig+0x278>
 8004252:	4b30      	ldr	r3, [pc, #192]	@ (8004314 <UART_SetConfig+0x2e4>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004260:	d01a      	beq.n	8004298 <UART_SetConfig+0x268>
 8004262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004266:	d81b      	bhi.n	80042a0 <UART_SetConfig+0x270>
 8004268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426c:	d00c      	beq.n	8004288 <UART_SetConfig+0x258>
 800426e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004272:	d815      	bhi.n	80042a0 <UART_SetConfig+0x270>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <UART_SetConfig+0x250>
 8004278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427c:	d008      	beq.n	8004290 <UART_SetConfig+0x260>
 800427e:	e00f      	b.n	80042a0 <UART_SetConfig+0x270>
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e052      	b.n	800432e <UART_SetConfig+0x2fe>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e04e      	b.n	800432e <UART_SetConfig+0x2fe>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004296:	e04a      	b.n	800432e <UART_SetConfig+0x2fe>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429e:	e046      	b.n	800432e <UART_SetConfig+0x2fe>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a6:	e042      	b.n	800432e <UART_SetConfig+0x2fe>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a17      	ldr	r2, [pc, #92]	@ (800430c <UART_SetConfig+0x2dc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d13a      	bne.n	8004328 <UART_SetConfig+0x2f8>
 80042b2:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <UART_SetConfig+0x2e4>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042c0:	d01a      	beq.n	80042f8 <UART_SetConfig+0x2c8>
 80042c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042c6:	d81b      	bhi.n	8004300 <UART_SetConfig+0x2d0>
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042cc:	d00c      	beq.n	80042e8 <UART_SetConfig+0x2b8>
 80042ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d2:	d815      	bhi.n	8004300 <UART_SetConfig+0x2d0>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <UART_SetConfig+0x2b0>
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042dc:	d008      	beq.n	80042f0 <UART_SetConfig+0x2c0>
 80042de:	e00f      	b.n	8004300 <UART_SetConfig+0x2d0>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e6:	e022      	b.n	800432e <UART_SetConfig+0x2fe>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	e01e      	b.n	800432e <UART_SetConfig+0x2fe>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f6:	e01a      	b.n	800432e <UART_SetConfig+0x2fe>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fe:	e016      	b.n	800432e <UART_SetConfig+0x2fe>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004306:	e012      	b.n	800432e <UART_SetConfig+0x2fe>
 8004308:	cfff69f3 	.word	0xcfff69f3
 800430c:	40008000 	.word	0x40008000
 8004310:	40013800 	.word	0x40013800
 8004314:	40021000 	.word	0x40021000
 8004318:	40004400 	.word	0x40004400
 800431c:	40004800 	.word	0x40004800
 8004320:	40004c00 	.word	0x40004c00
 8004324:	40005000 	.word	0x40005000
 8004328:	2310      	movs	r3, #16
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4aae      	ldr	r2, [pc, #696]	@ (80045ec <UART_SetConfig+0x5bc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f040 8097 	bne.w	8004468 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800433a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800433e:	2b08      	cmp	r3, #8
 8004340:	d823      	bhi.n	800438a <UART_SetConfig+0x35a>
 8004342:	a201      	add	r2, pc, #4	@ (adr r2, 8004348 <UART_SetConfig+0x318>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	0800438b 	.word	0x0800438b
 8004350:	08004375 	.word	0x08004375
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800437b 	.word	0x0800437b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800438b 	.word	0x0800438b
 8004368:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7ff fb58 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004372:	e010      	b.n	8004396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b9e      	ldr	r3, [pc, #632]	@ (80045f0 <UART_SetConfig+0x5c0>)
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004378:	e00d      	b.n	8004396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7ff fae3 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 800437e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004380:	e009      	b.n	8004396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004388:	e005      	b.n	8004396 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8130 	beq.w	80045fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	4a94      	ldr	r2, [pc, #592]	@ (80045f4 <UART_SetConfig+0x5c4>)
 80043a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d305      	bcc.n	80043ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d903      	bls.n	80043d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043d4:	e113      	b.n	80045fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	2200      	movs	r2, #0
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	4a84      	ldr	r2, [pc, #528]	@ (80045f4 <UART_SetConfig+0x5c4>)
 80043e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2200      	movs	r2, #0
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043f8:	f7fb ff0e 	bl	8000218 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	020b      	lsls	r3, r1, #8
 800440e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004412:	0202      	lsls	r2, r0, #8
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	6849      	ldr	r1, [r1, #4]
 8004418:	0849      	lsrs	r1, r1, #1
 800441a:	2000      	movs	r0, #0
 800441c:	460c      	mov	r4, r1
 800441e:	4605      	mov	r5, r0
 8004420:	eb12 0804 	adds.w	r8, r2, r4
 8004424:	eb43 0905 	adc.w	r9, r3, r5
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	469a      	mov	sl, r3
 8004430:	4693      	mov	fp, r2
 8004432:	4652      	mov	r2, sl
 8004434:	465b      	mov	r3, fp
 8004436:	4640      	mov	r0, r8
 8004438:	4649      	mov	r1, r9
 800443a:	f7fb feed 	bl	8000218 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4613      	mov	r3, r2
 8004444:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800444c:	d308      	bcc.n	8004460 <UART_SetConfig+0x430>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004454:	d204      	bcs.n	8004460 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a3a      	ldr	r2, [r7, #32]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	e0ce      	b.n	80045fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004466:	e0ca      	b.n	80045fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004470:	d166      	bne.n	8004540 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004476:	2b08      	cmp	r3, #8
 8004478:	d827      	bhi.n	80044ca <UART_SetConfig+0x49a>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <UART_SetConfig+0x450>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044cb 	.word	0x080044cb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7ff fabc 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80044a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044aa:	e014      	b.n	80044d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7ff face 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80044b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <UART_SetConfig+0x5c0>)
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b8:	e00d      	b.n	80044d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7ff fa43 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80044be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044c0:	e009      	b.n	80044d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044c8:	e005      	b.n	80044d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8090 	beq.w	80045fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	4a44      	ldr	r2, [pc, #272]	@ (80045f4 <UART_SetConfig+0x5c4>)
 80044e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80044f0:	005a      	lsls	r2, r3, #1
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	441a      	add	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d916      	bls.n	8004538 <UART_SetConfig+0x508>
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004510:	d212      	bcs.n	8004538 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f023 030f 	bic.w	r3, r3, #15
 800451a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	b29b      	uxth	r3, r3
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	b29a      	uxth	r2, r3
 8004528:	8bfb      	ldrh	r3, [r7, #30]
 800452a:	4313      	orrs	r3, r2
 800452c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	8bfa      	ldrh	r2, [r7, #30]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e062      	b.n	80045fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800453e:	e05e      	b.n	80045fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004544:	2b08      	cmp	r3, #8
 8004546:	d828      	bhi.n	800459a <UART_SetConfig+0x56a>
 8004548:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <UART_SetConfig+0x520>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004575 	.word	0x08004575
 8004554:	0800457d 	.word	0x0800457d
 8004558:	08004585 	.word	0x08004585
 800455c:	0800459b 	.word	0x0800459b
 8004560:	0800458b 	.word	0x0800458b
 8004564:	0800459b 	.word	0x0800459b
 8004568:	0800459b 	.word	0x0800459b
 800456c:	0800459b 	.word	0x0800459b
 8004570:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004574:	f7ff fa54 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800457a:	e014      	b.n	80045a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7ff fa66 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8004580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004582:	e010      	b.n	80045a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <UART_SetConfig+0x5c0>)
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004588:	e00d      	b.n	80045a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7ff f9db 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 800458e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004590:	e009      	b.n	80045a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004598:	e005      	b.n	80045a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045a4:	bf00      	nop
    }

    if (pclk != 0U)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d028      	beq.n	80045fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	4a10      	ldr	r2, [pc, #64]	@ (80045f4 <UART_SetConfig+0x5c4>)
 80045b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b6:	461a      	mov	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	441a      	add	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d910      	bls.n	80045f8 <UART_SetConfig+0x5c8>
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045dc:	d20c      	bcs.n	80045f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	e009      	b.n	80045fe <UART_SetConfig+0x5ce>
 80045ea:	bf00      	nop
 80045ec:	40008000 	.word	0x40008000
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	08004af4 	.word	0x08004af4
      }
      else
      {
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2201      	movs	r2, #1
 8004602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2201      	movs	r2, #1
 800460a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2200      	movs	r2, #0
 8004618:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800461a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800461e:	4618      	mov	r0, r3
 8004620:	3730      	adds	r7, #48	@ 0x30
 8004622:	46bd      	mov	sp, r7
 8004624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01a      	beq.n	800473e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004726:	d10a      	bne.n	800473e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b098      	sub	sp, #96	@ 0x60
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800477c:	f7fc fb06 	bl	8000d8c <HAL_GetTick>
 8004780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d12f      	bne.n	80047f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004798:	2200      	movs	r2, #0
 800479a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f88e 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d022      	beq.n	80047f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047be:	653b      	str	r3, [r7, #80]	@ 0x50
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e063      	b.n	80048b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d149      	bne.n	8004892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004806:	2200      	movs	r2, #0
 8004808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f857 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03c      	beq.n	8004892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	623b      	str	r3, [r7, #32]
   return(result);
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004836:	633b      	str	r3, [r7, #48]	@ 0x30
 8004838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800483c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	60fb      	str	r3, [r7, #12]
   return(result);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800486a:	61fa      	str	r2, [r7, #28]
 800486c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	617b      	str	r3, [r7, #20]
   return(result);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e5      	bne.n	800484a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e012      	b.n	80048b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3758      	adds	r7, #88	@ 0x58
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d0:	e04f      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d8:	d04b      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fc fa57 	bl	8000d8c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e04e      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d037      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d034      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b40      	cmp	r3, #64	@ 0x40
 800490c:	d031      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d110      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2208      	movs	r2, #8
 8004922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f838 	bl	800499a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2208      	movs	r2, #8
 800492e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e029      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800494c:	d111      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f81e 	bl	800499a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e00f      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0a0      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b095      	sub	sp, #84	@ 0x54
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e6      	bne.n	80049a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e3      	bne.n	80049d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d118      	bne.n	8004a46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e6      	bne.n	8004a14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a5a:	bf00      	nop
 8004a5c:	3754      	adds	r7, #84	@ 0x54
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <memset>:
 8004a66:	4402      	add	r2, r0
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d100      	bne.n	8004a70 <memset+0xa>
 8004a6e:	4770      	bx	lr
 8004a70:	f803 1b01 	strb.w	r1, [r3], #1
 8004a74:	e7f9      	b.n	8004a6a <memset+0x4>
	...

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 f818 	bl	8004ac0 <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08004b14 	.word	0x08004b14
 8004ab4:	08004b14 	.word	0x08004b14
 8004ab8:	08004b14 	.word	0x08004b14
 8004abc:	08004b18 	.word	0x08004b18

08004ac0 <_init>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr

08004acc <_fini>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr
