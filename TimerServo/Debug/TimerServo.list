
TimerServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003f78  08003f78  00004f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fac  08003fac  00005020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb4  08003fb4  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08003fbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000020  08003fdc  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003fdc  00005138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a30  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205d  00000000  00000000  00015a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00017ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0c  00000000  00000000  00018a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1f6  00000000  00000000  00019654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001097f  00000000  00000000  0003884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd74a  00000000  00000000  000491c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  00116958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003f60 	.word	0x08003f60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08003f60 	.word	0x08003f60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <ServoAngle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle){
 8000544:	b480      	push	{r7}
 8000546:	b087      	sub	sp, #28
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	4613      	mov	r3, r2
 8000550:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse_lenght = 250 + (angle*(1250-250)/180);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <ServoAngle+0x90>)
 800055e:	fb82 1203 	smull	r1, r2, r2, r3
 8000562:	441a      	add	r2, r3
 8000564:	11d2      	asrs	r2, r2, #7
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	33fa      	adds	r3, #250	@ 0xfa
 800056c:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d104      	bne.n	800057e <ServoAngle+0x3a>
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800057c:	e023      	b.n	80005c6 <ServoAngle+0x82>
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d104      	bne.n	800058e <ServoAngle+0x4a>
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800058c:	e01b      	b.n	80005c6 <ServoAngle+0x82>
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	2b08      	cmp	r3, #8
 8000592:	d104      	bne.n	800059e <ServoAngle+0x5a>
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800059c:	e013      	b.n	80005c6 <ServoAngle+0x82>
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2b0c      	cmp	r3, #12
 80005a2:	d104      	bne.n	80005ae <ServoAngle+0x6a>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005ac:	e00b      	b.n	80005c6 <ServoAngle+0x82>
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	2b10      	cmp	r3, #16
 80005b2:	d104      	bne.n	80005be <ServoAngle+0x7a>
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80005bc:	e003      	b.n	80005c6 <ServoAngle+0x82>
	__HAL_TIM_SET_COMPARE(htim,channel,pulse_lenght);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005c6:	bf00      	nop
 80005c8:	371c      	adds	r7, #28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	b60b60b7 	.word	0xb60b60b7

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fc0b 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f857 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f95f 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005ea:	f000 f89f 	bl	800072c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ee:	2100      	movs	r1, #0
 80005f0:	4826      	ldr	r0, [pc, #152]	@ (800068c <main+0xb4>)
 80005f2:	f001 fe37 	bl	8002264 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005f6:	2104      	movs	r1, #4
 80005f8:	4824      	ldr	r0, [pc, #144]	@ (800068c <main+0xb4>)
 80005fa:	f001 fe33 	bl	8002264 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fa82 	bl	8000b08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000604:	2101      	movs	r1, #1
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fab4 	bl	8000b74 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <main+0xb8>)
 800060e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000612:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0xb8>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <main+0xb8>)
 800061c:	2200      	movs	r2, #0
 800061e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <main+0xb8>)
 8000622:	2200      	movs	r2, #0
 8000624:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <main+0xb8>)
 8000628:	2200      	movs	r2, #0
 800062a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800062c:	4918      	ldr	r1, [pc, #96]	@ (8000690 <main+0xb8>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fb2c 	bl	8000c8c <BSP_COM_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x66>
  {
    Error_Handler();
 800063a:	f000 f971 	bl	8000920 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  for (uint8_t angle = 0;  angle < 180; angle+=20) {
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e00c      	b.n	800065e <main+0x86>
		  ServoAngle(&htim1, TIM_CHANNEL_1, angle);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	461a      	mov	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <main+0xb4>)
 800064c:	f7ff ff7a 	bl	8000544 <ServoAngle>
		  HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f000 fc40 	bl	8000ed8 <HAL_Delay>
	  for (uint8_t angle = 0;  angle < 180; angle+=20) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	3314      	adds	r3, #20
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2bb3      	cmp	r3, #179	@ 0xb3
 8000662:	d9ef      	bls.n	8000644 <main+0x6c>
	  }
	  for (uint8_t angle = 180;  angle < 180; angle-=20) {
 8000664:	23b4      	movs	r3, #180	@ 0xb4
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	e00c      	b.n	8000684 <main+0xac>
		  ServoAngle(&htim1, TIM_CHANNEL_1, angle);
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	461a      	mov	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <main+0xb4>)
 8000672:	f7ff ff67 	bl	8000544 <ServoAngle>
		  HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067a:	f000 fc2d 	bl	8000ed8 <HAL_Delay>
	  for (uint8_t angle = 180;  angle < 180; angle-=20) {
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	3b14      	subs	r3, #20
 8000682:	71bb      	strb	r3, [r7, #6]
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	2bb3      	cmp	r3, #179	@ 0xb3
 8000688:	d9ef      	bls.n	800066a <main+0x92>
	  for (uint8_t angle = 0;  angle < 180; angle+=20) {
 800068a:	e7d8      	b.n	800063e <main+0x66>
 800068c:	2000004c 	.word	0x2000004c
 8000690:	2000003c 	.word	0x2000003c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2238      	movs	r2, #56	@ 0x38
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fc2f 	bl	8003f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 ff3a 	bl	8001530 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2340      	movs	r3, #64	@ 0x40
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006d6:	2355      	movs	r3, #85	@ 0x55
 80006d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ffd4 	bl	8001698 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f6:	f000 f913 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fad2 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800071e:	f000 f8ff 	bl	8000920 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09c      	sub	sp, #112	@ 0x70
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2234      	movs	r2, #52	@ 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fbcd 	bl	8003f06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800076c:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <MX_TIM1_Init+0x174>)
 800076e:	4a4d      	ldr	r2, [pc, #308]	@ (80008a4 <MX_TIM1_Init+0x178>)
 8000770:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000774:	f240 123f 	movw	r2, #319	@ 0x13f
 8000778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b49      	ldr	r3, [pc, #292]	@ (80008a0 <MX_TIM1_Init+0x174>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000780:	4b47      	ldr	r3, [pc, #284]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000782:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <MX_TIM1_Init+0x174>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800079a:	4841      	ldr	r0, [pc, #260]	@ (80008a0 <MX_TIM1_Init+0x174>)
 800079c:	f001 fcaa 	bl	80020f4 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007a6:	f000 f8bb 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007b4:	4619      	mov	r1, r3
 80007b6:	483a      	ldr	r0, [pc, #232]	@ (80008a0 <MX_TIM1_Init+0x174>)
 80007b8:	f001 ff74 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80007c2:	f000 f8ad 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007c6:	4836      	ldr	r0, [pc, #216]	@ (80008a0 <MX_TIM1_Init+0x174>)
 80007c8:	f001 fceb 	bl	80021a2 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80007d2:	f000 f8a5 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e6:	4619      	mov	r1, r3
 80007e8:	482d      	ldr	r0, [pc, #180]	@ (80008a0 <MX_TIM1_Init+0x174>)
 80007ea:	f002 fcf5 	bl	80031d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80007f4:	f000 f894 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	@ 0x60
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000814:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <MX_TIM1_Init+0x174>)
 800081e:	f001 fe2d 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000828:	f000 f87a 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000830:	2204      	movs	r2, #4
 8000832:	4619      	mov	r1, r3
 8000834:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000836:	f001 fe21 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000840:	f000 f86e 	bl	8000920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800086a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000882:	f002 fd37 	bl	80032f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800088c:	f000 f848 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM1_Init+0x174>)
 8000892:	f000 f88f 	bl	80009b4 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	@ 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000004c 	.word	0x2000004c
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_GPIO_Init+0x74>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <MX_GPIO_Init+0x74>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_GPIO_Init+0x74>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_GPIO_Init+0x74>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a14      	ldr	r2, [pc, #80]	@ (800091c <MX_GPIO_Init+0x74>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_GPIO_Init+0x74>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_GPIO_Init+0x74>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <MX_GPIO_Init+0x74>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_GPIO_Init+0x74>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_GPIO_Init+0x74>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <MX_GPIO_Init+0x74>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_GPIO_Init+0x74>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	@ 0x60
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	@ 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000962:	f000 fe89 	bl	8001678 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <HAL_TIM_Base_MspInit+0x38>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d10b      	bne.n	800099e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 800098c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000990:	6613      	str	r3, [r2, #96]	@ 0x60
 8000992:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_TIM_MspPostInit+0x64>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d11b      	bne.n	8000a0e <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_TIM_MspPostInit+0x6c>)
 8000a0a:	f000 fbf7 	bl	80011fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 fa0f 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f8e2 	bl	8000c50 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f003 fa19 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae6:	f7ff fd77 	bl	80005d8 <main>

08000aea <LoopForever>:

LoopForever:
    b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   r0, =_estack
 8000aec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000af8:	08003fbc 	.word	0x08003fbc
  ldr r2, =_sbss
 8000afc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b00:	20000138 	.word	0x20000138

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <BSP_LED_Init+0x64>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <BSP_LED_Init+0x64>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <BSP_LED_Init+0x64>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <BSP_LED_Init+0x68>)
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	f107 020c 	add.w	r2, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fb57 	bl	80011fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <BSP_LED_Init+0x68>)
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	2120      	movs	r1, #32
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fcd0 	bl	8001500 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	20000004 	.word	0x20000004

08000b74 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000b84:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <BSP_PB_Init+0xc4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a2b      	ldr	r2, [pc, #172]	@ (8000c38 <BSP_PB_Init+0xc4>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <BSP_PB_Init+0xc4>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <BSP_PB_Init+0xc8>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	f107 020c 	add.w	r2, r7, #12
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fb1a 	bl	80011fc <HAL_GPIO_Init>
 8000bc8:	e031      	b.n	8000c2e <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bce:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <BSP_PB_Init+0xc8>)
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fb0c 	bl	80011fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <BSP_PB_Init+0xcc>)
 8000bea:	441a      	add	r2, r3
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4915      	ldr	r1, [pc, #84]	@ (8000c44 <BSP_PB_Init+0xd0>)
 8000bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f000 fabc 	bl	8001174 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <BSP_PB_Init+0xcc>)
 8000c02:	1898      	adds	r0, r3, r2
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <BSP_PB_Init+0xd4>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f000 fa93 	bl	800113a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000c14:	2028      	movs	r0, #40	@ 0x28
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <BSP_PB_Init+0xd8>)
 8000c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	f000 fa56 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c26:	2328      	movs	r3, #40	@ 0x28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fa6c 	bl	8001106 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000098 	.word	0x20000098
 8000c44:	08003f90 	.word	0x08003f90
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	20000014 	.word	0x20000014

08000c50 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <BSP_PB_IRQHandler+0x20>)
 8000c60:	4413      	add	r3, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fa9a 	bl	800119c <HAL_EXTI_IRQHandler>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000098 	.word	0x20000098

08000c74 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d903      	bls.n	8000caa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ca2:	f06f 0301 	mvn.w	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e018      	b.n	8000cdc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2294      	movs	r2, #148	@ 0x94
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <BSP_COM_Init+0x5c>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f852 	bl	8000d60 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2294      	movs	r2, #148	@ 0x94
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <BSP_COM_Init+0x5c>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	6839      	ldr	r1, [r7, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f80e 	bl	8000cec <MX_LPUART1_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000cd6:	f06f 0303 	mvn.w	r3, #3
 8000cda:	e000      	b.n	8000cde <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000a0 	.word	0x200000a0

08000cec <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_LPUART1_Init+0x60>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	220c      	movs	r2, #12
 8000d0a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	895b      	ldrh	r3, [r3, #10]
 8000d10:	461a      	mov	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	891b      	ldrh	r3, [r3, #8]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	899b      	ldrh	r3, [r3, #12]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d38:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f002 fb6e 	bl	800341c <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ff8d 	bl	8000c74 <BSP_PB_Callback>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d9c:	4a15      	ldr	r2, [pc, #84]	@ (8000df4 <COM1_MspInit+0x94>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <COM1_MspInit+0x94>)
 8000da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dce:	f000 fa15 	bl	80011fc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f000 fa08 	bl	80011fc <HAL_GPIO_Init>
}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	@ 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f95a 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 f80d 	bl	8000e28 <HAL_InitTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	e001      	b.n	8000e1e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1a:	f7ff fd87 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]

}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_InitTick+0x68>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d022      	beq.n	8000e82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_InitTick+0x6c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_InitTick+0x68>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f966 	bl	8001122 <HAL_SYSTICK_Config>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10f      	bne.n	8000e7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d809      	bhi.n	8000e76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e62:	2200      	movs	r2, #0
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e6a:	f000 f932 	bl	80010d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_InitTick+0x70>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e004      	b.n	8000e86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e001      	b.n	8000e86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000001c 	.word	0x2000001c
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000018 	.word	0x20000018

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a03      	ldr	r2, [pc, #12]	@ (8000eb8 <HAL_IncTick+0x1c>)
 8000eac:	6013      	str	r3, [r2, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000134 	.word	0x20000134
 8000ebc:	2000001c 	.word	0x2000001c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000134 	.word	0x20000134

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ef0:	d004      	beq.n	8000efc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_Delay+0x40>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efc:	bf00      	nop
 8000efe:	f7ff ffdf 	bl	8000ec0 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8f7      	bhi.n	8000efe <HAL_Delay+0x26>
  {
  }
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000001c 	.word	0x2000001c

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	@ (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	@ (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	@ (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff40 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff33 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa4 	bl	8001078 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800113a:	b480      	push	{r7}
 800113c:	b087      	sub	sp, #28
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	460b      	mov	r3, r1
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	605a      	str	r2, [r3, #4]
      break;
 8001158:	e005      	b.n	8001166 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	75fb      	strb	r3, [r7, #23]
      break;
 8001164:	bf00      	nop
  }

  return status;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e003      	b.n	8001190 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800118e:	2300      	movs	r3, #0
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0c1b      	lsrs	r3, r3, #16
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	015a      	lsls	r2, r3, #5
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_EXTI_IRQHandler+0x5c>)
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4798      	blx	r3
    }
  }
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010414 	.word	0x40010414

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120a:	e15a      	b.n	80014c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 814c 	beq.w	80014bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b01      	cmp	r3, #1
 800122e:	d005      	beq.n	800123c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001238:	2b02      	cmp	r3, #2
 800123a:	d130      	bne.n	800129e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001272:	2201      	movs	r2, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 0201 	and.w	r2, r3, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d017      	beq.n	80012da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d123      	bne.n	800132e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0203 	and.w	r2, r3, #3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80a6 	beq.w	80014bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <HAL_GPIO_Init+0x2e4>)
 8001372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001374:	4a5a      	ldr	r2, [pc, #360]	@ (80014e0 <HAL_GPIO_Init+0x2e4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6613      	str	r3, [r2, #96]	@ 0x60
 800137c:	4b58      	ldr	r3, [pc, #352]	@ (80014e0 <HAL_GPIO_Init+0x2e4>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001388:	4a56      	ldr	r2, [pc, #344]	@ (80014e4 <HAL_GPIO_Init+0x2e8>)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013b2:	d01f      	beq.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <HAL_GPIO_Init+0x2ec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d019      	beq.n	80013f0 <HAL_GPIO_Init+0x1f4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <HAL_GPIO_Init+0x2f0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_GPIO_Init+0x1f0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <HAL_GPIO_Init+0x2f4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a49      	ldr	r2, [pc, #292]	@ (80014f4 <HAL_GPIO_Init+0x2f8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1e8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a48      	ldr	r2, [pc, #288]	@ (80014f8 <HAL_GPIO_Init+0x2fc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013dc:	2305      	movs	r3, #5
 80013de:	e00a      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013e0:	2306      	movs	r3, #6
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013f4:	2300      	movs	r3, #0
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001406:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <HAL_GPIO_Init+0x2e8>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <HAL_GPIO_Init+0x300>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001438:	4a30      	ldr	r2, [pc, #192]	@ (80014fc <HAL_GPIO_Init+0x300>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x300>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001462:	4a26      	ldr	r2, [pc, #152]	@ (80014fc <HAL_GPIO_Init+0x300>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_GPIO_Init+0x300>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <HAL_GPIO_Init+0x300>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <HAL_GPIO_Init+0x300>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <HAL_GPIO_Init+0x300>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f ae9d 	bne.w	800120c <HAL_GPIO_Init+0x10>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800151c:	e002      	b.n	8001524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d141      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153e:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d131      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001552:	4a46      	ldr	r2, [pc, #280]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b43      	ldr	r3, [pc, #268]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001564:	4a41      	ldr	r2, [pc, #260]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800156c:	4b40      	ldr	r3, [pc, #256]	@ (8001670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2232      	movs	r2, #50	@ 0x32
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a3f      	ldr	r2, [pc, #252]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001582:	e002      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3b01      	subs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001596:	d102      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f2      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159e:	4b33      	ldr	r3, [pc, #204]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015aa:	d158      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e057      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b6:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015c0:	e04d      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c8:	d141      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d6:	d131      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015de:	4a23      	ldr	r2, [pc, #140]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f0:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2232      	movs	r2, #50	@ 0x32
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160e:	e002      	b.n	8001616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3b01      	subs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001622:	d102      	bne.n	800162a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f2      	bne.n	8001610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001636:	d112      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e011      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800164c:	e007      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40007000 	.word	0x40007000
 8001670:	20000000 	.word	0x20000000
 8001674:	431bde83 	.word	0x431bde83

08001678 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001686:	6093      	str	r3, [r2, #8]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40007000 	.word	0x40007000

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e2fe      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4b97      	ldr	r3, [pc, #604]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	4b94      	ldr	r3, [pc, #592]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e>
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e2d9      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b85      	ldr	r3, [pc, #532]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a84      	ldr	r2, [pc, #528]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b7f      	ldr	r3, [pc, #508]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7e      	ldr	r2, [pc, #504]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b7c      	ldr	r3, [pc, #496]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7b      	ldr	r2, [pc, #492]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b78      	ldr	r3, [pc, #480]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b75      	ldr	r3, [pc, #468]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a74      	ldr	r2, [pc, #464]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fbb6 	bl	8000ec0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fbb2 	bl	8000ec0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e29e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fba2 	bl	8000ec0 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fb9e 	bl	8000ec0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e28a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	4b60      	ldr	r3, [pc, #384]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d075      	beq.n	800189a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ae:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b8:	4b56      	ldr	r3, [pc, #344]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x136>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_OscConfig+0x13c>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d11f      	bne.n	8001814 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x154>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e25d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b49      	ldr	r3, [pc, #292]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	4946      	ldr	r1, [pc, #280]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001800:	4b45      	ldr	r3, [pc, #276]	@ (8001918 <HAL_RCC_OscConfig+0x280>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb0f 	bl	8000e28 <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d043      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e249      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d023      	beq.n	8001864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181c:	4b3d      	ldr	r3, [pc, #244]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a3c      	ldr	r2, [pc, #240]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb4a 	bl	8000ec0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fb46 	bl	8000ec0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e232      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001842:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	061b      	lsls	r3, r3, #24
 800185c:	492d      	ldr	r1, [pc, #180]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e01a      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001864:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800186a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb26 	bl	8000ec0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fb22 	bl	8000ec0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e20e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188a:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d041      	beq.n	800192a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff faff 	bl	8000ec0 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fafb 	bl	8000ec0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1e7      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ef      	beq.n	80018c6 <HAL_RCC_OscConfig+0x22e>
 80018e6:	e020      	b.n	800192a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fae2 	bl	8000ec0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fe:	e00d      	b.n	800191c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fade 	bl	8000ec0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d906      	bls.n	800191c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1ca      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ea      	bne.n	8001900 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a6 	beq.w	8001a84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800193c:	4b84      	ldr	r3, [pc, #528]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x2b4>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x2b6>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00d      	beq.n	800196e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b7f      	ldr	r3, [pc, #508]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001956:	4a7e      	ldr	r2, [pc, #504]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
 800195e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <HAL_RCC_OscConfig+0x4bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197a:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_OscConfig+0x4bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a75      	ldr	r2, [pc, #468]	@ (8001b54 <HAL_RCC_OscConfig+0x4bc>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fa9b 	bl	8000ec0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fa97 	bl	8000ec0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e183      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b54 <HAL_RCC_OscConfig+0x4bc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_RCC_OscConfig+0x32e>
 80019b4:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a65      	ldr	r2, [pc, #404]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c4:	e024      	b.n	8001a10 <HAL_RCC_OscConfig+0x378>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d110      	bne.n	80019f0 <HAL_RCC_OscConfig+0x358>
 80019ce:	4b60      	ldr	r3, [pc, #384]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019de:	4b5c      	ldr	r3, [pc, #368]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ee:	e00f      	b.n	8001a10 <HAL_RCC_OscConfig+0x378>
 80019f0:	4b57      	ldr	r3, [pc, #348]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	4a56      	ldr	r2, [pc, #344]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a00:	4b53      	ldr	r3, [pc, #332]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	4a52      	ldr	r2, [pc, #328]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d016      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa52 	bl	8000ec0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff fa4e 	bl	8000ec0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e138      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a36:	4b46      	ldr	r3, [pc, #280]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ed      	beq.n	8001a20 <HAL_RCC_OscConfig+0x388>
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fa3b 	bl	8000ec0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa37 	bl	8000ec0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e121      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ed      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	4a34      	ldr	r2, [pc, #208]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa0a 	bl	8000ec0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab0:	f7ff fa06 	bl	8000ec0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0f2      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ef      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x418>
 8001ad0:	e01b      	b.n	8001b0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f9ed 	bl	8000ec0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aea:	f7ff f9e9 	bl	8000ec0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0d5      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80c9 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	f000 8083 	beq.w	8001c28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d15e      	bne.n	8001be8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f9c3 	bl	8000ec0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	e00c      	b.n	8001b58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f9bf 	bl	8000ec0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d905      	bls.n	8001b58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0ab      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ec      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b52      	ldr	r3, [pc, #328]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b52      	ldr	r3, [pc, #328]	@ (8001cb4 <HAL_RCC_OscConfig+0x61c>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6a11      	ldr	r1, [r2, #32]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b7e:	0212      	lsls	r2, r2, #8
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b86:	0852      	lsrs	r2, r2, #1
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0552      	lsls	r2, r2, #21
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b92:	0852      	lsrs	r2, r2, #1
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0652      	lsls	r2, r2, #25
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b9e:	06d2      	lsls	r2, r2, #27
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	4943      	ldr	r1, [pc, #268]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f97e 	bl	8000ec0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f97a 	bl	8000ec0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e066      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x530>
 8001be6:	e05e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a30      	ldr	r2, [pc, #192]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f964 	bl	8000ec0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f960 	bl	8000ec0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4924      	ldr	r1, [pc, #144]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_OscConfig+0x620>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
 8001c26:	e03e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e039      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_RCC_OscConfig+0x618>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d12c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d123      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d113      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	019f800c 	.word	0x019f800c
 8001cb8:	feeefffc 	.word	0xfeeefffc

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e11e      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b91      	ldr	r3, [pc, #580]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 020f 	bic.w	r2, r3, #15
 8001cea:	498c      	ldr	r1, [pc, #560]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e106      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d073      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d129      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b81      	ldr	r3, [pc, #516]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0f4      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d28:	f000 f99e 	bl	8002068 <RCC_GetSysClockFreqFromPLLSource>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a7c      	ldr	r2, [pc, #496]	@ (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d93f      	bls.n	8001db6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d36:	4b7a      	ldr	r3, [pc, #488]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d033      	beq.n	8001db6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d12f      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d56:	4b72      	ldr	r3, [pc, #456]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d5e:	4a70      	ldr	r2, [pc, #448]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e024      	b.n	8001db6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d74:	4b6a      	ldr	r3, [pc, #424]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0c6      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b66      	ldr	r3, [pc, #408]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0be      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d94:	f000 f8ce 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a61      	ldr	r2, [pc, #388]	@ (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d909      	bls.n	8001db6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001da2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001daa:	4a5d      	ldr	r2, [pc, #372]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4957      	ldr	r1, [pc, #348]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f87a 	bl	8000ec0 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff f876 	bl	8000ec0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e095      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a42      	ldr	r2, [pc, #264]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e28:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e30:	4a3b      	ldr	r2, [pc, #236]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b39      	ldr	r3, [pc, #228]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4936      	ldr	r1, [pc, #216]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b80      	cmp	r3, #128	@ 0x80
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a32      	ldr	r2, [pc, #200]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d21d      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 020f 	bic.w	r2, r3, #15
 8001e74:	4929      	ldr	r1, [pc, #164]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f820 	bl	8000ec0 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f81c 	bl	8000ec0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e03b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1ed      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4917      	ldr	r1, [pc, #92]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490f      	ldr	r1, [pc, #60]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee6:	f000 f825 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <HAL_RCC_ClockConfig+0x26c>)
 8001ef8:	5ccb      	ldrb	r3, [r1, r3]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ff8c 	bl	8000e28 <HAL_InitTick>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	04c4b400 	.word	0x04c4b400
 8001f28:	08003f78 	.word	0x08003f78
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000018 	.word	0x20000018

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e047      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f58:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e03e      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f5e:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d136      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f88:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f92:	68d2      	ldr	r2, [r2, #12]
 8001f94:	0a12      	lsrs	r2, r2, #8
 8001f96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
      break;
 8001fa0:	e00c      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa2:	4a13      	ldr	r2, [pc, #76]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4a10      	ldr	r2, [pc, #64]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	0a12      	lsrs	r2, r2, #8
 8001fb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
      break;
 8001fba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0e5b      	lsrs	r3, r3, #25
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e001      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fdc:	693b      	ldr	r3, [r7, #16]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	016e3600 	.word	0x016e3600

08001ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	@ (800200c <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	@ (8002038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	08003f88 	.word	0x08003f88

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002040:	f7ff ffda 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0adb      	lsrs	r3, r3, #11
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4904      	ldr	r1, [pc, #16]	@ (8002064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	08003f88 	.word	0x08003f88

08002068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d10c      	bne.n	80020a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800208c:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002096:	68d2      	ldr	r2, [r2, #12]
 8002098:	0a12      	lsrs	r2, r2, #8
 800209a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
    break;
 80020a4:	e00c      	b.n	80020c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	0a12      	lsrs	r2, r2, #8
 80020b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    break;
 80020be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0e5b      	lsrs	r3, r3, #25
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	016e3600 	.word	0x016e3600
 80020f0:	00f42400 	.word	0x00f42400

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e049      	b.n	800219a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fc2a 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fbba 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e049      	b.n	8002248 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f841 	bl	8002250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 fb63 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_TIM_PWM_Start+0x24>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e03c      	b.n	8002302 <HAL_TIM_PWM_Start+0x9e>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d109      	bne.n	80022a2 <HAL_TIM_PWM_Start+0x3e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	e02f      	b.n	8002302 <HAL_TIM_PWM_Start+0x9e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d109      	bne.n	80022bc <HAL_TIM_PWM_Start+0x58>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e022      	b.n	8002302 <HAL_TIM_PWM_Start+0x9e>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d109      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x72>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e015      	b.n	8002302 <HAL_TIM_PWM_Start+0x9e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d109      	bne.n	80022f0 <HAL_TIM_PWM_Start+0x8c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e008      	b.n	8002302 <HAL_TIM_PWM_Start+0x9e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0a1      	b.n	800244e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xb6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002318:	e023      	b.n	8002362 <HAL_TIM_PWM_Start+0xfe>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d104      	bne.n	800232a <HAL_TIM_PWM_Start+0xc6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002328:	e01b      	b.n	8002362 <HAL_TIM_PWM_Start+0xfe>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d104      	bne.n	800233a <HAL_TIM_PWM_Start+0xd6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002338:	e013      	b.n	8002362 <HAL_TIM_PWM_Start+0xfe>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d104      	bne.n	800234a <HAL_TIM_PWM_Start+0xe6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002348:	e00b      	b.n	8002362 <HAL_TIM_PWM_Start+0xfe>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b10      	cmp	r3, #16
 800234e:	d104      	bne.n	800235a <HAL_TIM_PWM_Start+0xf6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002358:	e003      	b.n	8002362 <HAL_TIM_PWM_Start+0xfe>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 ff0e 	bl	800318c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_TIM_PWM_Start+0x1f4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d018      	beq.n	80023ac <HAL_TIM_PWM_Start+0x148>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a37      	ldr	r2, [pc, #220]	@ (800245c <HAL_TIM_PWM_Start+0x1f8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_TIM_PWM_Start+0x148>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a35      	ldr	r2, [pc, #212]	@ (8002460 <HAL_TIM_PWM_Start+0x1fc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00e      	beq.n	80023ac <HAL_TIM_PWM_Start+0x148>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a34      	ldr	r2, [pc, #208]	@ (8002464 <HAL_TIM_PWM_Start+0x200>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_TIM_PWM_Start+0x148>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a32      	ldr	r2, [pc, #200]	@ (8002468 <HAL_TIM_PWM_Start+0x204>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_TIM_PWM_Start+0x148>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a31      	ldr	r2, [pc, #196]	@ (800246c <HAL_TIM_PWM_Start+0x208>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_TIM_PWM_Start+0x14c>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_TIM_PWM_Start+0x14e>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <HAL_TIM_PWM_Start+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01d      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d018      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <HAL_TIM_PWM_Start+0x20c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a22      	ldr	r2, [pc, #136]	@ (8002474 <HAL_TIM_PWM_Start+0x210>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1a      	ldr	r2, [pc, #104]	@ (800245c <HAL_TIM_PWM_Start+0x1f8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <HAL_TIM_PWM_Start+0x1fc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_TIM_PWM_Start+0x1a8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	@ (800246c <HAL_TIM_PWM_Start+0x208>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d115      	bne.n	8002438 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_TIM_PWM_Start+0x214>)
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d015      	beq.n	800244a <HAL_TIM_PWM_Start+0x1e6>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002424:	d011      	beq.n	800244a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	e008      	b.n	800244a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e000      	b.n	800244c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40013400 	.word	0x40013400
 8002460:	40014000 	.word	0x40014000
 8002464:	40014400 	.word	0x40014400
 8002468:	40014800 	.word	0x40014800
 800246c:	40015000 	.word	0x40015000
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	00010007 	.word	0x00010007

0800247c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e0ff      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b14      	cmp	r3, #20
 80024a6:	f200 80f0 	bhi.w	800268a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024aa:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	08002505 	.word	0x08002505
 80024b4:	0800268b 	.word	0x0800268b
 80024b8:	0800268b 	.word	0x0800268b
 80024bc:	0800268b 	.word	0x0800268b
 80024c0:	08002545 	.word	0x08002545
 80024c4:	0800268b 	.word	0x0800268b
 80024c8:	0800268b 	.word	0x0800268b
 80024cc:	0800268b 	.word	0x0800268b
 80024d0:	08002587 	.word	0x08002587
 80024d4:	0800268b 	.word	0x0800268b
 80024d8:	0800268b 	.word	0x0800268b
 80024dc:	0800268b 	.word	0x0800268b
 80024e0:	080025c7 	.word	0x080025c7
 80024e4:	0800268b 	.word	0x0800268b
 80024e8:	0800268b 	.word	0x0800268b
 80024ec:	0800268b 	.word	0x0800268b
 80024f0:	08002609 	.word	0x08002609
 80024f4:	0800268b 	.word	0x0800268b
 80024f8:	0800268b 	.word	0x0800268b
 80024fc:	0800268b 	.word	0x0800268b
 8002500:	08002649 	.word	0x08002649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa78 	bl	8002a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6999      	ldr	r1, [r3, #24]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	619a      	str	r2, [r3, #24]
      break;
 8002542:	e0a5      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 faf2 	bl	8002b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	021a      	lsls	r2, r3, #8
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	619a      	str	r2, [r3, #24]
      break;
 8002584:	e084      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fb65 	bl	8002c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0208 	orr.w	r2, r2, #8
 80025a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0204 	bic.w	r2, r2, #4
 80025b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69d9      	ldr	r1, [r3, #28]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
      break;
 80025c4:	e064      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fbd7 	bl	8002d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	61da      	str	r2, [r3, #28]
      break;
 8002606:	e043      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fc4a 	bl	8002ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002646:	e023      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fc94 	bl	8002f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002662:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002672:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002688:	e002      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
      break;
 800268e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_ConfigClockSource+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0e6      	b.n	800288e <HAL_TIM_ConfigClockSource+0x1ea>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80026de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a67      	ldr	r2, [pc, #412]	@ (8002898 <HAL_TIM_ConfigClockSource+0x1f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f000 80b1 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002700:	4a65      	ldr	r2, [pc, #404]	@ (8002898 <HAL_TIM_ConfigClockSource+0x1f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f200 80b6 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002708:	4a64      	ldr	r2, [pc, #400]	@ (800289c <HAL_TIM_ConfigClockSource+0x1f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	f000 80a9 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002710:	4a62      	ldr	r2, [pc, #392]	@ (800289c <HAL_TIM_ConfigClockSource+0x1f8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f200 80ae 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002718:	4a61      	ldr	r2, [pc, #388]	@ (80028a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	f000 80a1 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002720:	4a5f      	ldr	r2, [pc, #380]	@ (80028a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f200 80a6 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002728:	4a5e      	ldr	r2, [pc, #376]	@ (80028a4 <HAL_TIM_ConfigClockSource+0x200>)
 800272a:	4293      	cmp	r3, r2
 800272c:	f000 8099 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002730:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_TIM_ConfigClockSource+0x200>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f200 809e 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002738:	4a5b      	ldr	r2, [pc, #364]	@ (80028a8 <HAL_TIM_ConfigClockSource+0x204>)
 800273a:	4293      	cmp	r3, r2
 800273c:	f000 8091 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002740:	4a59      	ldr	r2, [pc, #356]	@ (80028a8 <HAL_TIM_ConfigClockSource+0x204>)
 8002742:	4293      	cmp	r3, r2
 8002744:	f200 8096 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002748:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800274c:	f000 8089 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002750:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002754:	f200 808e 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275c:	d03e      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0x138>
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002762:	f200 8087 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276a:	f000 8086 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1d6>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002772:	d87f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002774:	2b70      	cmp	r3, #112	@ 0x70
 8002776:	d01a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x10a>
 8002778:	2b70      	cmp	r3, #112	@ 0x70
 800277a:	d87b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 800277c:	2b60      	cmp	r3, #96	@ 0x60
 800277e:	d050      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x17e>
 8002780:	2b60      	cmp	r3, #96	@ 0x60
 8002782:	d877      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002784:	2b50      	cmp	r3, #80	@ 0x50
 8002786:	d03c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15e>
 8002788:	2b50      	cmp	r3, #80	@ 0x50
 800278a:	d873      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	d058      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x19e>
 8002790:	2b40      	cmp	r3, #64	@ 0x40
 8002792:	d86f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 8002794:	2b30      	cmp	r3, #48	@ 0x30
 8002796:	d064      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 8002798:	2b30      	cmp	r3, #48	@ 0x30
 800279a:	d86b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 800279c:	2b20      	cmp	r3, #32
 800279e:	d060      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d867      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d05a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1be>
 80027ac:	e062      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027be:	f000 fcc5 	bl	800314c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	609a      	str	r2, [r3, #8]
      break;
 80027da:	e04f      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027ec:	f000 fcae 	bl	800314c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027fe:	609a      	str	r2, [r3, #8]
      break;
 8002800:	e03c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fc20 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2150      	movs	r1, #80	@ 0x50
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fc79 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002820:	e02c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	f000 fc3f 	bl	80030b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2160      	movs	r1, #96	@ 0x60
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fc69 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002840:	e01c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	461a      	mov	r2, r3
 8002850:	f000 fc00 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2140      	movs	r1, #64	@ 0x40
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fc59 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002860:	e00c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f000 fc50 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002872:	e003      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e000      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800287a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	00100070 	.word	0x00100070
 800289c:	00100050 	.word	0x00100050
 80028a0:	00100040 	.word	0x00100040
 80028a4:	00100030 	.word	0x00100030
 80028a8:	00100020 	.word	0x00100020

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a48      	ldr	r2, [pc, #288]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d00f      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a45      	ldr	r2, [pc, #276]	@ (80029e4 <TIM_Base_SetConfig+0x138>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a44      	ldr	r2, [pc, #272]	@ (80029e8 <TIM_Base_SetConfig+0x13c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a43      	ldr	r2, [pc, #268]	@ (80029ec <TIM_Base_SetConfig+0x140>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a42      	ldr	r2, [pc, #264]	@ (80029f0 <TIM_Base_SetConfig+0x144>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a37      	ldr	r2, [pc, #220]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a34      	ldr	r2, [pc, #208]	@ (80029e4 <TIM_Base_SetConfig+0x138>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <TIM_Base_SetConfig+0x13c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a32      	ldr	r2, [pc, #200]	@ (80029ec <TIM_Base_SetConfig+0x140>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <TIM_Base_SetConfig+0x148>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a31      	ldr	r2, [pc, #196]	@ (80029f8 <TIM_Base_SetConfig+0x14c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a30      	ldr	r2, [pc, #192]	@ (80029fc <TIM_Base_SetConfig+0x150>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2b      	ldr	r2, [pc, #172]	@ (80029f0 <TIM_Base_SetConfig+0x144>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <TIM_Base_SetConfig+0x140>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00f      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <TIM_Base_SetConfig+0x148>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <TIM_Base_SetConfig+0x14c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a17      	ldr	r2, [pc, #92]	@ (80029fc <TIM_Base_SetConfig+0x150>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <TIM_Base_SetConfig+0x144>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]
  }
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40013400 	.word	0x40013400
 80029f0:	40015000 	.word	0x40015000
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800

08002a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0201 	bic.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 0302 	bic.w	r3, r3, #2
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <TIM_OC1_SetConfig+0x11c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <TIM_OC1_SetConfig+0x120>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b24 <TIM_OC1_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a2d      	ldr	r2, [pc, #180]	@ (8002b28 <TIM_OC1_SetConfig+0x128>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <TIM_OC1_SetConfig+0x12c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <TIM_OC1_SetConfig+0x130>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10c      	bne.n	8002aa2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0308 	bic.w	r3, r3, #8
 8002a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <TIM_OC1_SetConfig+0x11c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <TIM_OC1_SetConfig+0x120>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <TIM_OC1_SetConfig+0x124>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <TIM_OC1_SetConfig+0x128>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	@ (8002b2c <TIM_OC1_SetConfig+0x12c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <TIM_OC1_SetConfig+0x130>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40013400 	.word	0x40013400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40015000 	.word	0x40015000

08002b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f023 0210 	bic.w	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0320 	bic.w	r3, r3, #32
 8002b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <TIM_OC2_SetConfig+0x110>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_OC2_SetConfig+0x74>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <TIM_OC2_SetConfig+0x114>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_OC2_SetConfig+0x74>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c4c <TIM_OC2_SetConfig+0x118>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10d      	bne.n	8002bc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <TIM_OC2_SetConfig+0x110>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <TIM_OC2_SetConfig+0x114>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <TIM_OC2_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <TIM_OC2_SetConfig+0x120>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c58 <TIM_OC2_SetConfig+0x124>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a17      	ldr	r2, [pc, #92]	@ (8002c4c <TIM_OC2_SetConfig+0x118>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d113      	bne.n	8002c1c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40015000 	.word	0x40015000
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	40014800 	.word	0x40014800

08002c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <TIM_OC3_SetConfig+0x10c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_OC3_SetConfig+0x72>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d6c <TIM_OC3_SetConfig+0x110>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC3_SetConfig+0x72>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	@ (8002d70 <TIM_OC3_SetConfig+0x114>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <TIM_OC3_SetConfig+0x10c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <TIM_OC3_SetConfig+0x110>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d74 <TIM_OC3_SetConfig+0x118>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <TIM_OC3_SetConfig+0x11c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <TIM_OC3_SetConfig+0x120>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <TIM_OC3_SetConfig+0x114>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d113      	bne.n	8002d42 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	621a      	str	r2, [r3, #32]
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40013400 	.word	0x40013400
 8002d70:	40015000 	.word	0x40015000
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <TIM_OC4_SetConfig+0x110>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <TIM_OC4_SetConfig+0x74>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e94 <TIM_OC4_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_OC4_SetConfig+0x74>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2a      	ldr	r2, [pc, #168]	@ (8002e98 <TIM_OC4_SetConfig+0x118>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10d      	bne.n	8002e10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1f      	ldr	r2, [pc, #124]	@ (8002e90 <TIM_OC4_SetConfig+0x110>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e94 <TIM_OC4_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <TIM_OC4_SetConfig+0x11c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <TIM_OC4_SetConfig+0x120>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <TIM_OC4_SetConfig+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <TIM_OC4_SetConfig+0x118>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d113      	bne.n	8002e68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40013400 	.word	0x40013400
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <TIM_OC5_SetConfig+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <TIM_OC5_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <TIM_OC5_SetConfig+0xc4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <TIM_OC5_SetConfig+0xc8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <TIM_OC5_SetConfig+0xcc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <TIM_OC5_SetConfig+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d109      	bne.n	8002f3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40015000 	.word	0x40015000

08002f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800303c <TIM_OC6_SetConfig+0xc0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <TIM_OC6_SetConfig+0xc4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00f      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <TIM_OC6_SetConfig+0xc8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <TIM_OC6_SetConfig+0xcc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	@ (800304c <TIM_OC6_SetConfig+0xd0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	@ (8003050 <TIM_OC6_SetConfig+0xd4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40015000 	.word	0x40015000

08003054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 030a 	bic.w	r3, r3, #10
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 0210 	bic.w	r2, r3, #16
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	f043 0307 	orr.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	431a      	orrs	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	609a      	str	r2, [r3, #8]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e06f      	b.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a31      	ldr	r2, [pc, #196]	@ (80032dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2e      	ldr	r2, [pc, #184]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003234:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d01d      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d018      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1a      	ldr	r2, [pc, #104]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a15      	ldr	r2, [pc, #84]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10c      	bne.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40013400 	.word	0x40013400
 80032e4:	40015000 	.word	0x40015000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40014000 	.word	0x40014000

080032f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800330c:	2302      	movs	r3, #2
 800330e:	e078      	b.n	8003402 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003414 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d11c      	bne.n	80033f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40015000 	.word	0x40015000

0800341c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e042      	b.n	80034b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f83b 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2224      	movs	r2, #36	@ 0x24
 800344a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fb2e 	bl	8003ac8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f82f 	bl	80034d0 <UART_SetConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01b      	b.n	80034b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800348a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800349a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fbad 	bl	8003c0c <UART_CheckIdleState>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b08c      	sub	sp, #48	@ 0x30
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4baa      	ldr	r3, [pc, #680]	@ (80037a8 <UART_SetConfig+0x2d8>)
 8003500:	4013      	ands	r3, r2
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003508:	430b      	orrs	r3, r1
 800350a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a9f      	ldr	r2, [pc, #636]	@ (80037ac <UART_SetConfig+0x2dc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003538:	4313      	orrs	r3, r2
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003546:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003550:	430b      	orrs	r3, r1
 8003552:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	f023 010f 	bic.w	r1, r3, #15
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a90      	ldr	r2, [pc, #576]	@ (80037b0 <UART_SetConfig+0x2e0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d125      	bne.n	80035c0 <UART_SetConfig+0xf0>
 8003574:	4b8f      	ldr	r3, [pc, #572]	@ (80037b4 <UART_SetConfig+0x2e4>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d81a      	bhi.n	80035b8 <UART_SetConfig+0xe8>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <UART_SetConfig+0xb8>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	080035a9 	.word	0x080035a9
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035b1 	.word	0x080035b1
 8003598:	2301      	movs	r3, #1
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e116      	b.n	80037ce <UART_SetConfig+0x2fe>
 80035a0:	2302      	movs	r3, #2
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e112      	b.n	80037ce <UART_SetConfig+0x2fe>
 80035a8:	2304      	movs	r3, #4
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e10e      	b.n	80037ce <UART_SetConfig+0x2fe>
 80035b0:	2308      	movs	r3, #8
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e10a      	b.n	80037ce <UART_SetConfig+0x2fe>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035be:	e106      	b.n	80037ce <UART_SetConfig+0x2fe>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7c      	ldr	r2, [pc, #496]	@ (80037b8 <UART_SetConfig+0x2e8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d138      	bne.n	800363c <UART_SetConfig+0x16c>
 80035ca:	4b7a      	ldr	r3, [pc, #488]	@ (80037b4 <UART_SetConfig+0x2e4>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d82d      	bhi.n	8003634 <UART_SetConfig+0x164>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <UART_SetConfig+0x110>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	08003635 	.word	0x08003635
 80035e8:	08003635 	.word	0x08003635
 80035ec:	08003635 	.word	0x08003635
 80035f0:	08003625 	.word	0x08003625
 80035f4:	08003635 	.word	0x08003635
 80035f8:	08003635 	.word	0x08003635
 80035fc:	08003635 	.word	0x08003635
 8003600:	0800361d 	.word	0x0800361d
 8003604:	08003635 	.word	0x08003635
 8003608:	08003635 	.word	0x08003635
 800360c:	08003635 	.word	0x08003635
 8003610:	0800362d 	.word	0x0800362d
 8003614:	2300      	movs	r3, #0
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800361a:	e0d8      	b.n	80037ce <UART_SetConfig+0x2fe>
 800361c:	2302      	movs	r3, #2
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003622:	e0d4      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003624:	2304      	movs	r3, #4
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800362a:	e0d0      	b.n	80037ce <UART_SetConfig+0x2fe>
 800362c:	2308      	movs	r3, #8
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003632:	e0cc      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003634:	2310      	movs	r3, #16
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363a:	e0c8      	b.n	80037ce <UART_SetConfig+0x2fe>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5e      	ldr	r2, [pc, #376]	@ (80037bc <UART_SetConfig+0x2ec>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d125      	bne.n	8003692 <UART_SetConfig+0x1c2>
 8003646:	4b5b      	ldr	r3, [pc, #364]	@ (80037b4 <UART_SetConfig+0x2e4>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003650:	2b30      	cmp	r3, #48	@ 0x30
 8003652:	d016      	beq.n	8003682 <UART_SetConfig+0x1b2>
 8003654:	2b30      	cmp	r3, #48	@ 0x30
 8003656:	d818      	bhi.n	800368a <UART_SetConfig+0x1ba>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d00a      	beq.n	8003672 <UART_SetConfig+0x1a2>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d814      	bhi.n	800368a <UART_SetConfig+0x1ba>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <UART_SetConfig+0x19a>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d008      	beq.n	800367a <UART_SetConfig+0x1aa>
 8003668:	e00f      	b.n	800368a <UART_SetConfig+0x1ba>
 800366a:	2300      	movs	r3, #0
 800366c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003670:	e0ad      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003672:	2302      	movs	r3, #2
 8003674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003678:	e0a9      	b.n	80037ce <UART_SetConfig+0x2fe>
 800367a:	2304      	movs	r3, #4
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003680:	e0a5      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003682:	2308      	movs	r3, #8
 8003684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003688:	e0a1      	b.n	80037ce <UART_SetConfig+0x2fe>
 800368a:	2310      	movs	r3, #16
 800368c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003690:	e09d      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a4a      	ldr	r2, [pc, #296]	@ (80037c0 <UART_SetConfig+0x2f0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d125      	bne.n	80036e8 <UART_SetConfig+0x218>
 800369c:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <UART_SetConfig+0x2e4>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036a8:	d016      	beq.n	80036d8 <UART_SetConfig+0x208>
 80036aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ac:	d818      	bhi.n	80036e0 <UART_SetConfig+0x210>
 80036ae:	2b80      	cmp	r3, #128	@ 0x80
 80036b0:	d00a      	beq.n	80036c8 <UART_SetConfig+0x1f8>
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	d814      	bhi.n	80036e0 <UART_SetConfig+0x210>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x1f0>
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	d008      	beq.n	80036d0 <UART_SetConfig+0x200>
 80036be:	e00f      	b.n	80036e0 <UART_SetConfig+0x210>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c6:	e082      	b.n	80037ce <UART_SetConfig+0x2fe>
 80036c8:	2302      	movs	r3, #2
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ce:	e07e      	b.n	80037ce <UART_SetConfig+0x2fe>
 80036d0:	2304      	movs	r3, #4
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d6:	e07a      	b.n	80037ce <UART_SetConfig+0x2fe>
 80036d8:	2308      	movs	r3, #8
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036de:	e076      	b.n	80037ce <UART_SetConfig+0x2fe>
 80036e0:	2310      	movs	r3, #16
 80036e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e6:	e072      	b.n	80037ce <UART_SetConfig+0x2fe>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a35      	ldr	r2, [pc, #212]	@ (80037c4 <UART_SetConfig+0x2f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d12a      	bne.n	8003748 <UART_SetConfig+0x278>
 80036f2:	4b30      	ldr	r3, [pc, #192]	@ (80037b4 <UART_SetConfig+0x2e4>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003700:	d01a      	beq.n	8003738 <UART_SetConfig+0x268>
 8003702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003706:	d81b      	bhi.n	8003740 <UART_SetConfig+0x270>
 8003708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800370c:	d00c      	beq.n	8003728 <UART_SetConfig+0x258>
 800370e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003712:	d815      	bhi.n	8003740 <UART_SetConfig+0x270>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <UART_SetConfig+0x250>
 8003718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371c:	d008      	beq.n	8003730 <UART_SetConfig+0x260>
 800371e:	e00f      	b.n	8003740 <UART_SetConfig+0x270>
 8003720:	2300      	movs	r3, #0
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003726:	e052      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003728:	2302      	movs	r3, #2
 800372a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800372e:	e04e      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003730:	2304      	movs	r3, #4
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003736:	e04a      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003738:	2308      	movs	r3, #8
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800373e:	e046      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003740:	2310      	movs	r3, #16
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e042      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <UART_SetConfig+0x2dc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d13a      	bne.n	80037c8 <UART_SetConfig+0x2f8>
 8003752:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <UART_SetConfig+0x2e4>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003760:	d01a      	beq.n	8003798 <UART_SetConfig+0x2c8>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003766:	d81b      	bhi.n	80037a0 <UART_SetConfig+0x2d0>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800376c:	d00c      	beq.n	8003788 <UART_SetConfig+0x2b8>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003772:	d815      	bhi.n	80037a0 <UART_SetConfig+0x2d0>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x2b0>
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377c:	d008      	beq.n	8003790 <UART_SetConfig+0x2c0>
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x2d0>
 8003780:	2300      	movs	r3, #0
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003786:	e022      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800378e:	e01e      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003796:	e01a      	b.n	80037ce <UART_SetConfig+0x2fe>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800379e:	e016      	b.n	80037ce <UART_SetConfig+0x2fe>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037a6:	e012      	b.n	80037ce <UART_SetConfig+0x2fe>
 80037a8:	cfff69f3 	.word	0xcfff69f3
 80037ac:	40008000 	.word	0x40008000
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40004400 	.word	0x40004400
 80037bc:	40004800 	.word	0x40004800
 80037c0:	40004c00 	.word	0x40004c00
 80037c4:	40005000 	.word	0x40005000
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4aae      	ldr	r2, [pc, #696]	@ (8003a8c <UART_SetConfig+0x5bc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 8097 	bne.w	8003908 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d823      	bhi.n	800382a <UART_SetConfig+0x35a>
 80037e2:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <UART_SetConfig+0x318>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	0800382b 	.word	0x0800382b
 80037f0:	08003815 	.word	0x08003815
 80037f4:	0800382b 	.word	0x0800382b
 80037f8:	0800381b 	.word	0x0800381b
 80037fc:	0800382b 	.word	0x0800382b
 8003800:	0800382b 	.word	0x0800382b
 8003804:	0800382b 	.word	0x0800382b
 8003808:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7fe fc00 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003812:	e010      	b.n	8003836 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b9e      	ldr	r3, [pc, #632]	@ (8003a90 <UART_SetConfig+0x5c0>)
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003818:	e00d      	b.n	8003836 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7fe fb8b 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 800381e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003820:	e009      	b.n	8003836 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003828:	e005      	b.n	8003836 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003834:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8130 	beq.w	8003a9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	4a94      	ldr	r2, [pc, #592]	@ (8003a94 <UART_SetConfig+0x5c4>)
 8003844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003848:	461a      	mov	r2, r3
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003850:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	429a      	cmp	r2, r3
 8003860:	d305      	bcc.n	800386e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	429a      	cmp	r2, r3
 800386c:	d903      	bls.n	8003876 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003874:	e113      	b.n	8003a9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	60fa      	str	r2, [r7, #12]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	4a84      	ldr	r2, [pc, #528]	@ (8003a94 <UART_SetConfig+0x5c4>)
 8003884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003888:	b29b      	uxth	r3, r3
 800388a:	2200      	movs	r2, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003894:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003898:	f7fc fcbe 	bl	8000218 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	020b      	lsls	r3, r1, #8
 80038ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038b2:	0202      	lsls	r2, r0, #8
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	6849      	ldr	r1, [r1, #4]
 80038b8:	0849      	lsrs	r1, r1, #1
 80038ba:	2000      	movs	r0, #0
 80038bc:	460c      	mov	r4, r1
 80038be:	4605      	mov	r5, r0
 80038c0:	eb12 0804 	adds.w	r8, r2, r4
 80038c4:	eb43 0905 	adc.w	r9, r3, r5
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	469a      	mov	sl, r3
 80038d0:	4693      	mov	fp, r2
 80038d2:	4652      	mov	r2, sl
 80038d4:	465b      	mov	r3, fp
 80038d6:	4640      	mov	r0, r8
 80038d8:	4649      	mov	r1, r9
 80038da:	f7fc fc9d 	bl	8000218 <__aeabi_uldivmod>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4613      	mov	r3, r2
 80038e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ec:	d308      	bcc.n	8003900 <UART_SetConfig+0x430>
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f4:	d204      	bcs.n	8003900 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e0ce      	b.n	8003a9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003906:	e0ca      	b.n	8003a9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003910:	d166      	bne.n	80039e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003912:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003916:	2b08      	cmp	r3, #8
 8003918:	d827      	bhi.n	800396a <UART_SetConfig+0x49a>
 800391a:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <UART_SetConfig+0x450>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003945 	.word	0x08003945
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003955 	.word	0x08003955
 800392c:	0800396b 	.word	0x0800396b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800396b 	.word	0x0800396b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7fe fb64 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800394a:	e014      	b.n	8003976 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7fe fb76 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8003950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003952:	e010      	b.n	8003976 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b4e      	ldr	r3, [pc, #312]	@ (8003a90 <UART_SetConfig+0x5c0>)
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003958:	e00d      	b.n	8003976 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe faeb 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 800395e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003960:	e009      	b.n	8003976 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003968:	e005      	b.n	8003976 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8090 	beq.w	8003a9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	4a44      	ldr	r2, [pc, #272]	@ (8003a94 <UART_SetConfig+0x5c4>)
 8003984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003990:	005a      	lsls	r2, r3, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	441a      	add	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	d916      	bls.n	80039d8 <UART_SetConfig+0x508>
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d212      	bcs.n	80039d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f023 030f 	bic.w	r3, r3, #15
 80039ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	8bfb      	ldrh	r3, [r7, #30]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	8bfa      	ldrh	r2, [r7, #30]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	e062      	b.n	8003a9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039de:	e05e      	b.n	8003a9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d828      	bhi.n	8003a3a <UART_SetConfig+0x56a>
 80039e8:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <UART_SetConfig+0x520>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a25 	.word	0x08003a25
 80039fc:	08003a3b 	.word	0x08003a3b
 8003a00:	08003a2b 	.word	0x08003a2b
 8003a04:	08003a3b 	.word	0x08003a3b
 8003a08:	08003a3b 	.word	0x08003a3b
 8003a0c:	08003a3b 	.word	0x08003a3b
 8003a10:	08003a33 	.word	0x08003a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a14:	f7fe fafc 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a1a:	e014      	b.n	8003a46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a1c:	f7fe fb0e 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8003a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <UART_SetConfig+0x5c0>)
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a28:	e00d      	b.n	8003a46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7fe fa83 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8003a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a30:	e009      	b.n	8003a46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a44:	bf00      	nop
    }

    if (pclk != 0U)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d028      	beq.n	8003a9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <UART_SetConfig+0x5c4>)
 8003a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	441a      	add	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d910      	bls.n	8003a98 <UART_SetConfig+0x5c8>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7c:	d20c      	bcs.n	8003a98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e009      	b.n	8003a9e <UART_SetConfig+0x5ce>
 8003a8a:	bf00      	nop
 8003a8c:	40008000 	.word	0x40008000
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	08003f94 	.word	0x08003f94
      }
      else
      {
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003aba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3730      	adds	r7, #48	@ 0x30
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01a      	beq.n	8003bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc6:	d10a      	bne.n	8003bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b098      	sub	sp, #96	@ 0x60
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c1c:	f7fd f950 	bl	8000ec0 <HAL_GetTick>
 8003c20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d12f      	bne.n	8003c90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f88e 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d022      	beq.n	8003c90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e063      	b.n	8003d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d149      	bne.n	8003d32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f857 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03c      	beq.n	8003d32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3308      	adds	r3, #8
 8003d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d0a:	61fa      	str	r2, [r7, #28]
 8003d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	617b      	str	r3, [r7, #20]
   return(result);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e012      	b.n	8003d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3758      	adds	r7, #88	@ 0x58
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d70:	e04f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d78:	d04b      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fd f8a1 	bl	8000ec0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e04e      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d037      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b80      	cmp	r3, #128	@ 0x80
 8003da6:	d034      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d031      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d110      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f838 	bl	8003e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e029      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dec:	d111      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f81e 	bl	8003e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e00f      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d0a0      	beq.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b095      	sub	sp, #84	@ 0x54
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d118      	bne.n	8003ee6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e6      	bne.n	8003eb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003efa:	bf00      	nop
 8003efc:	3754      	adds	r7, #84	@ 0x54
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <memset>:
 8003f06:	4402      	add	r2, r0
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <memset+0xa>
 8003f0e:	4770      	bx	lr
 8003f10:	f803 1b01 	strb.w	r1, [r3], #1
 8003f14:	e7f9      	b.n	8003f0a <memset+0x4>
	...

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f50 <__libc_init_array+0x38>)
 8003f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f54 <__libc_init_array+0x3c>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	2600      	movs	r6, #0
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	4d0b      	ldr	r5, [pc, #44]	@ (8003f58 <__libc_init_array+0x40>)
 8003f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f5c <__libc_init_array+0x44>)
 8003f2c:	f000 f818 	bl	8003f60 <_init>
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	2600      	movs	r6, #0
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08003fb4 	.word	0x08003fb4
 8003f54:	08003fb4 	.word	0x08003fb4
 8003f58:	08003fb4 	.word	0x08003fb4
 8003f5c:	08003fb8 	.word	0x08003fb8

08003f60 <_init>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr

08003f6c <_fini>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr
