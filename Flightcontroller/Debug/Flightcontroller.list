
Flightcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004084  08004084  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800408c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000020  080040ac  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080040ac  000060f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c590  00000000  00000000  00006056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189f  00000000  00000000  000125e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00013e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  000147f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a2f9  00000000  00000000  00014f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c249  00000000  00000000  0001f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c213a  00000000  00000000  0002b466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed5a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002620  00000000  00000000  000ed5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000efc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000020 	.word	0x20000020
 8000274:	00000000 	.word	0x00000000
 8000278:	08004030 	.word	0x08004030

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000024 	.word	0x20000024
 8000294:	08004030 	.word	0x08004030

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ac:	f000 b9b0 	b.w	8000610 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	4688      	mov	r8, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	468e      	mov	lr, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14a      	bne.n	800036e <__udivmoddi4+0xa6>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4617      	mov	r7, r2
 80002dc:	d95f      	bls.n	800039e <__udivmoddi4+0xd6>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	b14e      	cbz	r6, 80002f8 <__udivmoddi4+0x30>
 80002e4:	f1c6 0320 	rsb	r3, r6, #32
 80002e8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002ec:	40b7      	lsls	r7, r6
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002fc:	fa1f fc87 	uxth.w	ip, r7
 8000300:	0c23      	lsrs	r3, r4, #16
 8000302:	fbbe f1f8 	udiv	r1, lr, r8
 8000306:	fb08 ee11 	mls	lr, r8, r1, lr
 800030a:	fb01 f20c 	mul.w	r2, r1, ip
 800030e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 8154 	bhi.w	80005cc <__udivmoddi4+0x304>
 8000324:	4601      	mov	r1, r0
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	b2a2      	uxth	r2, r4
 800032a:	fbb3 f0f8 	udiv	r0, r3, r8
 800032e:	fb08 3310 	mls	r3, r8, r0, r3
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800033a:	4594      	cmp	ip, r2
 800033c:	d90b      	bls.n	8000356 <__udivmoddi4+0x8e>
 800033e:	18ba      	adds	r2, r7, r2
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000344:	bf2c      	ite	cs
 8000346:	2401      	movcs	r4, #1
 8000348:	2400      	movcc	r4, #0
 800034a:	4594      	cmp	ip, r2
 800034c:	d902      	bls.n	8000354 <__udivmoddi4+0x8c>
 800034e:	2c00      	cmp	r4, #0
 8000350:	f000 813f 	beq.w	80005d2 <__udivmoddi4+0x30a>
 8000354:	4618      	mov	r0, r3
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	eba2 020c 	sub.w	r2, r2, ip
 800035e:	2100      	movs	r1, #0
 8000360:	b11d      	cbz	r5, 800036a <__udivmoddi4+0xa2>
 8000362:	40f2      	lsrs	r2, r6
 8000364:	2300      	movs	r3, #0
 8000366:	e9c5 2300 	strd	r2, r3, [r5]
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d905      	bls.n	800037e <__udivmoddi4+0xb6>
 8000372:	b10d      	cbz	r5, 8000378 <__udivmoddi4+0xb0>
 8000374:	e9c5 0100 	strd	r0, r1, [r5]
 8000378:	2100      	movs	r1, #0
 800037a:	4608      	mov	r0, r1
 800037c:	e7f5      	b.n	800036a <__udivmoddi4+0xa2>
 800037e:	fab3 f183 	clz	r1, r3
 8000382:	2900      	cmp	r1, #0
 8000384:	d14e      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000386:	4543      	cmp	r3, r8
 8000388:	f0c0 8112 	bcc.w	80005b0 <__udivmoddi4+0x2e8>
 800038c:	4282      	cmp	r2, r0
 800038e:	f240 810f 	bls.w	80005b0 <__udivmoddi4+0x2e8>
 8000392:	4608      	mov	r0, r1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e8      	beq.n	800036a <__udivmoddi4+0xa2>
 8000398:	e9c5 4e00 	strd	r4, lr, [r5]
 800039c:	e7e5      	b.n	800036a <__udivmoddi4+0xa2>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f000 80ac 	beq.w	80004fc <__udivmoddi4+0x234>
 80003a4:	fab2 f682 	clz	r6, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	f040 80bb 	bne.w	8000524 <__udivmoddi4+0x25c>
 80003ae:	1a8b      	subs	r3, r1, r2
 80003b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b4:	b2bc      	uxth	r4, r7
 80003b6:	2101      	movs	r1, #1
 80003b8:	0c02      	lsrs	r2, r0, #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c8:	fb04 f20c 	mul.w	r2, r4, ip
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d90e      	bls.n	80003ee <__udivmoddi4+0x126>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80ec 	beq.w	80005c4 <__udivmoddi4+0x2fc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f8:	fb04 f408 	mul.w	r4, r4, r8
 80003fc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000400:	4294      	cmp	r4, r2
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x154>
 8000404:	18ba      	adds	r2, r7, r2
 8000406:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800040a:	bf2c      	ite	cs
 800040c:	2001      	movcs	r0, #1
 800040e:	2000      	movcc	r0, #0
 8000410:	4294      	cmp	r4, r2
 8000412:	d902      	bls.n	800041a <__udivmoddi4+0x152>
 8000414:	2800      	cmp	r0, #0
 8000416:	f000 80d1 	beq.w	80005bc <__udivmoddi4+0x2f4>
 800041a:	4698      	mov	r8, r3
 800041c:	1b12      	subs	r2, r2, r4
 800041e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa08 f401 	lsl.w	r4, r8, r1
 800042e:	fa00 f901 	lsl.w	r9, r0, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa28 f806 	lsr.w	r8, r8, r6
 800043a:	408a      	lsls	r2, r1
 800043c:	431f      	orrs	r7, r3
 800043e:	fa20 f306 	lsr.w	r3, r0, r6
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fa1f fc87 	uxth.w	ip, r7
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fbb8 fef0 	udiv	lr, r8, r0
 8000450:	fb00 881e 	mls	r8, r0, lr, r8
 8000454:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000458:	fb0e f80c 	mul.w	r8, lr, ip
 800045c:	45a0      	cmp	r8, r4
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a0      	cmp	r8, r4
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b4>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 80b8 	beq.w	80005ec <__udivmoddi4+0x324>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba4 0408 	sub.w	r4, r4, r8
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	fbb4 f3f0 	udiv	r3, r4, r0
 800048a:	fb00 4413 	mls	r4, r0, r3, r4
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000496:	45a4      	cmp	ip, r4
 8000498:	d90e      	bls.n	80004b8 <__udivmoddi4+0x1f0>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a0:	bf2c      	ite	cs
 80004a2:	f04f 0801 	movcs.w	r8, #1
 80004a6:	f04f 0800 	movcc.w	r8, #0
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d903      	bls.n	80004b6 <__udivmoddi4+0x1ee>
 80004ae:	f1b8 0f00 	cmp.w	r8, #0
 80004b2:	f000 809f 	beq.w	80005f4 <__udivmoddi4+0x32c>
 80004b6:	4603      	mov	r3, r0
 80004b8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004bc:	eba4 040c 	sub.w	r4, r4, ip
 80004c0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c4:	4564      	cmp	r4, ip
 80004c6:	4673      	mov	r3, lr
 80004c8:	46e0      	mov	r8, ip
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x20a>
 80004cc:	d107      	bne.n	80004de <__udivmoddi4+0x216>
 80004ce:	45f1      	cmp	r9, lr
 80004d0:	d205      	bcs.n	80004de <__udivmoddi4+0x216>
 80004d2:	ebbe 0302 	subs.w	r3, lr, r2
 80004d6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	46e0      	mov	r8, ip
 80004de:	b15d      	cbz	r5, 80004f8 <__udivmoddi4+0x230>
 80004e0:	ebb9 0203 	subs.w	r2, r9, r3
 80004e4:	eb64 0408 	sbc.w	r4, r4, r8
 80004e8:	fa04 f606 	lsl.w	r6, r4, r6
 80004ec:	fa22 f301 	lsr.w	r3, r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	431e      	orrs	r6, r3
 80004f4:	e9c5 6400 	strd	r6, r4, [r5]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e736      	b.n	800036a <__udivmoddi4+0xa2>
 80004fc:	fbb1 fcf2 	udiv	ip, r1, r2
 8000500:	0c01      	lsrs	r1, r0, #16
 8000502:	4614      	mov	r4, r2
 8000504:	b280      	uxth	r0, r0
 8000506:	4696      	mov	lr, r2
 8000508:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800050c:	2620      	movs	r6, #32
 800050e:	4690      	mov	r8, r2
 8000510:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000514:	4610      	mov	r0, r2
 8000516:	fbb1 f1f2 	udiv	r1, r1, r2
 800051a:	eba3 0308 	sub.w	r3, r3, r8
 800051e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000522:	e74b      	b.n	80003bc <__udivmoddi4+0xf4>
 8000524:	40b7      	lsls	r7, r6
 8000526:	f1c6 0320 	rsb	r3, r6, #32
 800052a:	fa01 f206 	lsl.w	r2, r1, r6
 800052e:	fa21 f803 	lsr.w	r8, r1, r3
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	fa20 f303 	lsr.w	r3, r0, r3
 800053a:	b2bc      	uxth	r4, r7
 800053c:	40b0      	lsls	r0, r6
 800053e:	4313      	orrs	r3, r2
 8000540:	0c02      	lsrs	r2, r0, #16
 8000542:	0c19      	lsrs	r1, r3, #16
 8000544:	b280      	uxth	r0, r0
 8000546:	fbb8 f9fe 	udiv	r9, r8, lr
 800054a:	fb0e 8819 	mls	r8, lr, r9, r8
 800054e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	4588      	cmp	r8, r1
 8000558:	d951      	bls.n	80005fe <__udivmoddi4+0x336>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000560:	bf2c      	ite	cs
 8000562:	f04f 0a01 	movcs.w	sl, #1
 8000566:	f04f 0a00 	movcc.w	sl, #0
 800056a:	4588      	cmp	r8, r1
 800056c:	d902      	bls.n	8000574 <__udivmoddi4+0x2ac>
 800056e:	f1ba 0f00 	cmp.w	sl, #0
 8000572:	d031      	beq.n	80005d8 <__udivmoddi4+0x310>
 8000574:	eba1 0108 	sub.w	r1, r1, r8
 8000578:	fbb1 f9fe 	udiv	r9, r1, lr
 800057c:	fb09 f804 	mul.w	r8, r9, r4
 8000580:	fb0e 1119 	mls	r1, lr, r9, r1
 8000584:	b29b      	uxth	r3, r3
 8000586:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058a:	4543      	cmp	r3, r8
 800058c:	d235      	bcs.n	80005fa <__udivmoddi4+0x332>
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000594:	bf2c      	ite	cs
 8000596:	f04f 0a01 	movcs.w	sl, #1
 800059a:	f04f 0a00 	movcc.w	sl, #0
 800059e:	4543      	cmp	r3, r8
 80005a0:	d2bb      	bcs.n	800051a <__udivmoddi4+0x252>
 80005a2:	f1ba 0f00 	cmp.w	sl, #0
 80005a6:	d1b8      	bne.n	800051a <__udivmoddi4+0x252>
 80005a8:	f1a9 0102 	sub.w	r1, r9, #2
 80005ac:	443b      	add	r3, r7
 80005ae:	e7b4      	b.n	800051a <__udivmoddi4+0x252>
 80005b0:	1a84      	subs	r4, r0, r2
 80005b2:	eb68 0203 	sbc.w	r2, r8, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	4696      	mov	lr, r2
 80005ba:	e6eb      	b.n	8000394 <__udivmoddi4+0xcc>
 80005bc:	443a      	add	r2, r7
 80005be:	f1a8 0802 	sub.w	r8, r8, #2
 80005c2:	e72b      	b.n	800041c <__udivmoddi4+0x154>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	443b      	add	r3, r7
 80005ca:	e710      	b.n	80003ee <__udivmoddi4+0x126>
 80005cc:	3902      	subs	r1, #2
 80005ce:	443b      	add	r3, r7
 80005d0:	e6a9      	b.n	8000326 <__udivmoddi4+0x5e>
 80005d2:	443a      	add	r2, r7
 80005d4:	3802      	subs	r0, #2
 80005d6:	e6be      	b.n	8000356 <__udivmoddi4+0x8e>
 80005d8:	eba7 0808 	sub.w	r8, r7, r8
 80005dc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e0:	4441      	add	r1, r8
 80005e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e6:	fb09 f804 	mul.w	r8, r9, r4
 80005ea:	e7c9      	b.n	8000580 <__udivmoddi4+0x2b8>
 80005ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f0:	443c      	add	r4, r7
 80005f2:	e744      	b.n	800047e <__udivmoddi4+0x1b6>
 80005f4:	3b02      	subs	r3, #2
 80005f6:	443c      	add	r4, r7
 80005f8:	e75e      	b.n	80004b8 <__udivmoddi4+0x1f0>
 80005fa:	4649      	mov	r1, r9
 80005fc:	e78d      	b.n	800051a <__udivmoddi4+0x252>
 80005fe:	eba1 0108 	sub.w	r1, r1, r8
 8000602:	46cc      	mov	ip, r9
 8000604:	fbb1 f9fe 	udiv	r9, r1, lr
 8000608:	fb09 f804 	mul.w	r8, r9, r4
 800060c:	e7b8      	b.n	8000580 <__udivmoddi4+0x2b8>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fb0a 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f826 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f965 	bl	80008f0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000626:	2101      	movs	r1, #1
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f9a5 	bl	8000978 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <main+0x54>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <main+0x54>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <main+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <main+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <main+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800064e:	4906      	ldr	r1, [pc, #24]	@ (8000668 <main+0x54>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fa2b 	bl	8000aac <BSP_COM_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <main+0x4e>
  {
    Error_Handler();
 800065c:	f000 f868 	bl	8000730 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x4e>
 8000666:	bf00      	nop
 8000668:	2000003c 	.word	0x2000003c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	@ 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2250      	movs	r2, #80	@ 0x50
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fcab 	bl	8003fd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xbc>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	4a24      	ldr	r2, [pc, #144]	@ (8000728 <SystemClock_Config+0xbc>)
 8000698:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800069c:	6113      	str	r3, [r2, #16]
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xbc>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006aa:	bf00      	nop
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <SystemClock_Config+0xbc>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d1f9      	bne.n	80006ac <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2340      	movs	r3, #64	@ 0x40
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fef9 	bl	80014c8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006dc:	f000 f828 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	231f      	movs	r3, #31
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2103      	movs	r1, #3
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fb1a 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800070a:	f000 f811 	bl	8000730 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <SystemClock_Config+0xc0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <SystemClock_Config+0xc0>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	3770      	adds	r7, #112	@ 0x70
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	44020800 	.word	0x44020800
 800072c:	40022000 	.word	0x40022000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <Error_Handler+0x8>

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	bf00      	nop
 8000758:	e7fd      	b.n	8000756 <HardFault_Handler+0x4>

0800075a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075e:	bf00      	nop
 8000760:	e7fd      	b.n	800075e <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <BusFault_Handler+0x4>

0800076a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076e:	bf00      	nop
 8000770:	e7fd      	b.n	800076e <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 fae4 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 f95b 	bl	8000a68 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <SystemInit+0xc8>)
 80007c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000880 <SystemInit+0xc8>)
 80007c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <SystemInit+0xcc>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <SystemInit+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <SystemInit+0xcc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <SystemInit+0xcc>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4927      	ldr	r1, [pc, #156]	@ (8000884 <SystemInit+0xcc>)
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <SystemInit+0xd0>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemInit+0xcc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <SystemInit+0xcc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <SystemInit+0xcc>)
 80007fa:	4a24      	ldr	r2, [pc, #144]	@ (800088c <SystemInit+0xd4>)
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <SystemInit+0xcc>)
 8000800:	2200      	movs	r2, #0
 8000802:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <SystemInit+0xcc>)
 8000806:	4a21      	ldr	r2, [pc, #132]	@ (800088c <SystemInit+0xd4>)
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <SystemInit+0xcc>)
 800080c:	2200      	movs	r2, #0
 800080e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <SystemInit+0xcc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	@ (8000884 <SystemInit+0xcc>)
 8000816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800081a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <SystemInit+0xcc>)
 800081e:	2200      	movs	r2, #0
 8000820:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <SystemInit+0xc8>)
 8000824:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000828:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <SystemInit+0xd8>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000832:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800083a:	d003      	beq.n	8000844 <SystemInit+0x8c>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000842:	d117      	bne.n	8000874 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <SystemInit+0xd8>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d005      	beq.n	800085c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <SystemInit+0xd8>)
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <SystemInit+0xdc>)
 8000854:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <SystemInit+0xd8>)
 8000858:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <SystemInit+0xe0>)
 800085a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <SystemInit+0xd8>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <SystemInit+0xd8>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <SystemInit+0xd8>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <SystemInit+0xd8>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	61d3      	str	r3, [r2, #28]
  }
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	44020c00 	.word	0x44020c00
 8000888:	fae2eae3 	.word	0xfae2eae3
 800088c:	01010280 	.word	0x01010280
 8000890:	40022000 	.word	0x40022000
 8000894:	08192a3b 	.word	0x08192a3b
 8000898:	4c5d6e7f 	.word	0x4c5d6e7f

0800089c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008a2:	e003      	b.n	80008ac <LoopCopyDataInit>

080008a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008aa:	3104      	adds	r1, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008b4:	d3f6      	bcc.n	80008a4 <CopyDataInit>
	ldr	r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008b8:	e002      	b.n	80008c0 <LoopFillZerobss>

080008ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008bc:	f842 3b04 	str.w	r3, [r2], #4

080008c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <LoopForever+0x16>)
	cmp	r2, r3
 80008c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008c4:	d3f9      	bcc.n	80008ba <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c6:	f7ff ff77 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 fb8d 	bl	8003fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ce:	f7ff fea1 	bl	8000614 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008d4:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80008d8:	0800408c 	.word	0x0800408c
	ldr	r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008e0:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 80008e4:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80008e8:	200000f0 	.word	0x200000f0

080008ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_IRQHandler>
	...

080008f0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000904:	f06f 0301 	mvn.w	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
 800090a:	e02c      	b.n	8000966 <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10e      	bne.n	8000930 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <BSP_LED_Init+0x80>)
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000918:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <BSP_LED_Init+0x80>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <BSP_LED_Init+0x80>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000930:	2320      	movs	r3, #32
 8000932:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <BSP_LED_Init+0x84>)
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fc44 	bl	80011dc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <BSP_LED_Init+0x84>)
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	2120      	movs	r1, #32
 800095e:	2200      	movs	r2, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fd99 	bl	8001498 <HAL_GPIO_WritePin>
  }

  return ret;
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000968:	4618      	mov	r0, r3
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	44020c00 	.word	0x44020c00
 8000974:	20000008 	.word	0x20000008

08000978 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000988:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <BSP_PB_Init+0xd4>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a4c <BSP_PB_Init+0xd4>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000998:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <BSP_PB_Init+0xd4>)
 800099a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80009a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80009ac:	2302      	movs	r3, #2
 80009ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10c      	bne.n	80009d4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <BSP_PB_Init+0xd8>)
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fc05 	bl	80011dc <HAL_GPIO_Init>
 80009d2:	e036      	b.n	8000a42 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <BSP_PB_Init+0xdc>)
 80009d6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4a1d      	ldr	r2, [pc, #116]	@ (8000a50 <BSP_PB_Init+0xd8>)
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	f107 020c 	add.w	r2, r7, #12
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fbf8 	bl	80011dc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <BSP_PB_Init+0xe0>)
 80009f8:	441a      	add	r2, r3
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4917      	ldr	r1, [pc, #92]	@ (8000a5c <BSP_PB_Init+0xe4>)
 80009fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4610      	mov	r0, r2
 8000a06:	f000 fb8d 	bl	8001124 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <BSP_PB_Init+0xe0>)
 8000a16:	1898      	adds	r0, r3, r2
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a11      	ldr	r2, [pc, #68]	@ (8000a60 <BSP_PB_Init+0xe8>)
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f000 fb52 	bl	80010cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a28:	2018      	movs	r0, #24
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <BSP_PB_Init+0xec>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	f000 fa71 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000a3a:	2318      	movs	r3, #24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fa87 	bl	8000f50 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	44020c00 	.word	0x44020c00
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	10110000 	.word	0x10110000
 8000a58:	2000004c 	.word	0x2000004c
 8000a5c:	08004060 	.word	0x08004060
 8000a60:	20000010 	.word	0x20000010
 8000a64:	20000014 	.word	0x20000014

08000a68 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <BSP_PB_IRQHandler+0x28>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fb63 	bl	800114c <HAL_EXTI_IRQHandler>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000004c 	.word	0x2000004c

08000a94 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ac2:	f06f 0301 	mvn.w	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e018      	b.n	8000afc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2294      	movs	r2, #148	@ 0x94
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <BSP_COM_Init+0x5c>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f854 	bl	8000b84 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2294      	movs	r2, #148	@ 0x94
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <BSP_COM_Init+0x5c>)
 8000ae6:	4413      	add	r3, r2
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f80e 	bl	8000b0c <MX_USART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000af6:	f06f 0303 	mvn.w	r3, #3
 8000afa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000afc:	68fb      	ldr	r3, [r7, #12]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000058 	.word	0x20000058

08000b0c <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_USART_Init+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	220c      	movs	r2, #12
 8000b2a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	895b      	ldrh	r3, [r3, #10]
 8000b30:	461a      	mov	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	891b      	ldrh	r3, [r3, #8]
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	899b      	ldrh	r3, [r3, #12]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b58:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 fe41 	bl	80037e8 <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000004 	.word	0x20000004

08000b74 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ff8b 	bl	8000a94 <BSP_PB_Callback>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b92:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bba:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bce:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <COM1_MspInit+0xa4>)
 8000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000be6:	2310      	movs	r3, #16
 8000be8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000bf6:	230d      	movs	r3, #13
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480a      	ldr	r0, [pc, #40]	@ (8000c2c <COM1_MspInit+0xa8>)
 8000c02:	f000 faeb 	bl	80011dc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000c06:	2308      	movs	r3, #8
 8000c08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000c0e:	230d      	movs	r3, #13
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <COM1_MspInit+0xa8>)
 8000c1a:	f000 fadf 	bl	80011dc <HAL_GPIO_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	44020c00 	.word	0x44020c00
 8000c2c:	42020000 	.word	0x42020000

08000c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f966 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c3a:	f001 fa35 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_Init+0x44>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	490b      	ldr	r1, [pc, #44]	@ (8000c78 <HAL_Init+0x48>)
 8000c4a:	5ccb      	ldrb	r3, [r1, r3]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x4c>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c54:	2004      	movs	r0, #4
 8000c56:	f000 f9ab 	bl	8000fb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f810 	bl	8000c80 <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e002      	b.n	8000c70 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6a:	f7ff fd67 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	44020c00 	.word	0x44020c00
 8000c78:	08004048 	.word	0x08004048
 8000c7c:	20000000 	.word	0x20000000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c8c:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <HAL_InitTick+0xdc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e05c      	b.n	8000d52 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c98:	4b31      	ldr	r3, [pc, #196]	@ (8000d60 <HAL_InitTick+0xe0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d10c      	bne.n	8000cbe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <HAL_InitTick+0xe4>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d5c <HAL_InitTick+0xdc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e037      	b.n	8000d2e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cbe:	f000 f9cf 	bl	8001060 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cc2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d023      	beq.n	8000d12 <HAL_InitTick+0x92>
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d82d      	bhi.n	8000d2c <HAL_InitTick+0xac>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_InitTick+0x5e>
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d00d      	beq.n	8000cf8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000cdc:	e026      	b.n	8000d2c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <HAL_InitTick+0xe4>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <HAL_InitTick+0xdc>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
        break;
 8000cf6:	e01a      	b.n	8000d2e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_InitTick+0xdc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d06:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	60fb      	str	r3, [r7, #12]
        break;
 8000d10:	e00d      	b.n	8000d2e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0xdc>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	60fb      	str	r3, [r7, #12]
        break;
 8000d2a:	e000      	b.n	8000d2e <HAL_InitTick+0xae>
        break;
 8000d2c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f91c 	bl	8000f6c <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e009      	b.n	8000d52 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d46:	f000 f8e9 	bl	8000f1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d4a:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <HAL_InitTick+0xe8>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000001c 	.word	0x2000001c
 8000d60:	e000e010 	.word	0xe000e010
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000018 	.word	0x20000018

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000001c 	.word	0x2000001c
 8000d90:	200000ec 	.word	0x200000ec

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200000ec 	.word	0x200000ec

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff63 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb3 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff82 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff56 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00d      	b.n	8000f9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f96:	f043 0303 	orr.w	r3, r3, #3
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d844      	bhi.n	8001048 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fe7 	.word	0x08000fe7
 8000fc8:	08001005 	.word	0x08001005
 8000fcc:	08001027 	.word	0x08001027
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08000fd9 	.word	0x08000fd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6013      	str	r3, [r2, #0]
      break;
 8000fe4:	e031      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ff8:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ffa:	f023 030c 	bic.w	r3, r3, #12
 8000ffe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001002:	e022      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001016:	f023 030c 	bic.w	r3, r3, #12
 800101a:	4a10      	ldr	r2, [pc, #64]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001024:	e011      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001038:	f023 030c 	bic.w	r3, r3, #12
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001046:	e000      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001048:	bf00      	nop
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	44020c00 	.word	0x44020c00

08001060 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e01e      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800107a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d00f      	beq.n	80010aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d80f      	bhi.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d003      	beq.n	80010a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800109c:	e008      	b.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
        break;
 80010a2:	e008      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
        break;
 80010a8:	e005      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
        break;
 80010ae:	e002      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
        break;
 80010b4:	bf00      	nop
    }
  }
  return systick_source;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	44020c00 	.word	0x44020c00

080010cc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d011      	beq.n	8001108 <HAL_EXTI_RegisterCallback+0x3c>
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	dc13      	bgt.n	8001110 <HAL_EXTI_RegisterCallback+0x44>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_EXTI_RegisterCallback+0x26>
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d007      	beq.n	8001100 <HAL_EXTI_RegisterCallback+0x34>
 80010f0:	e00e      	b.n	8001110 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
      break;
 80010fe:	e00a      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
      break;
 8001106:	e006      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
      break;
 800110e:	e002      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	75fb      	strb	r3, [r7, #23]
      break;
 8001114:	bf00      	nop
  }

  return status;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e003      	b.n	8001140 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800113e:	2300      	movs	r3, #0
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	015a      	lsls	r2, r3, #5
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_EXTI_IRQHandler+0x88>)
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	015a      	lsls	r2, r3, #5
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_EXTI_IRQHandler+0x8c>)
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4798      	blx	r3
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	4402200c 	.word	0x4402200c
 80011d8:	44022010 	.word	0x44022010

080011dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011ea:	e142      	b.n	8001472 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8134 	beq.w	800146c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x38>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b12      	cmp	r3, #18
 8001212:	d125      	bne.n	8001260 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f003 020f 	and.w	r2, r3, #15
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	6979      	ldr	r1, [r7, #20]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <HAL_GPIO_Init+0xd8>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4013      	ands	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	4313      	orrs	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4013      	ands	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d109      	bne.n	8001336 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d11b      	bne.n	8001366 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d017      	beq.n	8001366 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4013      	ands	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d07c      	beq.n	800146c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001372:	4a47      	ldr	r2, [pc, #284]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3318      	adds	r3, #24
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4013      	ands	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0a9a      	lsrs	r2, r3, #10
 800139a:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <HAL_GPIO_Init+0x2b8>)
 800139c:	4013      	ands	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	4093      	lsls	r3, r2
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013ae:	4938      	ldr	r1, [pc, #224]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3318      	adds	r3, #24
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80013e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4013      	ands	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800140a:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001416:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4013      	ands	r3, r2
 8001420:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001436:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001444:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43db      	mvns	r3, r3
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4013      	ands	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	3301      	adds	r3, #1
 8001470:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	f47f aeb5 	bne.w	80011ec <HAL_GPIO_Init+0x10>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	44022000 	.word	0x44022000
 8001494:	002f7f7f 	.word	0x002f7f7f

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 bc28 	b.w	8001d2c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014dc:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 0318 	and.w	r3, r3, #24
 80014e4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80014e6:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d05b      	beq.n	80015b4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x46>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b18      	cmp	r3, #24
 8001506:	d114      	bne.n	8001532 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d111      	bne.n	8001532 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 bc08 	b.w	8001d2c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800151c:	4b84      	ldr	r3, [pc, #528]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	4981      	ldr	r1, [pc, #516]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800152c:	4313      	orrs	r3, r2
 800152e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001530:	e040      	b.n	80015b4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d023      	beq.n	8001582 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800153a:	4b7d      	ldr	r3, [pc, #500]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7c      	ldr	r2, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc25 	bl	8000d94 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800154e:	f7ff fc21 	bl	8000d94 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e3e5      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001560:	4b73      	ldr	r3, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	496d      	ldr	r1, [pc, #436]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800157c:	4313      	orrs	r3, r2
 800157e:	618b      	str	r3, [r1, #24]
 8001580:	e018      	b.n	80015b4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001582:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6a      	ldr	r2, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fc01 	bl	8000d94 <HAL_GetTick>
 8001592:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001596:	f7ff fbfd 	bl	8000d94 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e3c1      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80015a8:	4b61      	ldr	r3, [pc, #388]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a0 	beq.w	8001702 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	2b10      	cmp	r3, #16
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x10c>
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b18      	cmp	r3, #24
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 8092 	bne.w	8001702 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e3a4      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x132>
 80015ec:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e058      	b.n	80016ac <HAL_RCC_OscConfig+0x1e4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x160>
 8001602:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a4a      	ldr	r2, [pc, #296]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a47      	ldr	r2, [pc, #284]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001614:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b45      	ldr	r3, [pc, #276]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a44      	ldr	r2, [pc, #272]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e041      	b.n	80016ac <HAL_RCC_OscConfig+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001630:	d112      	bne.n	8001658 <HAL_RCC_OscConfig+0x190>
 8001632:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3e      	ldr	r2, [pc, #248]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b39      	ldr	r3, [pc, #228]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a38      	ldr	r2, [pc, #224]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e029      	b.n	80016ac <HAL_RCC_OscConfig+0x1e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001660:	d112      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
 8001662:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2f      	ldr	r2, [pc, #188]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e011      	b.n	80016ac <HAL_RCC_OscConfig+0x1e4>
 8001688:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80016a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb6e 	bl	8000d94 <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fb6a 	bl	8000d94 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e32e      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x1f4>
 80016da:	e012      	b.n	8001702 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb5a 	bl	8000d94 <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb56 	bl	8000d94 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e31a      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_RCC_OscConfig+0x268>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 809a 	beq.w	8001844 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x25a>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b18      	cmp	r3, #24
 800171a:	d149      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d146      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d104      	bne.n	8001734 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e2fe      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
 800172e:	bf00      	nop
 8001730:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800173a:	4b9a      	ldr	r3, [pc, #616]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0218 	and.w	r2, r3, #24
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	429a      	cmp	r2, r3
 8001748:	d014      	beq.n	8001774 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800174a:	4b96      	ldr	r3, [pc, #600]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0218 	bic.w	r2, r3, #24
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	4993      	ldr	r1, [pc, #588]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800175c:	f000 fdd0 	bl	8002300 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001760:	4b91      	ldr	r3, [pc, #580]	@ (80019a8 <HAL_RCC_OscConfig+0x4e0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fa8b 	bl	8000c80 <HAL_InitTick>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e2db      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fb0e 	bl	8000d94 <HAL_GetTick>
 8001778:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800177c:	f7ff fb0a 	bl	8000d94 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e2ce      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800179a:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	497e      	ldr	r1, [pc, #504]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80017ae:	e049      	b.n	8001844 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d02c      	beq.n	8001812 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80017b8:	4b7a      	ldr	r3, [pc, #488]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 0218 	bic.w	r2, r3, #24
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4977      	ldr	r1, [pc, #476]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80017ca:	4b76      	ldr	r3, [pc, #472]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a75      	ldr	r2, [pc, #468]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fadd 	bl	8000d94 <HAL_GetTick>
 80017da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80017de:	f7ff fad9 	bl	8000d94 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e29d      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f0:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80017fc:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	4966      	ldr	r1, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	610b      	str	r3, [r1, #16]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b64      	ldr	r3, [pc, #400]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a63      	ldr	r2, [pc, #396]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fab9 	bl	8000d94 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001826:	f7ff fab5 	bl	8000d94 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e279      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001838:	4b5a      	ldr	r3, [pc, #360]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03c      	beq.n	80018ca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001858:	4b52      	ldr	r3, [pc, #328]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185e:	4a51      	ldr	r2, [pc, #324]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001864:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fa94 	bl	8000d94 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001870:	f7ff fa90 	bl	8000d94 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e254      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x3a8>
 8001890:	e01b      	b.n	80018ca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001892:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001898:	4a42      	ldr	r2, [pc, #264]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800189a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800189e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa77 	bl	8000d94 <HAL_GetTick>
 80018a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa73 	bl	8000d94 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e237      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018bc:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80d2 	beq.w	8001a7c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_RCC_OscConfig+0x4e4>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d118      	bne.n	8001916 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80018e4:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <HAL_RCC_OscConfig+0x4e4>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	4a30      	ldr	r2, [pc, #192]	@ (80019ac <HAL_RCC_OscConfig+0x4e4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa50 	bl	8000d94 <HAL_GetTick>
 80018f4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f8:	f7ff fa4c 	bl	8000d94 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e210      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <HAL_RCC_OscConfig+0x4e4>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <HAL_RCC_OscConfig+0x468>
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001924:	4a1f      	ldr	r2, [pc, #124]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800192e:	e074      	b.n	8001a1a <HAL_RCC_OscConfig+0x552>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d118      	bne.n	800196a <HAL_RCC_OscConfig+0x4a2>
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800193a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800193e:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800194a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800194e:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001954:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800195a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800195e:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001968:	e057      	b.n	8001a1a <HAL_RCC_OscConfig+0x552>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d11e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4e8>
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800198a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800198e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001998:	4a02      	ldr	r2, [pc, #8]	@ (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x552>
 80019a4:	44020c00 	.word	0x44020c00
 80019a8:	20000018 	.word	0x20000018
 80019ac:	44020800 	.word	0x44020800
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b85      	cmp	r3, #133	@ 0x85
 80019b6:	d118      	bne.n	80019ea <HAL_RCC_OscConfig+0x522>
 80019b8:	4ba2      	ldr	r3, [pc, #648]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019be:	4aa1      	ldr	r2, [pc, #644]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019c8:	4b9e      	ldr	r3, [pc, #632]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019ce:	4a9d      	ldr	r2, [pc, #628]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019de:	4a99      	ldr	r2, [pc, #612]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019e8:	e017      	b.n	8001a1a <HAL_RCC_OscConfig+0x552>
 80019ea:	4b96      	ldr	r3, [pc, #600]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f0:	4a94      	ldr	r2, [pc, #592]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019fa:	4b92      	ldr	r3, [pc, #584]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 80019fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a00:	4a90      	ldr	r2, [pc, #576]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a02:	f023 0304 	bic.w	r3, r3, #4
 8001a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a10:	4a8c      	ldr	r2, [pc, #560]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff f9b7 	bl	8000d94 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f9b3 	bl	8000d94 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e175      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ed      	beq.n	8001a2a <HAL_RCC_OscConfig+0x562>
 8001a4e:	e015      	b.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9a0 	bl	8000d94 <HAL_GetTick>
 8001a54:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f99c 	bl	8000d94 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e15e      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a6e:	4b75      	ldr	r3, [pc, #468]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ed      	bne.n	8001a58 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d036      	beq.n	8001af6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d019      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a90:	4b6c      	ldr	r3, [pc, #432]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6b      	ldr	r2, [pc, #428]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001a96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f97a 	bl	8000d94 <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001aa4:	f7ff f976 	bl	8000d94 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e13a      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x5dc>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f960 	bl	8000d94 <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ad8:	f7ff f95c 	bl	8000d94 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e120      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aea:	4b56      	ldr	r3, [pc, #344]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8115 	beq.w	8001d2a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b18      	cmp	r3, #24
 8001b04:	f000 80af 	beq.w	8001c66 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	f040 8086 	bne.w	8001c1e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001b12:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f939 	bl	8000d94 <HAL_GetTick>
 8001b22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001b26:	f7ff f935 	bl	8000d94 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0f9      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b38:	4b42      	ldr	r3, [pc, #264]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001b44:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b4c:	f023 0303 	bic.w	r3, r3, #3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	4939      	ldr	r1, [pc, #228]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b70:	3b01      	subs	r3, #1
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b92:	492c      	ldr	r1, [pc, #176]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	4a29      	ldr	r2, [pc, #164]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001b9e:	f023 0310 	bic.w	r3, r3, #16
 8001ba2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001bae:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bb4:	f043 0310 	orr.w	r3, r3, #16
 8001bb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	f023 020c 	bic.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	491f      	ldr	r1, [pc, #124]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	f023 0220 	bic.w	r2, r3, #32
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd8:	491a      	ldr	r1, [pc, #104]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f8cd 	bl	8000d94 <HAL_GetTick>
 8001bfa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f8c9 	bl	8000d94 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e08d      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x736>
 8001c1c:	e085      	b.n	8001d2a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_RCC_OscConfig+0x77c>)
 8001c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f8b3 	bl	8000d94 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001c32:	f7ff f8af 	bl	8000d94 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d903      	bls.n	8001c48 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e073      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
 8001c44:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c48:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001c54:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001c5a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	6293      	str	r3, [r2, #40]	@ 0x28
 8001c64:	e061      	b.n	8001d2a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c70:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d031      	beq.n	8001cde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d12a      	bne.n	8001cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d122      	bne.n	8001cde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d11a      	bne.n	8001cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	0a5b      	lsrs	r3, r3, #9
 8001cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d111      	bne.n	8001cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d108      	bne.n	8001cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0e1b      	lsrs	r3, r3, #24
 8001cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e024      	b.n	8001d2c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d01a      	beq.n	8001d2a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001cfa:	f023 0310 	bic.w	r3, r3, #16
 8001cfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff f848 	bl	8000d94 <HAL_GetTick>
 8001d04:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001d06:	bf00      	nop
 8001d08:	f7ff f844 	bl	8000d94 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d0f9      	beq.n	8001d08 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d18:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <HAL_RCC_OscConfig+0x86c>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	44020c00 	.word	0x44020c00

08001d38 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e19e      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b83      	ldr	r3, [pc, #524]	@ (8001f5c <HAL_RCC_ClockConfig+0x224>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b80      	ldr	r3, [pc, #512]	@ (8001f5c <HAL_RCC_ClockConfig+0x224>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 020f 	bic.w	r2, r3, #15
 8001d62:	497e      	ldr	r1, [pc, #504]	@ (8001f5c <HAL_RCC_ClockConfig+0x224>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f5c <HAL_RCC_ClockConfig+0x224>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e186      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	4b74      	ldr	r3, [pc, #464]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d909      	bls.n	8001dae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001d9a:	4b71      	ldr	r3, [pc, #452]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	496d      	ldr	r1, [pc, #436]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	4b68      	ldr	r3, [pc, #416]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d909      	bls.n	8001de0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001dcc:	4b64      	ldr	r3, [pc, #400]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4961      	ldr	r1, [pc, #388]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d908      	bls.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001dfc:	4b58      	ldr	r3, [pc, #352]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4955      	ldr	r1, [pc, #340]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d908      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 020f 	bic.w	r2, r3, #15
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	494a      	ldr	r1, [pc, #296]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8093 	beq.w	8001f70 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e52:	4b43      	ldr	r3, [pc, #268]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d121      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e113      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e107      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0fb      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e92:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0f3      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f023 0203 	bic.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	492c      	ldr	r1, [pc, #176]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb4:	f7fe ff6e 	bl	8000d94 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe ff66 	bl	8000d94 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0d7      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0318 	and.w	r3, r3, #24
 8001ee2:	2b18      	cmp	r3, #24
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x18c>
 8001ee6:	e043      	b.n	8001f70 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef2:	f7fe ff4f 	bl	8000d94 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0c0      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 0318 	and.w	r3, r3, #24
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d1ee      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x1ba>
 8001f14:	e02c      	b.n	8001f70 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d122      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe ff38 	bl	8000d94 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0a9      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_RCC_ClockConfig+0x228>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0318 	and.w	r3, r3, #24
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d1ee      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1e8>
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe ff26 	bl	8000d94 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d906      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e097      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f64:	4b4b      	ldr	r3, [pc, #300]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f003 0318 	and.w	r3, r3, #24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e9      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b44      	ldr	r3, [pc, #272]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d208      	bcs.n	8001f9e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001f8c:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f023 020f 	bic.w	r2, r3, #15
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	493e      	ldr	r1, [pc, #248]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_RCC_ClockConfig+0x360>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d210      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fac:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <HAL_RCC_ClockConfig+0x360>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 020f 	bic.w	r2, r3, #15
 8001fb4:	4938      	ldr	r1, [pc, #224]	@ (8002098 <HAL_RCC_ClockConfig+0x360>)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	@ (8002098 <HAL_RCC_ClockConfig+0x360>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e05d      	b.n	800208a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d208      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001fea:	4b2a      	ldr	r3, [pc, #168]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4927      	ldr	r1, [pc, #156]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002016:	429a      	cmp	r2, r3
 8002018:	d209      	bcs.n	800202e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	491a      	ldr	r1, [pc, #104]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002048:	429a      	cmp	r2, r3
 800204a:	d209      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	490e      	ldr	r1, [pc, #56]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002060:	f000 f822 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x35c>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490b      	ldr	r1, [pc, #44]	@ (800209c <HAL_RCC_ClockConfig+0x364>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_RCC_ClockConfig+0x368>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_RCC_ClockConfig+0x36c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fdfe 	bl	8000c80 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
 8002086:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002088:	7afb      	ldrb	r3, [r7, #11]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	44020c00 	.word	0x44020c00
 8002098:	40022000 	.word	0x40022000
 800209c:	08004048 	.word	0x08004048
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000018 	.word	0x20000018

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80020ae:	4b8c      	ldr	r3, [pc, #560]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0318 	and.w	r3, r3, #24
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020ba:	4b8a      	ldr	r3, [pc, #552]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e107      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c0:	4b87      	ldr	r3, [pc, #540]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 0318 	and.w	r3, r3, #24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80020cc:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80020d8:	4b81      	ldr	r3, [pc, #516]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	4a81      	ldr	r2, [pc, #516]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e0f1      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80020ec:	4b7e      	ldr	r3, [pc, #504]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	e0ee      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f2:	4b7b      	ldr	r3, [pc, #492]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0318 	and.w	r3, r3, #24
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fe:	4b7b      	ldr	r3, [pc, #492]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x244>)
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e0e5      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f003 0318 	and.w	r3, r3, #24
 800210c:	2b18      	cmp	r3, #24
 800210e:	f040 80dd 	bne.w	80022cc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002112:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800211c:	4b70      	ldr	r3, [pc, #448]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002126:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002128:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002134:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b7 	beq.w	80022c6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0xbe>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d056      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x16a>
 8002164:	e077      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002166:	4b5e      	ldr	r3, [pc, #376]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02d      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002172:	4b5b      	ldr	r3, [pc, #364]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	4a5a      	ldr	r2, [pc, #360]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x240>)
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219c:	4b50      	ldr	r3, [pc, #320]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80021ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80021b0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80022f0 <HAL_RCC_GetSysClockFreq+0x248>
 80021b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80021b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80021bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80021cc:	e065      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80022f4 <HAL_RCC_GetSysClockFreq+0x24c>
 80021dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e0:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80021f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80022f0 <HAL_RCC_GetSysClockFreq+0x248>
 80021f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80021fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002204:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002210:	e043      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80022f8 <HAL_RCC_GetSysClockFreq+0x250>
 8002220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002234:	ed97 6a02 	vldr	s12, [r7, #8]
 8002238:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80022f0 <HAL_RCC_GetSysClockFreq+0x248>
 800223c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002248:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002254:	e021      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	ee07 3a90 	vmov	s15, r3
 800225c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002260:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80022fc <HAL_RCC_GetSysClockFreq+0x254>
 8002264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002278:	ed97 6a02 	vldr	s12, [r7, #8]
 800227c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80022f0 <HAL_RCC_GetSysClockFreq+0x248>
 8002280:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002284:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800228c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002298:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800229c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229e:	0a5b      	lsrs	r3, r3, #9
 80022a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022a4:	3301      	adds	r3, #1
 80022a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80022b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022be:	ee17 3a90 	vmov	r3, s15
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	e004      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e001      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80022ce:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80022d0:	69fb      	ldr	r3, [r7, #28]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	44020c00 	.word	0x44020c00
 80022e4:	003d0900 	.word	0x003d0900
 80022e8:	03d09000 	.word	0x03d09000
 80022ec:	016e3600 	.word	0x016e3600
 80022f0:	46000000 	.word	0x46000000
 80022f4:	4c742400 	.word	0x4c742400
 80022f8:	4bb71b00 	.word	0x4bb71b00
 80022fc:	4a742400 	.word	0x4a742400

08002300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002304:	f7ff fed0 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_RCC_GetHCLKFreq+0x2c>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800230e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002312:	4907      	ldr	r1, [pc, #28]	@ (8002330 <HAL_RCC_GetHCLKFreq+0x30>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002316:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <HAL_RCC_GetHCLKFreq+0x34>)
 8002320:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002322:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <HAL_RCC_GetHCLKFreq+0x34>)
 8002324:	681b      	ldr	r3, [r3, #0]
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	44020c00 	.word	0x44020c00
 8002330:	08004048 	.word	0x08004048
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800233c:	f7ff ffe0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4904      	ldr	r1, [pc, #16]	@ (8002360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	44020c00 	.word	0x44020c00
 8002360:	08004058 	.word	0x08004058

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002368:	f7ff ffca 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	@ (800238c <HAL_RCC_GetPCLK2Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	44020c00 	.word	0x44020c00
 800238c:	08004058 	.word	0x08004058

08002390 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002394:	f7ff ffb4 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	0b1b      	lsrs	r3, r3, #12
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	@ (80023b8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	44020c00 	.word	0x44020c00
 80023b8:	08004058 	.word	0x08004058

080023bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08b      	sub	sp, #44	@ 0x2c
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80023c4:	4bae      	ldr	r3, [pc, #696]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023ce:	4bac      	ldr	r3, [pc, #688]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80023d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023e2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80023e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80023f0:	4ba3      	ldr	r3, [pc, #652]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002408:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8126 	beq.w	8002660 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d053      	beq.n	80024c2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d86f      	bhi.n	8002500 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d003      	beq.n	800242e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d02b      	beq.n	8002484 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800242c:	e068      	b.n	8002500 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800242e:	4b94      	ldr	r3, [pc, #592]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	4a92      	ldr	r2, [pc, #584]	@ (8002684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002462:	ed97 6a04 	vldr	s12, [r7, #16]
 8002466:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800246a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002482:	e068      	b.n	8002556 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800268c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8002492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80024a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80024a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80024c0:	e049      	b.n	8002556 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002690 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80024d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024de:	ed97 6a04 	vldr	s12, [r7, #16]
 80024e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80024e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80024fe:	e02a      	b.n	8002556 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002500:	4b5f      	ldr	r3, [pc, #380]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002534:	ed97 6a04 	vldr	s12, [r7, #16]
 8002538:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800253c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002554:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002556:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002562:	d121      	bne.n	80025a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002564:	4b46      	ldr	r3, [pc, #280]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d017      	beq.n	80025a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002570:	4b43      	ldr	r3, [pc, #268]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	0a5b      	lsrs	r3, r3, #9
 8002576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002586:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800258a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002596:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e006      	b.n	80025ae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e002      	b.n	80025ae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80025ae:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ba:	d121      	bne.n	8002600 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80025bc:	4b30      	ldr	r3, [pc, #192]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80025ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80025da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80025e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	e006      	b.n	8002606 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e002      	b.n	8002606 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002612:	d121      	bne.n	8002658 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d017      	beq.n	8002650 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002624:	0e1b      	lsrs	r3, r3, #24
 8002626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002636:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800263a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800263e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002646:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800264e:	e010      	b.n	8002672 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
}
 8002656:	e00c      	b.n	8002672 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
}
 800265e:	e008      	b.n	8002672 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
}
 8002672:	bf00      	nop
 8002674:	372c      	adds	r7, #44	@ 0x2c
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	44020c00 	.word	0x44020c00
 8002684:	03d09000 	.word	0x03d09000
 8002688:	46000000 	.word	0x46000000
 800268c:	4a742400 	.word	0x4a742400
 8002690:	4bb71b00 	.word	0x4bb71b00

08002694 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002694:	b480      	push	{r7}
 8002696:	b08b      	sub	sp, #44	@ 0x2c
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800269c:	4bae      	ldr	r3, [pc, #696]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80026a6:	4bac      	ldr	r3, [pc, #688]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80026b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026ba:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80026bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80026c8:	4ba3      	ldr	r3, [pc, #652]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8126 	beq.w	8002938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d053      	beq.n	800279a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d86f      	bhi.n	80027d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d003      	beq.n	8002706 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d02b      	beq.n	800275c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002704:	e068      	b.n	80027d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002706:	4b94      	ldr	r3, [pc, #592]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	4a92      	ldr	r2, [pc, #584]	@ (800295c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	ed97 6a04 	vldr	s12, [r7, #16]
 800273e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800274e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800275a:	e068      	b.n	800282e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002766:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002964 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800276a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002778:	ed97 6a04 	vldr	s12, [r7, #16]
 800277c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800278c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002798:	e049      	b.n	800282e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002968 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80027a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80027ba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80027be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80027d6:	e02a      	b.n	800282e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80027d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	4a5e      	ldr	r2, [pc, #376]	@ (800295c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002810:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800282c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800282e:	4b4a      	ldr	r3, [pc, #296]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283a:	d121      	bne.n	8002880 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002848:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	0a5b      	lsrs	r3, r3, #9
 800284e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800285a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800285e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002862:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e006      	b.n	8002886 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e002      	b.n	8002886 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002886:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800288e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002892:	d121      	bne.n	80028d8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002894:	4b30      	ldr	r3, [pc, #192]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80028a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80028b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80028ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80028be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e006      	b.n	80028de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	e002      	b.n	80028de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ea:	d121      	bne.n	8002930 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80028ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d017      	beq.n	8002928 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80028f8:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800290a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800290e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002912:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800291e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002926:	e010      	b.n	800294a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	e00c      	b.n	800294a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
}
 8002936:	e008      	b.n	800294a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	bf00      	nop
 800294c:	372c      	adds	r7, #44	@ 0x2c
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	44020c00 	.word	0x44020c00
 800295c:	03d09000 	.word	0x03d09000
 8002960:	46000000 	.word	0x46000000
 8002964:	4a742400 	.word	0x4a742400
 8002968:	4bb71b00 	.word	0x4bb71b00

0800296c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	@ 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800297a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800297e:	430b      	orrs	r3, r1
 8002980:	d14b      	bne.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002982:	4bc4      	ldr	r3, [pc, #784]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800298e:	4bc1      	ldr	r3, [pc, #772]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d108      	bne.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a2:	d104      	bne.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80029a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029aa:	f000 bf14 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80029ae:	4bb9      	ldr	r3, [pc, #740]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80029b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029bc:	d108      	bne.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c4:	d104      	bne.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80029c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029cc:	f000 bf03 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80029d0:	4bb0      	ldr	r3, [pc, #704]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029dc:	d119      	bne.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029e4:	d115      	bne.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80029e6:	4bab      	ldr	r3, [pc, #684]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80029ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029f2:	d30a      	bcc.n	8002a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80029f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029fe:	4aa6      	ldr	r2, [pc, #664]	@ (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002a06:	f000 bee6 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002a0e:	f000 bee2 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a16:	f000 bede 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8002a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8002a22:	ea52 0301 	orrs.w	r3, r2, r1
 8002a26:	f000 838e 	beq.w	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8002a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a2e:	2a01      	cmp	r2, #1
 8002a30:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8002a34:	f080 86cc 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8002a40:	ea52 0301 	orrs.w	r3, r2, r1
 8002a44:	f000 82aa 	beq.w	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8002a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a4c:	2a01      	cmp	r2, #1
 8002a4e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8002a52:	f080 86bd 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5a:	f1a3 0110 	sub.w	r1, r3, #16
 8002a5e:	ea52 0301 	orrs.w	r3, r2, r1
 8002a62:	f000 8681 	beq.w	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8002a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	f173 0310 	sbcs.w	r3, r3, #16
 8002a70:	f080 86ae 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a78:	1f19      	subs	r1, r3, #4
 8002a7a:	ea52 0301 	orrs.w	r3, r2, r1
 8002a7e:	f000 84b1 	beq.w	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8002a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a86:	2a01      	cmp	r2, #1
 8002a88:	f173 0304 	sbcs.w	r3, r3, #4
 8002a8c:	f080 86a0 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a94:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	f000 85aa 	beq.w	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8002a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa2:	497e      	ldr	r1, [pc, #504]	@ (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	f173 0300 	sbcs.w	r3, r3, #0
 8002aaa:	f080 8691 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f000 8532 	beq.w	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8002abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac0:	4977      	ldr	r1, [pc, #476]	@ (8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8002ac2:	428a      	cmp	r2, r1
 8002ac4:	f173 0300 	sbcs.w	r3, r3, #0
 8002ac8:	f080 8682 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ad0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f000 84bc 	beq.w	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8002ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ade:	4971      	ldr	r1, [pc, #452]	@ (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8002ae0:	428a      	cmp	r2, r1
 8002ae2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ae6:	f080 8673 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f000 85f2 	beq.w	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8002af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afc:	496a      	ldr	r1, [pc, #424]	@ (8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8002afe:	428a      	cmp	r2, r1
 8002b00:	f173 0300 	sbcs.w	r3, r3, #0
 8002b04:	f080 8664 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b0c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8002b10:	430b      	orrs	r3, r1
 8002b12:	f000 81e5 	beq.w	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8002b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b1a:	4964      	ldr	r1, [pc, #400]	@ (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8002b1c:	428a      	cmp	r2, r1
 8002b1e:	f173 0300 	sbcs.w	r3, r3, #0
 8002b22:	f080 8655 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f000 83cc 	beq.w	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8002b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b38:	495d      	ldr	r1, [pc, #372]	@ (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8002b3a:	428a      	cmp	r2, r1
 8002b3c:	f173 0300 	sbcs.w	r3, r3, #0
 8002b40:	f080 8646 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b48:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	f000 8331 	beq.w	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8002b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b56:	4957      	ldr	r1, [pc, #348]	@ (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8002b58:	428a      	cmp	r2, r1
 8002b5a:	f173 0300 	sbcs.w	r3, r3, #0
 8002b5e:	f080 8637 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b66:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	f000 82bb 	beq.w	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8002b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b74:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8002b78:	f173 0300 	sbcs.w	r3, r3, #0
 8002b7c:	f080 8628 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b84:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	f000 826d 	beq.w	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8002b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b92:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002b96:	428a      	cmp	r2, r1
 8002b98:	f173 0300 	sbcs.w	r3, r3, #0
 8002b9c:	f080 8618 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	f000 821e 	beq.w	8002fea <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8002bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb2:	f242 0101 	movw	r1, #8193	@ 0x2001
 8002bb6:	428a      	cmp	r2, r1
 8002bb8:	f173 0300 	sbcs.w	r3, r3, #0
 8002bbc:	f080 8608 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	f000 8137 	beq.w	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8002bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd2:	f241 0101 	movw	r1, #4097	@ 0x1001
 8002bd6:	428a      	cmp	r2, r1
 8002bd8:	f173 0300 	sbcs.w	r3, r3, #0
 8002bdc:	f080 85f8 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be4:	1f11      	subs	r1, r2, #4
 8002be6:	430b      	orrs	r3, r1
 8002be8:	f000 80d2 	beq.w	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8002bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf0:	2a05      	cmp	r2, #5
 8002bf2:	f173 0300 	sbcs.w	r3, r3, #0
 8002bf6:	f080 85eb 	bcs.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfe:	1e51      	subs	r1, r2, #1
 8002c00:	430b      	orrs	r3, r1
 8002c02:	d006      	beq.n	8002c12 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8002c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c08:	1e91      	subs	r1, r2, #2
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8002c0e:	f000 bddf 	b.w	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff fb9e 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8002c28:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8002c2a:	f000 bdd4 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8002c2e:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c3a:	d10a      	bne.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fd24 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c50:	e048      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d109      	bne.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c76:	e035      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d119      	bne.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c90:	e028      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8002c92:	bf00      	nop
 8002c94:	44020c00 	.word	0x44020c00
 8002c98:	016e3600 	.word	0x016e3600
 8002c9c:	20000001 	.word	0x20000001
 8002ca0:	10000001 	.word	0x10000001
 8002ca4:	08000001 	.word	0x08000001
 8002ca8:	04000001 	.word	0x04000001
 8002cac:	00200001 	.word	0x00200001
 8002cb0:	00040001 	.word	0x00040001
 8002cb4:	00020001 	.word	0x00020001
 8002cb8:	03d09000 	.word	0x03d09000
 8002cbc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002cc0:	4b9f      	ldr	r3, [pc, #636]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d103      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8002cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cda:	e003      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ce0:	f000 bd79 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002ce4:	f000 bd77 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002ce8:	4b95      	ldr	r3, [pc, #596]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002cea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff fb1d 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8002d00:	f000 bd69 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8002d04:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d10:	d10a      	bne.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d107      	bne.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fcb9 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d26:	e031      	b.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8002d28:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	2b18      	cmp	r3, #24
 8002d38:	d109      	bne.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d3a:	4b81      	ldr	r3, [pc, #516]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	4a7f      	ldr	r2, [pc, #508]	@ (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4c:	e01e      	b.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d102      	bne.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8002d62:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d66:	e011      	b.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d106      	bne.n	8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	2b28      	cmp	r3, #40	@ 0x28
 8002d7a:	d103      	bne.n	8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8002d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d88:	f000 bd25 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002d8c:	f000 bd23 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002d90:	4b6b      	ldr	r3, [pc, #428]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7ff fac9 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8002da8:	f000 bd15 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db8:	d10a      	bne.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	2b40      	cmp	r3, #64	@ 0x40
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fc65 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dce:	e033      	b.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002de2:	4b57      	ldr	r3, [pc, #348]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	4a55      	ldr	r2, [pc, #340]	@ (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df4:	e020      	b.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8002df6:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e02:	d106      	bne.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e10:	e012      	b.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8002e12:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e26:	d103      	bne.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8002e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2e:	e003      	b.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e34:	f000 bccf 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002e38:	f000 bccd 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002e3c:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8002e4e:	f7ff fa9f 	bl	8002390 <HAL_RCC_GetPCLK3Freq>
 8002e52:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8002e54:	f000 bcbf 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e5e:	d108      	bne.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fc15 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e6e:	f000 bcb2 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8002e72:	4b33      	ldr	r3, [pc, #204]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e84:	d109      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e86:	4b2e      	ldr	r3, [pc, #184]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e98:	e020      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8002e9a:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb4:	e012      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002eca:	d103      	bne.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8002ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed2:	e003      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ed8:	f000 bc7d 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002edc:	f000 bc7b 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8002ef2:	f7ff fa05 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8002ef8:	f000 bc6d 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d104      	bne.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f02:	f7ff f8d1 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002f06:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8002f08:	f000 bc65 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d108      	bne.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fbbc 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f20:	f000 bc59 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f30:	d10e      	bne.n	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3c:	e02c      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8002f3e:	bf00      	nop
 8002f40:	44020c00 	.word	0x44020c00
 8002f44:	03d09000 	.word	0x03d09000
 8002f48:	003d0900 	.word	0x003d0900
 8002f4c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8002f50:	4b95      	ldr	r3, [pc, #596]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d109      	bne.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f62:	4b91      	ldr	r3, [pc, #580]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	4a8f      	ldr	r2, [pc, #572]	@ (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f74:	e010      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8002f76:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d102      	bne.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8002f8a:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	e003      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f94:	f000 bc1f 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002f98:	f000 bc1d 	b.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8002f9c:	4b82      	ldr	r3, [pc, #520]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8002fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8002fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc2:	e011      	b.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8002fc4:	4b78      	ldr	r3, [pc, #480]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d103      	bne.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8002fda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8002fe6:	e3f6      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002fe8:	e3f5      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002fea:	4b6f      	ldr	r3, [pc, #444]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8002fec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7ff f99c 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8003000:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003002:	e3e8      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300a:	d107      	bne.n	800301c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800300c:	f107 030c 	add.w	r3, r7, #12
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fb3f 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800301a:	e3dc      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800301c:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d10d      	bne.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800302e:	d109      	bne.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003030:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	4a5c      	ldr	r2, [pc, #368]	@ (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003042:	e010      	b.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003044:	4b58      	ldr	r3, [pc, #352]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003050:	d106      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003058:	d102      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800305a:	4b55      	ldr	r3, [pc, #340]	@ (80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305e:	e002      	b.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003064:	e3b7      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003066:	e3b6      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003068:	4b4f      	ldr	r3, [pc, #316]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800306a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800306e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff f95d 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 800307e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003080:	e3a9      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003088:	d107      	bne.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fb00 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003098:	e39d      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800309a:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d10d      	bne.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	08db      	lsrs	r3, r3, #3
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	4a3c      	ldr	r2, [pc, #240]	@ (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c0:	e010      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80030c2:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ce:	d106      	bne.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030d6:	d102      	bne.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80030d8:	4b35      	ldr	r3, [pc, #212]	@ (80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030e2:	e378      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80030e4:	e377      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80030e6:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80030e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ec:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7ff f91e 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 80030fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80030fe:	e36a      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003106:	d107      	bne.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fac1 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003116:	e35e      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003118:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d10d      	bne.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800312a:	d109      	bne.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800312c:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800313e:	e34a      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003144:	e347      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800314c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003158:	f7ff f91a 	bl	8002390 <HAL_RCC_GetPCLK3Freq>
 800315c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800315e:	e33a      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003166:	d107      	bne.n	8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fa91 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003176:	e32e      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800318a:	d109      	bne.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800319e:	e31a      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031a4:	e317      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80031a6:	bf00      	nop
 80031a8:	44020c00 	.word	0x44020c00
 80031ac:	03d09000 	.word	0x03d09000
 80031b0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80031b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80031b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80031ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80031c6:	d044      	beq.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80031ce:	d879      	bhi.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d6:	d02d      	beq.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031de:	d871      	bhi.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e6:	d017      	beq.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ee:	d869      	bhi.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fc:	d004      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80031fe:	e061      	b.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8003200:	f7ff f8c6 	bl	8002390 <HAL_RCC_GetPCLK3Freq>
 8003204:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8003206:	e060      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa41 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003216:	e058      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003218:	4b82      	ldr	r3, [pc, #520]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800321a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d103      	bne.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800322c:	e04d      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003232:	e04a      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003234:	4b7b      	ldr	r3, [pc, #492]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800323a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800323e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003242:	d103      	bne.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003244:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800324a:	e03e      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003250:	e03b      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003252:	4b74      	ldr	r3, [pc, #464]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003258:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800325e:	4b71      	ldr	r3, [pc, #452]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003270:	4b6c      	ldr	r3, [pc, #432]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	4a6b      	ldr	r2, [pc, #428]	@ (8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003282:	e01e      	b.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003284:	4b67      	ldr	r3, [pc, #412]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003290:	d106      	bne.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003298:	d102      	bne.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800329a:	4b64      	ldr	r3, [pc, #400]	@ (800342c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329e:	e010      	b.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80032a0:	4b60      	ldr	r3, [pc, #384]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ac:	d106      	bne.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032b4:	d102      	bne.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80032b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ba:	e002      	b.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80032c2:	e002      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80032c8:	bf00      	nop
          }
        }
        break;
 80032ca:	e284      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80032cc:	4b55      	ldr	r3, [pc, #340]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80032ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80032d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032de:	d044      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032e6:	d879      	bhi.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d02d      	beq.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f6:	d871      	bhi.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032fe:	d017      	beq.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003306:	d869      	bhi.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003314:	d004      	beq.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003316:	e061      	b.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8003318:	f7ff f80e 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 800331c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800331e:	e060      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9b5 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800332e:	e058      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003330:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d103      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800333e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003344:	e04d      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800334a:	e04a      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800334c:	4b35      	ldr	r3, [pc, #212]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800334e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800335a:	d103      	bne.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 800335c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003362:	e03e      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003368:	e03b      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800336a:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800336c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003370:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003376:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003388:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	4a25      	ldr	r2, [pc, #148]	@ (8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800339a:	e01e      	b.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d102      	bne.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b6:	e010      	b.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033c4:	d106      	bne.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033cc:	d102      	bne.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80033ce:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d2:	e002      	b.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80033da:	e002      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80033e0:	bf00      	nop
          }
        }
        break;
 80033e2:	e1f8      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80033e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80033f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033fc:	d105      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8003404:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8003408:	e1e5      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d110      	bne.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003412:	f107 0318 	add.w	r3, r7, #24
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ffd0 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003420:	e1d9      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003422:	bf00      	nop
 8003424:	44020c00 	.word	0x44020c00
 8003428:	03d09000 	.word	0x03d09000
 800342c:	003d0900 	.word	0x003d0900
 8003430:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343a:	d107      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f927 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800344a:	e1c4      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003450:	e1c1      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003452:	4b9d      	ldr	r3, [pc, #628]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	2b04      	cmp	r3, #4
 8003462:	d859      	bhi.n	8003518 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003481 	.word	0x08003481
 8003470:	08003491 	.word	0x08003491
 8003474:	08003519 	.word	0x08003519
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a7 	.word	0x080034a7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003480:	f107 0318 	add.w	r3, r7, #24
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe ff99 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800348e:	e046      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f8fd 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800349e:	e03e      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80034a0:	4b8a      	ldr	r3, [pc, #552]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80034a4:	e03b      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80034a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80034b2:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034c4:	4b80      	ldr	r3, [pc, #512]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	08db      	lsrs	r3, r3, #3
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	4a80      	ldr	r2, [pc, #512]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034d6:	e01e      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80034d8:	4b7b      	ldr	r3, [pc, #492]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e4:	d106      	bne.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ec:	d102      	bne.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80034ee:	4b79      	ldr	r3, [pc, #484]	@ (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f2:	e010      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80034f4:	4b74      	ldr	r3, [pc, #464]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003500:	d106      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003508:	d102      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800350a:	4b73      	ldr	r3, [pc, #460]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350e:	e002      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8003516:	e002      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800351c:	bf00      	nop
          }
        }
        break;
 800351e:	e15a      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8003520:	4b69      	ldr	r3, [pc, #420]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800352a:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	2b20      	cmp	r3, #32
 8003530:	d022      	beq.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	2b20      	cmp	r3, #32
 8003536:	d858      	bhi.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	2b18      	cmp	r3, #24
 800353c:	d019      	beq.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	2b18      	cmp	r3, #24
 8003542:	d852      	bhi.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	2b08      	cmp	r3, #8
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8003550:	e04b      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003552:	f107 0318 	add.w	r3, r7, #24
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe ff30 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003560:	e046      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f894 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003570:	e03e      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003572:	4b56      	ldr	r3, [pc, #344]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003576:	e03b      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800357a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800357e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003596:	4b4c      	ldr	r3, [pc, #304]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	4a4b      	ldr	r2, [pc, #300]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a8:	e01e      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b6:	d106      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035be:	d102      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80035c0:	4b44      	ldr	r3, [pc, #272]	@ (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c4:	e010      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80035c6:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035d2:	d106      	bne.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035da:	d102      	bne.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80035dc:	4b3e      	ldr	r3, [pc, #248]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80035ee:	bf00      	nop
          }
        }
        break;
 80035f0:	e0f1      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80035f2:	4b35      	ldr	r3, [pc, #212]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003604:	d023      	beq.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360c:	d858      	bhi.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	2bc0      	cmp	r3, #192	@ 0xc0
 8003612:	d019      	beq.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	2bc0      	cmp	r3, #192	@ 0xc0
 8003618:	d852      	bhi.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8003620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8003626:	e04b      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003628:	f107 0318 	add.w	r3, r7, #24
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fec5 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003636:	e046      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f829 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003646:	e03e      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003648:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800364c:	e03b      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003654:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800366c:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367e:	e01e      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368c:	d106      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003694:	d102      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003696:	4b0f      	ldr	r3, [pc, #60]	@ (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369a:	e010      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036b0:	d102      	bne.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b6:	e002      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80036be:	e002      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80036c4:	bf00      	nop
          }
        }
        break;
 80036c6:	e086      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80036c8:	44020c00 	.word	0x44020c00
 80036cc:	00bb8000 	.word	0x00bb8000
 80036d0:	03d09000 	.word	0x03d09000
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80036dc:	4b40      	ldr	r3, [pc, #256]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80036de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f4:	d105      	bne.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003700:	e031      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800370e:	d10a      	bne.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	2b10      	cmp	r3, #16
 8003714:	d107      	bne.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003716:	f107 0318 	add.w	r3, r7, #24
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fe4e 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003724:	e01f      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8003726:	4b2e      	ldr	r3, [pc, #184]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	2b20      	cmp	r3, #32
 8003738:	d103      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800373a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8003742:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800374c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003750:	d106      	bne.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d103      	bne.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8003758:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	e002      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8003764:	e037      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003766:	e036      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8003768:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800376a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800376e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003772:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8003774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003776:	2b10      	cmp	r3, #16
 8003778:	d107      	bne.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800377a:	f107 0318 	add.w	r3, r7, #24
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fe1c 	bl	80023bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8003788:	e025      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003796:	d10a      	bne.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	2b20      	cmp	r3, #32
 800379c:	d107      	bne.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe ff76 	bl	8002694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ac:	e00f      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ba:	d105      	bne.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2b30      	cmp	r3, #48	@ 0x30
 80037c0:	d102      	bne.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80037c2:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037d4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80037d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3730      	adds	r7, #48	@ 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	44020c00 	.word	0x44020c00
 80037e4:	02dc6c00 	.word	0x02dc6c00

080037e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e042      	b.n	8003880 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f83b 	bl	8003888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	@ 0x24
 8003816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9b0 	bl	8003b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f82f 	bl	800389c <UART_SetConfig>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e01b      	b.n	8003880 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa2f 	bl	8003cdc <UART_CheckIdleState>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b094      	sub	sp, #80	@ 0x50
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	498a      	ldr	r1, [pc, #552]	@ (8003af4 <UART_SetConfig+0x258>)
 80038cc:	4019      	ands	r1, r3
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	68d9      	ldr	r1, [r3, #12]
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	ea40 0301 	orr.w	r3, r0, r1
 80038ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003af8 <UART_SetConfig+0x25c>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d004      	beq.n	800390a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	4313      	orrs	r3, r2
 8003908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8003914:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391e:	430b      	orrs	r3, r1
 8003920:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	f023 000f 	bic.w	r0, r3, #15
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	ea40 0301 	orr.w	r3, r0, r1
 8003938:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b6f      	ldr	r3, [pc, #444]	@ (8003afc <UART_SetConfig+0x260>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d102      	bne.n	800394a <UART_SetConfig+0xae>
 8003944:	2301      	movs	r3, #1
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003948:	e01a      	b.n	8003980 <UART_SetConfig+0xe4>
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b00 <UART_SetConfig+0x264>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d102      	bne.n	800395a <UART_SetConfig+0xbe>
 8003954:	2302      	movs	r3, #2
 8003956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003958:	e012      	b.n	8003980 <UART_SetConfig+0xe4>
 800395a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <UART_SetConfig+0x268>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d102      	bne.n	800396a <UART_SetConfig+0xce>
 8003964:	2304      	movs	r3, #4
 8003966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003968:	e00a      	b.n	8003980 <UART_SetConfig+0xe4>
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b62      	ldr	r3, [pc, #392]	@ (8003af8 <UART_SetConfig+0x25c>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d103      	bne.n	800397c <UART_SetConfig+0xe0>
 8003974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397a:	e001      	b.n	8003980 <UART_SetConfig+0xe4>
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b5c      	ldr	r3, [pc, #368]	@ (8003af8 <UART_SetConfig+0x25c>)
 8003986:	429a      	cmp	r2, r3
 8003988:	d171      	bne.n	8003a6e <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398c:	2200      	movs	r2, #0
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	627a      	str	r2, [r7, #36]	@ 0x24
 8003992:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003996:	f7fe ffe9 	bl	800296c <HAL_RCCEx_GetPeriphCLKFreq>
 800399a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800399c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80e2 	beq.w	8003b68 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	4a57      	ldr	r2, [pc, #348]	@ (8003b08 <UART_SetConfig+0x26c>)
 80039aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039b6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d305      	bcc.n	80039d4 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d903      	bls.n	80039dc <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80039da:	e0c5      	b.n	8003b68 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	2200      	movs	r2, #0
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	61fa      	str	r2, [r7, #28]
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	4a47      	ldr	r2, [pc, #284]	@ (8003b08 <UART_SetConfig+0x26c>)
 80039ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2200      	movs	r2, #0
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	617a      	str	r2, [r7, #20]
 80039f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039fe:	f7fc fc4b 	bl	8000298 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	020b      	lsls	r3, r1, #8
 8003a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a18:	0202      	lsls	r2, r0, #8
 8003a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a1c:	6849      	ldr	r1, [r1, #4]
 8003a1e:	0849      	lsrs	r1, r1, #1
 8003a20:	2000      	movs	r0, #0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4605      	mov	r5, r0
 8003a26:	eb12 0804 	adds.w	r8, r2, r4
 8003a2a:	eb43 0905 	adc.w	r9, r3, r5
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	60fa      	str	r2, [r7, #12]
 8003a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	4649      	mov	r1, r9
 8003a40:	f7fc fc2a 	bl	8000298 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a52:	d308      	bcc.n	8003a66 <UART_SetConfig+0x1ca>
 8003a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5a:	d204      	bcs.n	8003a66 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e080      	b.n	8003b68 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003a6c:	e07c      	b.n	8003b68 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a76:	d149      	bne.n	8003b0c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a84:	f7fe ff72 	bl	800296c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a88:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d06b      	beq.n	8003b68 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <UART_SetConfig+0x26c>)
 8003a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aa2:	005a      	lsls	r2, r3, #1
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	441a      	add	r2, r3
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d916      	bls.n	8003aea <UART_SetConfig+0x24e>
 8003abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac2:	d212      	bcs.n	8003aea <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f023 030f 	bic.w	r3, r3, #15
 8003acc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003adc:	4313      	orrs	r3, r2
 8003ade:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e03e      	b.n	8003b68 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003af0:	e03a      	b.n	8003b68 <UART_SetConfig+0x2cc>
 8003af2:	bf00      	nop
 8003af4:	cfff69f3 	.word	0xcfff69f3
 8003af8:	44002400 	.word	0x44002400
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40004800 	.word	0x40004800
 8003b08:	08004064 	.word	0x08004064
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0e:	2200      	movs	r2, #0
 8003b10:	469a      	mov	sl, r3
 8003b12:	4693      	mov	fp, r2
 8003b14:	4650      	mov	r0, sl
 8003b16:	4659      	mov	r1, fp
 8003b18:	f7fe ff28 	bl	800296c <HAL_RCCEx_GetPeriphCLKFreq>
 8003b1c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8003b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d021      	beq.n	8003b68 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <UART_SetConfig+0x2f8>)
 8003b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b32:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	441a      	add	r2, r3
 8003b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	d909      	bls.n	8003b62 <UART_SetConfig+0x2c6>
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d205      	bcs.n	8003b62 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	e002      	b.n	8003b68 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	2201      	movs	r2, #1
 8003b74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	2200      	movs	r2, #0
 8003b82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3750      	adds	r7, #80	@ 0x50
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	08004064 	.word	0x08004064

08003b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c96:	d10a      	bne.n	8003cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b098      	sub	sp, #96	@ 0x60
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cec:	f7fd f852 	bl	8000d94 <HAL_GetTick>
 8003cf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d12f      	bne.n	8003d60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f88e 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d022      	beq.n	8003d60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e063      	b.n	8003e28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d149      	bne.n	8003e02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f857 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d03c      	beq.n	8003e02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	623b      	str	r3, [r7, #32]
   return(result);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e6      	bne.n	8003d88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dda:	61fa      	str	r2, [r7, #28]
 8003ddc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	617b      	str	r3, [r7, #20]
   return(result);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e012      	b.n	8003e28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3758      	adds	r7, #88	@ 0x58
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	e04f      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e48:	d04b      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fc ffa3 	bl	8000d94 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e04e      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d037      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b80      	cmp	r3, #128	@ 0x80
 8003e76:	d034      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d031      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d110      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f838 	bl	8003f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e029      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebc:	d111      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f81e 	bl	8003f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0a0      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b095      	sub	sp, #84	@ 0x54
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e3      	bne.n	8003f44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d118      	bne.n	8003fb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 0310 	bic.w	r3, r3, #16
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e6      	bne.n	8003f84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fca:	bf00      	nop
 8003fcc:	3754      	adds	r7, #84	@ 0x54
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <memset>:
 8003fd6:	4402      	add	r2, r0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <memset+0xa>
 8003fde:	4770      	bx	lr
 8003fe0:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe4:	e7f9      	b.n	8003fda <memset+0x4>
	...

08003fe8 <__libc_init_array>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4d0d      	ldr	r5, [pc, #52]	@ (8004020 <__libc_init_array+0x38>)
 8003fec:	2600      	movs	r6, #0
 8003fee:	4c0d      	ldr	r4, [pc, #52]	@ (8004024 <__libc_init_array+0x3c>)
 8003ff0:	1b64      	subs	r4, r4, r5
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	42a6      	cmp	r6, r4
 8003ff6:	d109      	bne.n	800400c <__libc_init_array+0x24>
 8003ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8004028 <__libc_init_array+0x40>)
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800402c <__libc_init_array+0x44>)
 8003ffe:	f000 f817 	bl	8004030 <_init>
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	42a6      	cmp	r6, r4
 8004008:	d105      	bne.n	8004016 <__libc_init_array+0x2e>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004010:	3601      	adds	r6, #1
 8004012:	4798      	blx	r3
 8004014:	e7ee      	b.n	8003ff4 <__libc_init_array+0xc>
 8004016:	f855 3b04 	ldr.w	r3, [r5], #4
 800401a:	3601      	adds	r6, #1
 800401c:	4798      	blx	r3
 800401e:	e7f2      	b.n	8004006 <__libc_init_array+0x1e>
 8004020:	08004084 	.word	0x08004084
 8004024:	08004084 	.word	0x08004084
 8004028:	08004084 	.word	0x08004084
 800402c:	08004088 	.word	0x08004088

08004030 <_init>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr

0800403c <_fini>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr
