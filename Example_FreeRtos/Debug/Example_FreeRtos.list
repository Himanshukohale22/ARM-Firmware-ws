
Example_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005394  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  00007024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005620  08005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005628  08005628  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00006628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800562c  0800562c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08005630  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000024  08005654  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  08005654  00007a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bb2  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e99  00000000  00000000  0001bc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d30  00000000  00000000  0001fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030c9  00000000  00000000  00020900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001233b  00000000  00000000  000239c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e9e  00000000  00000000  00035d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000fdbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001022d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000024 	.word	0x20000024
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800555c 	.word	0x0800555c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000028 	.word	0x20000028
 800021c:	0800555c 	.word	0x0800555c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fb2c 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f84e 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f898 	bl	800068c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f002 fa46 	bl	80029ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000560:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <main+0x8c>)
 8000562:	2100      	movs	r1, #0
 8000564:	481d      	ldr	r0, [pc, #116]	@ (80005dc <main+0x90>)
 8000566:	f002 fa8b 	bl	8002a80 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <main+0x94>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000570:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <main+0x98>)
 8000572:	2100      	movs	r1, #0
 8000574:	481c      	ldr	r0, [pc, #112]	@ (80005e8 <main+0x9c>)
 8000576:	f002 fa83 	bl	8002a80 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ec <main+0xa0>)
 800057e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f985 	bl	8000890 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000586:	2101      	movs	r1, #1
 8000588:	2000      	movs	r0, #0
 800058a:	f000 f9cd 	bl	8000928 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800058e:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <main+0xa4>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <main+0xa4>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <main+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <main+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <main+0xa4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005ae:	4910      	ldr	r1, [pc, #64]	@ (80005f0 <main+0xa4>)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fa45 	bl	8000a40 <BSP_COM_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0x74>
  {
    Error_Handler();
 80005bc:	f000 f8cc 	bl	8000758 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 80005c0:	f002 fa38 	bl	8002a34 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  BSP_LED_Toggle(LED_GREEN);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f999 	bl	80008fc <BSP_LED_Toggle>
	  osDelay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ce:	f002 fae9 	bl	8002ba4 <osDelay>
	  BSP_LED_Toggle(LED_GREEN);
 80005d2:	bf00      	nop
 80005d4:	e7f6      	b.n	80005c4 <main+0x78>
 80005d6:	bf00      	nop
 80005d8:	080055a4 	.word	0x080055a4
 80005dc:	08000739 	.word	0x08000739
 80005e0:	20000050 	.word	0x20000050
 80005e4:	080055c8 	.word	0x080055c8
 80005e8:	08000749 	.word	0x08000749
 80005ec:	20000054 	.word	0x20000054
 80005f0:	20000040 	.word	0x20000040

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	@ 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 ff70 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fe5c 	bl	80012d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	@ 0x40
 8000628:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	@ 0x55
 8000638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fef6 	bl	800143c <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 f87f 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f9f4 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 f86b 	bl	8000758 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a23      	ldr	r2, [pc, #140]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	@ 0x40
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fdb1 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f000 fc20 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f002 fa2f 	bl	8002ba4 <osDelay>
 8000746:	e7fb      	b.n	8000740 <StartDefaultTask+0x8>

08000748 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f002 fa27 	bl	8002ba4 <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartTask02+0x8>

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_MspInit+0x50>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <HAL_MspInit+0x50>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6613      	str	r3, [r2, #96]	@ 0x60
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x50>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x50>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000786:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <HAL_MspInit+0x50>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078c:	6593      	str	r3, [r2, #88]	@ 0x58
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x50>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 fb4e 	bl	8000e42 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a6:	f000 fe39 	bl	800141c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 fa2d 	bl	8000c50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007f6:	f003 fdfd 	bl	80043f4 <xTaskGetSchedulerState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d001      	beq.n	8000804 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000800:	f004 fbf2 	bl	8004fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f8f9 	bl	8000a04 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f004 fe45 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fe6d 	bl	800054c <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   r0, =_estack
 8000874:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000880:	08005630 	.word	0x08005630
  ldr r2, =_sbss
 8000884:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000888:	20001a48 	.word	0x20001a48

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <BSP_LED_Init+0x64>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <BSP_LED_Init+0x64>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <BSP_LED_Init+0x64>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80008b2:	2320      	movs	r3, #32
 80008b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <BSP_LED_Init+0x68>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fb4b 	bl	8000f6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <BSP_LED_Init+0x68>)
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	2120      	movs	r1, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fcc4 	bl	8001270 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000004 	.word	0x20000004

080008fc <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <BSP_LED_Toggle+0x28>)
 800090a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090e:	2220      	movs	r2, #32
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fcc4 	bl	80012a0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000004 	.word	0x20000004

08000928 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <BSP_PB_Init+0xc4>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a2b      	ldr	r2, [pc, #172]	@ (80009ec <BSP_PB_Init+0xc4>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000944:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <BSP_PB_Init+0xc4>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000954:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000956:	2302      	movs	r3, #2
 8000958:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10c      	bne.n	800097e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <BSP_PB_Init+0xc8>)
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 faf8 	bl	8000f6c <HAL_GPIO_Init>
 800097c:	e031      	b.n	80009e2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800097e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000982:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <BSP_PB_Init+0xc8>)
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 faea 	bl	8000f6c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <BSP_PB_Init+0xcc>)
 800099e:	441a      	add	r2, r3
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4915      	ldr	r1, [pc, #84]	@ (80009f8 <BSP_PB_Init+0xd0>)
 80009a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4610      	mov	r0, r2
 80009ac:	f000 fa9a 	bl	8000ee4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <BSP_PB_Init+0xcc>)
 80009b6:	1898      	adds	r0, r3, r2
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <BSP_PB_Init+0xd4>)
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	461a      	mov	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f000 fa71 	bl	8000eaa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80009c8:	2028      	movs	r0, #40	@ 0x28
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a00 <BSP_PB_Init+0xd8>)
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	f000 fa34 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80009da:	2328      	movs	r3, #40	@ 0x28
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fa4a 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000058 	.word	0x20000058
 80009f8:	08005604 	.word	0x08005604
 80009fc:	20000010 	.word	0x20000010
 8000a00:	20000014 	.word	0x20000014

08000a04 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <BSP_PB_IRQHandler+0x20>)
 8000a14:	4413      	add	r3, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fa78 	bl	8000f0c <HAL_EXTI_IRQHandler>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000058 	.word	0x20000058

08000a28 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d903      	bls.n	8000a5e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a56:	f06f 0301 	mvn.w	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e018      	b.n	8000a90 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2294      	movs	r2, #148	@ 0x94
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <BSP_COM_Init+0x5c>)
 8000a68:	4413      	add	r3, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f852 	bl	8000b14 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2294      	movs	r2, #148	@ 0x94
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <BSP_COM_Init+0x5c>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f80e 	bl	8000aa0 <MX_LPUART1_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000a8a:	f06f 0303 	mvn.w	r3, #3
 8000a8e:	e000      	b.n	8000a92 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000060 	.word	0x20000060

08000aa0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_LPUART1_Init+0x60>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	895b      	ldrh	r3, [r3, #10]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	891b      	ldrh	r3, [r3, #8]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	899b      	ldrh	r3, [r3, #12]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000aec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f001 f9d2 	bl	8001e98 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff8d 	bl	8000a28 <BSP_PB_Callback>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a21      	ldr	r2, [pc, #132]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <COM1_MspInit+0x94>)
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000b64:	2304      	movs	r3, #4
 8000b66:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000b74:	230c      	movs	r3, #12
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b82:	f000 f9f3 	bl	8000f6c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000b86:	2308      	movs	r3, #8
 8000b88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f000 f9e6 	bl	8000f6c <HAL_GPIO_Init>
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f938 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f80d 	bl	8000bdc <HAL_InitTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	e001      	b.n	8000bd2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bce:	f7ff fdc9 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]

}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_InitTick+0x68>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d022      	beq.n	8000c36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_InitTick+0x6c>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_InitTick+0x68>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f944 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10f      	bne.n	8000c30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d809      	bhi.n	8000c2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c1e:	f000 f910 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_InitTick+0x70>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e007      	b.n	8000c3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e004      	b.n	8000c3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000001c 	.word	0x2000001c
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000018 	.word	0x20000018

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a03      	ldr	r2, [pc, #12]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	200000f4 	.word	0x200000f4
 8000c70:	2000001c 	.word	0x2000001c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000f4 	.word	0x200000f4

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff40 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff90 	bl	8000d80 <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5f 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff33 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa4 	bl	8000de8 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b087      	sub	sp, #28
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	605a      	str	r2, [r3, #4]
      break;
 8000ec8:	e005      	b.n	8000ed6 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8000ed4:	bf00      	nop
  }

  return status;
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e003      	b.n	8000f00 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000efe:	2300      	movs	r3, #0
  }
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0c1b      	lsrs	r3, r3, #16
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	2201      	movs	r2, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	015a      	lsls	r2, r3, #5
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_EXTI_IRQHandler+0x5c>)
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d009      	beq.n	8000f5e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4798      	blx	r3
    }
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010414 	.word	0x40010414

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f7a:	e15a      	b.n	8001232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 814c 	beq.w	800122c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0203 	and.w	r2, r3, #3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a6 	beq.w	800122c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ec:	4b58      	ldr	r3, [pc, #352]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f8:	4a56      	ldr	r2, [pc, #344]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001122:	d01f      	beq.n	8001164 <HAL_GPIO_Init+0x1f8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4c      	ldr	r2, [pc, #304]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d019      	beq.n	8001160 <HAL_GPIO_Init+0x1f4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4b      	ldr	r2, [pc, #300]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <HAL_GPIO_Init+0x1f0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4a      	ldr	r2, [pc, #296]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a49      	ldr	r2, [pc, #292]	@ (8001264 <HAL_GPIO_Init+0x2f8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a48      	ldr	r2, [pc, #288]	@ (8001268 <HAL_GPIO_Init+0x2fc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_Init+0x1e4>
 800114c:	2305      	movs	r3, #5
 800114e:	e00a      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001150:	2306      	movs	r3, #6
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001176:	4937      	ldr	r1, [pc, #220]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a8:	4a30      	ldr	r2, [pc, #192]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d2:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f ae9d 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	48000c00 	.word	0x48000c00
 8001264:	48001000 	.word	0x48001000
 8001268:	48001400 	.word	0x48001400
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e002      	b.n	8001294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43d9      	mvns	r1, r3
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	400b      	ands	r3, r1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d141      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d131      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f0:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f6:	4a46      	ldr	r2, [pc, #280]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001308:	4a41      	ldr	r2, [pc, #260]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001310:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2232      	movs	r2, #50	@ 0x32
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	4a3f      	ldr	r2, [pc, #252]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9b      	lsrs	r3, r3, #18
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	e002      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3b01      	subs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133a:	d102      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f2      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001342:	4b33      	ldr	r3, [pc, #204]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134e:	d158      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e057      	b.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001364:	e04d      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800136c:	d141      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d131      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001394:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2232      	movs	r2, #50	@ 0x32
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b2:	e002      	b.n	80013ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d102      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f2      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013da:	d112      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e011      	b.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013f0:	e007      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001400:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40007000 	.word	0x40007000
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6093      	str	r3, [r2, #8]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e2fe      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145a:	4b97      	ldr	r3, [pc, #604]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001464:	4b94      	ldr	r3, [pc, #592]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x3e>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d002      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b08      	cmp	r3, #8
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b8d      	ldr	r3, [pc, #564]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e2d9      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b85      	ldr	r3, [pc, #532]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a84      	ldr	r2, [pc, #528]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7f      	ldr	r3, [pc, #508]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7e      	ldr	r2, [pc, #504]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b7c      	ldr	r3, [pc, #496]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7b      	ldr	r2, [pc, #492]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b78      	ldr	r3, [pc, #480]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a77      	ldr	r2, [pc, #476]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b75      	ldr	r3, [pc, #468]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a74      	ldr	r2, [pc, #464]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbbe 	bl	8000c74 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fbba 	bl	8000c74 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e29e      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fbaa 	bl	8000c74 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fba6 	bl	8000c74 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e28a      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	4b60      	ldr	r3, [pc, #384]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d075      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001552:	4b59      	ldr	r3, [pc, #356]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155c:	4b56      	ldr	r3, [pc, #344]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d102      	bne.n	8001572 <HAL_RCC_OscConfig+0x136>
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d002      	beq.n	8001578 <HAL_RCC_OscConfig+0x13c>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d11f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	4b4f      	ldr	r3, [pc, #316]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x154>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e25d      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b49      	ldr	r3, [pc, #292]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	4946      	ldr	r1, [pc, #280]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a4:	4b45      	ldr	r3, [pc, #276]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb17 	bl	8000bdc <HAL_InitTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d043      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e249      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb52 	bl	8000c74 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fb4e 	bl	8000c74 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e232      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e6:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	061b      	lsls	r3, r3, #24
 8001600:	492d      	ldr	r1, [pc, #180]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
 8001606:	e01a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800160e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb2e 	bl	8000c74 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fb2a 	bl	8000c74 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e20e      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1e0>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d041      	beq.n	80016ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01c      	beq.n	800168c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fb07 	bl	8000c74 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fb03 	bl	8000c74 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1e7      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ef      	beq.n	800166a <HAL_RCC_OscConfig+0x22e>
 800168a:	e020      	b.n	80016ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff faea 	bl	8000c74 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a2:	e00d      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fae6 	bl	8000c74 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d906      	bls.n	80016c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1ca      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	4b8c      	ldr	r3, [pc, #560]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ea      	bne.n	80016a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a6 	beq.w	8001828 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016e0:	4b84      	ldr	r3, [pc, #528]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2b4>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b79      	ldr	r3, [pc, #484]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171e:	4b76      	ldr	r3, [pc, #472]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a75      	ldr	r2, [pc, #468]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff faa3 	bl	8000c74 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fa9f 	bl	8000c74 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e183      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001744:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_RCC_OscConfig+0x32e>
 8001758:	4b66      	ldr	r3, [pc, #408]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a65      	ldr	r2, [pc, #404]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	e024      	b.n	80017b4 <HAL_RCC_OscConfig+0x378>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d110      	bne.n	8001794 <HAL_RCC_OscConfig+0x358>
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001778:	4a5e      	ldr	r2, [pc, #376]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001782:	4b5c      	ldr	r3, [pc, #368]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	4a5a      	ldr	r2, [pc, #360]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x378>
 8001794:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d016      	beq.n	80017ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa5a 	bl	8000c74 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fa56 	bl	8000c74 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e138      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ed      	beq.n	80017c4 <HAL_RCC_OscConfig+0x388>
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa43 	bl	8000c74 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fa3f 	bl	8000c74 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e121      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ed      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a34      	ldr	r2, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03c      	beq.n	80018ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01c      	beq.n	8001876 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001842:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fa12 	bl	8000c74 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001854:	f7ff fa0e 	bl	8000c74 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0f2      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ef      	beq.n	8001854 <HAL_RCC_OscConfig+0x418>
 8001874:	e01b      	b.n	80018ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001876:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff f9f5 	bl	8000c74 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188e:	f7ff f9f1 	bl	8000c74 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0d5      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ef      	bne.n	800188e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80c9 	beq.w	8001a4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	f000 8083 	beq.w	80019cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d15e      	bne.n	800198c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff f9cb 	bl	8000c74 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff f9c7 	bl	8000c74 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d905      	bls.n	80018fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0ab      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b55      	ldr	r3, [pc, #340]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ec      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001908:	4b52      	ldr	r3, [pc, #328]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <HAL_RCC_OscConfig+0x61c>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6a11      	ldr	r1, [r2, #32]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001918:	3a01      	subs	r2, #1
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001922:	0212      	lsls	r2, r2, #8
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800192a:	0852      	lsrs	r2, r2, #1
 800192c:	3a01      	subs	r2, #1
 800192e:	0552      	lsls	r2, r2, #21
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	3a01      	subs	r2, #1
 800193a:	0652      	lsls	r2, r2, #25
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001942:	06d2      	lsls	r2, r2, #27
 8001944:	430a      	orrs	r2, r1
 8001946:	4943      	ldr	r1, [pc, #268]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a40      	ldr	r2, [pc, #256]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f986 	bl	8000c74 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f982 	bl	8000c74 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e066      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x530>
 800198a:	e05e      	b.n	8001a4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198c:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f96c 	bl	8000c74 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f968 	bl	8000c74 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04c      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	4924      	ldr	r1, [pc, #144]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]
 80019ca:	e03e      	b.n	8001a4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e039      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d12c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	3b01      	subs	r3, #1
 80019f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d123      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d113      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	019f800c 	.word	0x019f800c
 8001a5c:	feeefffc 	.word	0xfeeefffc

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e11e      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b91      	ldr	r3, [pc, #580]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	498c      	ldr	r1, [pc, #560]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e106      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d073      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d129      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0f4      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001acc:	f000 f99e 	bl	8001e0c <RCC_GetSysClockFreqFromPLLSource>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc8 <HAL_RCC_ClockConfig+0x268>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d93f      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ada:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d033      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12f      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b02:	4a70      	ldr	r2, [pc, #448]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b18:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0c6      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0be      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b38:	f000 f8ce 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <HAL_RCC_ClockConfig+0x268>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d909      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4957      	ldr	r1, [pc, #348]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f882 	bl	8000c74 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f87e 	bl	8000c74 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e095      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a42      	ldr	r2, [pc, #264]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4936      	ldr	r1, [pc, #216]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b80      	cmp	r3, #128	@ 0x80
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4a32      	ldr	r2, [pc, #200]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c02:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d21d      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c10:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 020f 	bic.w	r2, r3, #15
 8001c18:	4929      	ldr	r1, [pc, #164]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f828 	bl	8000c74 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f824 	bl	8000c74 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e03b      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1ed      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4917      	ldr	r1, [pc, #92]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490f      	ldr	r1, [pc, #60]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8a:	f000 f825 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <HAL_RCC_ClockConfig+0x26c>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ff94 	bl	8000bdc <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	04c4b400 	.word	0x04c4b400
 8001ccc:	080055ec 	.word	0x080055ec
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000018 	.word	0x20000018

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cde:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e047      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e03e      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d136      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3301      	adds	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d36:	68d2      	ldr	r2, [r2, #12]
 8001d38:	0a12      	lsrs	r2, r2, #8
 8001d3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
      break;
 8001d44:	e00c      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d46:	4a13      	ldr	r2, [pc, #76]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4a10      	ldr	r2, [pc, #64]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	0a12      	lsrs	r2, r2, #8
 8001d54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
      break;
 8001d5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0e5b      	lsrs	r3, r3, #25
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e001      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d80:	693b      	ldr	r3, [r7, #16]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	016e3600 	.word	0x016e3600

08001d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4904      	ldr	r1, [pc, #16]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080055fc 	.word	0x080055fc

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de4:	f7ff ffda 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4904      	ldr	r1, [pc, #16]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	080055fc 	.word	0x080055fc

08001e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d10c      	bne.n	8001e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3a:	68d2      	ldr	r2, [r2, #12]
 8001e3c:	0a12      	lsrs	r2, r2, #8
 8001e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
    break;
 8001e48:	e00c      	b.n	8001e64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e54:	68d2      	ldr	r2, [r2, #12]
 8001e56:	0a12      	lsrs	r2, r2, #8
 8001e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    break;
 8001e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0e5b      	lsrs	r3, r3, #25
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e7e:	687b      	ldr	r3, [r7, #4]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	016e3600 	.word	0x016e3600
 8001e94:	00f42400 	.word	0x00f42400

08001e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e042      	b.n	8001f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f83b 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2224      	movs	r2, #36	@ 0x24
 8001ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb2e 	bl	8002544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f82f 	bl	8001f4c <UART_SetConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e01b      	b.n	8001f30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fbad 	bl	8002688 <UART_CheckIdleState>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f50:	b08c      	sub	sp, #48	@ 0x30
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4baa      	ldr	r3, [pc, #680]	@ (8002224 <UART_SetConfig+0x2d8>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9f      	ldr	r2, [pc, #636]	@ (8002228 <UART_SetConfig+0x2dc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8001fc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	f023 010f 	bic.w	r1, r3, #15
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a90      	ldr	r2, [pc, #576]	@ (800222c <UART_SetConfig+0x2e0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d125      	bne.n	800203c <UART_SetConfig+0xf0>
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8002230 <UART_SetConfig+0x2e4>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d81a      	bhi.n	8002034 <UART_SetConfig+0xe8>
 8001ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <UART_SetConfig+0xb8>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002015 	.word	0x08002015
 8002008:	08002025 	.word	0x08002025
 800200c:	0800201d 	.word	0x0800201d
 8002010:	0800202d 	.word	0x0800202d
 8002014:	2301      	movs	r3, #1
 8002016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800201a:	e116      	b.n	800224a <UART_SetConfig+0x2fe>
 800201c:	2302      	movs	r3, #2
 800201e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002022:	e112      	b.n	800224a <UART_SetConfig+0x2fe>
 8002024:	2304      	movs	r3, #4
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800202a:	e10e      	b.n	800224a <UART_SetConfig+0x2fe>
 800202c:	2308      	movs	r3, #8
 800202e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002032:	e10a      	b.n	800224a <UART_SetConfig+0x2fe>
 8002034:	2310      	movs	r3, #16
 8002036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800203a:	e106      	b.n	800224a <UART_SetConfig+0x2fe>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7c      	ldr	r2, [pc, #496]	@ (8002234 <UART_SetConfig+0x2e8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d138      	bne.n	80020b8 <UART_SetConfig+0x16c>
 8002046:	4b7a      	ldr	r3, [pc, #488]	@ (8002230 <UART_SetConfig+0x2e4>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d82d      	bhi.n	80020b0 <UART_SetConfig+0x164>
 8002054:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <UART_SetConfig+0x110>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002091 	.word	0x08002091
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080020b1 	.word	0x080020b1
 8002068:	080020b1 	.word	0x080020b1
 800206c:	080020a1 	.word	0x080020a1
 8002070:	080020b1 	.word	0x080020b1
 8002074:	080020b1 	.word	0x080020b1
 8002078:	080020b1 	.word	0x080020b1
 800207c:	08002099 	.word	0x08002099
 8002080:	080020b1 	.word	0x080020b1
 8002084:	080020b1 	.word	0x080020b1
 8002088:	080020b1 	.word	0x080020b1
 800208c:	080020a9 	.word	0x080020a9
 8002090:	2300      	movs	r3, #0
 8002092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002096:	e0d8      	b.n	800224a <UART_SetConfig+0x2fe>
 8002098:	2302      	movs	r3, #2
 800209a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800209e:	e0d4      	b.n	800224a <UART_SetConfig+0x2fe>
 80020a0:	2304      	movs	r3, #4
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020a6:	e0d0      	b.n	800224a <UART_SetConfig+0x2fe>
 80020a8:	2308      	movs	r3, #8
 80020aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ae:	e0cc      	b.n	800224a <UART_SetConfig+0x2fe>
 80020b0:	2310      	movs	r3, #16
 80020b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020b6:	e0c8      	b.n	800224a <UART_SetConfig+0x2fe>
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <UART_SetConfig+0x2ec>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d125      	bne.n	800210e <UART_SetConfig+0x1c2>
 80020c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002230 <UART_SetConfig+0x2e4>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020cc:	2b30      	cmp	r3, #48	@ 0x30
 80020ce:	d016      	beq.n	80020fe <UART_SetConfig+0x1b2>
 80020d0:	2b30      	cmp	r3, #48	@ 0x30
 80020d2:	d818      	bhi.n	8002106 <UART_SetConfig+0x1ba>
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d00a      	beq.n	80020ee <UART_SetConfig+0x1a2>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d814      	bhi.n	8002106 <UART_SetConfig+0x1ba>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <UART_SetConfig+0x19a>
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d008      	beq.n	80020f6 <UART_SetConfig+0x1aa>
 80020e4:	e00f      	b.n	8002106 <UART_SetConfig+0x1ba>
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ec:	e0ad      	b.n	800224a <UART_SetConfig+0x2fe>
 80020ee:	2302      	movs	r3, #2
 80020f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020f4:	e0a9      	b.n	800224a <UART_SetConfig+0x2fe>
 80020f6:	2304      	movs	r3, #4
 80020f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020fc:	e0a5      	b.n	800224a <UART_SetConfig+0x2fe>
 80020fe:	2308      	movs	r3, #8
 8002100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002104:	e0a1      	b.n	800224a <UART_SetConfig+0x2fe>
 8002106:	2310      	movs	r3, #16
 8002108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800210c:	e09d      	b.n	800224a <UART_SetConfig+0x2fe>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a4a      	ldr	r2, [pc, #296]	@ (800223c <UART_SetConfig+0x2f0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d125      	bne.n	8002164 <UART_SetConfig+0x218>
 8002118:	4b45      	ldr	r3, [pc, #276]	@ (8002230 <UART_SetConfig+0x2e4>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002122:	2bc0      	cmp	r3, #192	@ 0xc0
 8002124:	d016      	beq.n	8002154 <UART_SetConfig+0x208>
 8002126:	2bc0      	cmp	r3, #192	@ 0xc0
 8002128:	d818      	bhi.n	800215c <UART_SetConfig+0x210>
 800212a:	2b80      	cmp	r3, #128	@ 0x80
 800212c:	d00a      	beq.n	8002144 <UART_SetConfig+0x1f8>
 800212e:	2b80      	cmp	r3, #128	@ 0x80
 8002130:	d814      	bhi.n	800215c <UART_SetConfig+0x210>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <UART_SetConfig+0x1f0>
 8002136:	2b40      	cmp	r3, #64	@ 0x40
 8002138:	d008      	beq.n	800214c <UART_SetConfig+0x200>
 800213a:	e00f      	b.n	800215c <UART_SetConfig+0x210>
 800213c:	2300      	movs	r3, #0
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002142:	e082      	b.n	800224a <UART_SetConfig+0x2fe>
 8002144:	2302      	movs	r3, #2
 8002146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800214a:	e07e      	b.n	800224a <UART_SetConfig+0x2fe>
 800214c:	2304      	movs	r3, #4
 800214e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002152:	e07a      	b.n	800224a <UART_SetConfig+0x2fe>
 8002154:	2308      	movs	r3, #8
 8002156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800215a:	e076      	b.n	800224a <UART_SetConfig+0x2fe>
 800215c:	2310      	movs	r3, #16
 800215e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002162:	e072      	b.n	800224a <UART_SetConfig+0x2fe>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <UART_SetConfig+0x2f4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12a      	bne.n	80021c4 <UART_SetConfig+0x278>
 800216e:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <UART_SetConfig+0x2e4>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800217c:	d01a      	beq.n	80021b4 <UART_SetConfig+0x268>
 800217e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002182:	d81b      	bhi.n	80021bc <UART_SetConfig+0x270>
 8002184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002188:	d00c      	beq.n	80021a4 <UART_SetConfig+0x258>
 800218a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218e:	d815      	bhi.n	80021bc <UART_SetConfig+0x270>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <UART_SetConfig+0x250>
 8002194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002198:	d008      	beq.n	80021ac <UART_SetConfig+0x260>
 800219a:	e00f      	b.n	80021bc <UART_SetConfig+0x270>
 800219c:	2300      	movs	r3, #0
 800219e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021a2:	e052      	b.n	800224a <UART_SetConfig+0x2fe>
 80021a4:	2302      	movs	r3, #2
 80021a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021aa:	e04e      	b.n	800224a <UART_SetConfig+0x2fe>
 80021ac:	2304      	movs	r3, #4
 80021ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021b2:	e04a      	b.n	800224a <UART_SetConfig+0x2fe>
 80021b4:	2308      	movs	r3, #8
 80021b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021ba:	e046      	b.n	800224a <UART_SetConfig+0x2fe>
 80021bc:	2310      	movs	r3, #16
 80021be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021c2:	e042      	b.n	800224a <UART_SetConfig+0x2fe>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <UART_SetConfig+0x2dc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d13a      	bne.n	8002244 <UART_SetConfig+0x2f8>
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <UART_SetConfig+0x2e4>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021dc:	d01a      	beq.n	8002214 <UART_SetConfig+0x2c8>
 80021de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021e2:	d81b      	bhi.n	800221c <UART_SetConfig+0x2d0>
 80021e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021e8:	d00c      	beq.n	8002204 <UART_SetConfig+0x2b8>
 80021ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021ee:	d815      	bhi.n	800221c <UART_SetConfig+0x2d0>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <UART_SetConfig+0x2b0>
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f8:	d008      	beq.n	800220c <UART_SetConfig+0x2c0>
 80021fa:	e00f      	b.n	800221c <UART_SetConfig+0x2d0>
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002202:	e022      	b.n	800224a <UART_SetConfig+0x2fe>
 8002204:	2302      	movs	r3, #2
 8002206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800220a:	e01e      	b.n	800224a <UART_SetConfig+0x2fe>
 800220c:	2304      	movs	r3, #4
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002212:	e01a      	b.n	800224a <UART_SetConfig+0x2fe>
 8002214:	2308      	movs	r3, #8
 8002216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800221a:	e016      	b.n	800224a <UART_SetConfig+0x2fe>
 800221c:	2310      	movs	r3, #16
 800221e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002222:	e012      	b.n	800224a <UART_SetConfig+0x2fe>
 8002224:	cfff69f3 	.word	0xcfff69f3
 8002228:	40008000 	.word	0x40008000
 800222c:	40013800 	.word	0x40013800
 8002230:	40021000 	.word	0x40021000
 8002234:	40004400 	.word	0x40004400
 8002238:	40004800 	.word	0x40004800
 800223c:	40004c00 	.word	0x40004c00
 8002240:	40005000 	.word	0x40005000
 8002244:	2310      	movs	r3, #16
 8002246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4aae      	ldr	r2, [pc, #696]	@ (8002508 <UART_SetConfig+0x5bc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f040 8097 	bne.w	8002384 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002256:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800225a:	2b08      	cmp	r3, #8
 800225c:	d823      	bhi.n	80022a6 <UART_SetConfig+0x35a>
 800225e:	a201      	add	r2, pc, #4	@ (adr r2, 8002264 <UART_SetConfig+0x318>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002289 	.word	0x08002289
 8002268:	080022a7 	.word	0x080022a7
 800226c:	08002291 	.word	0x08002291
 8002270:	080022a7 	.word	0x080022a7
 8002274:	08002297 	.word	0x08002297
 8002278:	080022a7 	.word	0x080022a7
 800227c:	080022a7 	.word	0x080022a7
 8002280:	080022a7 	.word	0x080022a7
 8002284:	0800229f 	.word	0x0800229f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002288:	f7ff fd94 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 800228c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800228e:	e010      	b.n	80022b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002290:	4b9e      	ldr	r3, [pc, #632]	@ (800250c <UART_SetConfig+0x5c0>)
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002294:	e00d      	b.n	80022b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002296:	f7ff fd1f 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 800229a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800229c:	e009      	b.n	80022b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800229e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80022a4:	e005      	b.n	80022b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80022b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8130 	beq.w	800251a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	4a94      	ldr	r2, [pc, #592]	@ (8002510 <UART_SetConfig+0x5c4>)
 80022c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c4:	461a      	mov	r2, r3
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d305      	bcc.n	80022ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d903      	bls.n	80022f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80022f0:	e113      	b.n	800251a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	2200      	movs	r2, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	60fa      	str	r2, [r7, #12]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	4a84      	ldr	r2, [pc, #528]	@ (8002510 <UART_SetConfig+0x5c4>)
 8002300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002304:	b29b      	uxth	r3, r3
 8002306:	2200      	movs	r2, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002314:	f7fd ff84 	bl	8000220 <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	020b      	lsls	r3, r1, #8
 800232a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800232e:	0202      	lsls	r2, r0, #8
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	6849      	ldr	r1, [r1, #4]
 8002334:	0849      	lsrs	r1, r1, #1
 8002336:	2000      	movs	r0, #0
 8002338:	460c      	mov	r4, r1
 800233a:	4605      	mov	r5, r0
 800233c:	eb12 0804 	adds.w	r8, r2, r4
 8002340:	eb43 0905 	adc.w	r9, r3, r5
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	469a      	mov	sl, r3
 800234c:	4693      	mov	fp, r2
 800234e:	4652      	mov	r2, sl
 8002350:	465b      	mov	r3, fp
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ff63 	bl	8000220 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4613      	mov	r3, r2
 8002360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002368:	d308      	bcc.n	800237c <UART_SetConfig+0x430>
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002370:	d204      	bcs.n	800237c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a3a      	ldr	r2, [r7, #32]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	e0ce      	b.n	800251a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002382:	e0ca      	b.n	800251a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800238c:	d166      	bne.n	800245c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800238e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002392:	2b08      	cmp	r3, #8
 8002394:	d827      	bhi.n	80023e6 <UART_SetConfig+0x49a>
 8002396:	a201      	add	r2, pc, #4	@ (adr r2, 800239c <UART_SetConfig+0x450>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023c1 	.word	0x080023c1
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	080023d1 	.word	0x080023d1
 80023a8:	080023e7 	.word	0x080023e7
 80023ac:	080023d7 	.word	0x080023d7
 80023b0:	080023e7 	.word	0x080023e7
 80023b4:	080023e7 	.word	0x080023e7
 80023b8:	080023e7 	.word	0x080023e7
 80023bc:	080023df 	.word	0x080023df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023c0:	f7ff fcf8 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80023c6:	e014      	b.n	80023f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023c8:	f7ff fd0a 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 80023cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80023ce:	e010      	b.n	80023f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023d0:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <UART_SetConfig+0x5c0>)
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80023d4:	e00d      	b.n	80023f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d6:	f7ff fc7f 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 80023da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80023dc:	e009      	b.n	80023f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80023e4:	e005      	b.n	80023f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80023f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8090 	beq.w	800251a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	4a44      	ldr	r2, [pc, #272]	@ (8002510 <UART_SetConfig+0x5c4>)
 8002400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002404:	461a      	mov	r2, r3
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	fbb3 f3f2 	udiv	r3, r3, r2
 800240c:	005a      	lsls	r2, r3, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	441a      	add	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d916      	bls.n	8002454 <UART_SetConfig+0x508>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242c:	d212      	bcs.n	8002454 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f023 030f 	bic.w	r3, r3, #15
 8002436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	b29a      	uxth	r2, r3
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4313      	orrs	r3, r2
 8002448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	8bfa      	ldrh	r2, [r7, #30]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	e062      	b.n	800251a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800245a:	e05e      	b.n	800251a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800245c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002460:	2b08      	cmp	r3, #8
 8002462:	d828      	bhi.n	80024b6 <UART_SetConfig+0x56a>
 8002464:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <UART_SetConfig+0x520>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	08002491 	.word	0x08002491
 8002470:	08002499 	.word	0x08002499
 8002474:	080024a1 	.word	0x080024a1
 8002478:	080024b7 	.word	0x080024b7
 800247c:	080024a7 	.word	0x080024a7
 8002480:	080024b7 	.word	0x080024b7
 8002484:	080024b7 	.word	0x080024b7
 8002488:	080024b7 	.word	0x080024b7
 800248c:	080024af 	.word	0x080024af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002490:	f7ff fc90 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002496:	e014      	b.n	80024c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002498:	f7ff fca2 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 800249c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800249e:	e010      	b.n	80024c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <UART_SetConfig+0x5c0>)
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80024a4:	e00d      	b.n	80024c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024a6:	f7ff fc17 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 80024aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80024ac:	e009      	b.n	80024c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80024b4:	e005      	b.n	80024c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80024c0:	bf00      	nop
    }

    if (pclk != 0U)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d028      	beq.n	800251a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <UART_SetConfig+0x5c4>)
 80024ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	441a      	add	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	d910      	bls.n	8002514 <UART_SetConfig+0x5c8>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f8:	d20c      	bcs.n	8002514 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	e009      	b.n	800251a <UART_SetConfig+0x5ce>
 8002506:	bf00      	nop
 8002508:	40008000 	.word	0x40008000
 800250c:	00f42400 	.word	0x00f42400
 8002510:	08005608 	.word	0x08005608
      }
      else
      {
        ret = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2201      	movs	r2, #1
 800251e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2201      	movs	r2, #1
 8002526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002536:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800253a:	4618      	mov	r0, r3
 800253c:	3730      	adds	r7, #48	@ 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01a      	beq.n	800265a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002642:	d10a      	bne.n	800265a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
  }
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b098      	sub	sp, #96	@ 0x60
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002698:	f7fe faec 	bl	8000c74 <HAL_GetTick>
 800269c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d12f      	bne.n	800270c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b4:	2200      	movs	r2, #0
 80026b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f88e 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d022      	beq.n	800270c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ce:	e853 3f00 	ldrex	r3, [r3]
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026da:	653b      	str	r3, [r7, #80]	@ 0x50
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e6      	bne.n	80026c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e063      	b.n	80027d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d149      	bne.n	80027ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800271a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f857 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	623b      	str	r3, [r7, #32]
   return(result);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
 8002754:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e6      	bne.n	8002734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3308      	adds	r3, #8
 800276c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	60fb      	str	r3, [r7, #12]
   return(result);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3308      	adds	r3, #8
 8002784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002786:	61fa      	str	r2, [r7, #28]
 8002788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	617b      	str	r3, [r7, #20]
   return(result);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e5      	bne.n	8002766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e012      	b.n	80027d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3758      	adds	r7, #88	@ 0x58
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	e04f      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f4:	d04b      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fa3d 	bl	8000c74 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e04e      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d037      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b80      	cmp	r3, #128	@ 0x80
 8002822:	d034      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b40      	cmp	r3, #64	@ 0x40
 8002828:	d031      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d110      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f838 	bl	80028b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2208      	movs	r2, #8
 800284a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e029      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002868:	d111      	bne.n	800288e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f81e 	bl	80028b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d0a0      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b095      	sub	sp, #84	@ 0x54
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80028de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e6      	bne.n	80028be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3308      	adds	r3, #8
 80028f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3308      	adds	r3, #8
 8002912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e3      	bne.n	80028f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d118      	bne.n	8002962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	60bb      	str	r3, [r7, #8]
   return(result);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f023 0310 	bic.w	r3, r3, #16
 8002944:	647b      	str	r3, [r7, #68]	@ 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	613b      	str	r3, [r7, #16]
   return(result);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e6      	bne.n	8002930 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002976:	bf00      	nop
 8002978:	3754      	adds	r7, #84	@ 0x54
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <__NVIC_SetPriority>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	@ (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029dc:	2100      	movs	r1, #0
 80029de:	f06f 0004 	mvn.w	r0, #4
 80029e2:	f7ff ffcf 	bl	8002984 <__NVIC_SetPriority>
#endif
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029f2:	f3ef 8305 	mrs	r3, IPSR
 80029f6:	603b      	str	r3, [r7, #0]
  return(result);
 80029f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80029fe:	f06f 0305 	mvn.w	r3, #5
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	e00c      	b.n	8002a20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <osKernelInitialize+0x44>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <osKernelInitialize+0x44>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	e002      	b.n	8002a20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	200000f8 	.word	0x200000f8

08002a34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3a:	f3ef 8305 	mrs	r3, IPSR
 8002a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a46:	f06f 0305 	mvn.w	r3, #5
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e010      	b.n	8002a70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <osKernelStart+0x48>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d109      	bne.n	8002a6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a56:	f7ff ffbf 	bl	80029d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <osKernelStart+0x48>)
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a60:	f001 f87a 	bl	8003b58 <vTaskStartScheduler>
      stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	e002      	b.n	8002a70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a70:	687b      	ldr	r3, [r7, #4]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200000f8 	.word	0x200000f8

08002a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a90:	f3ef 8305 	mrs	r3, IPSR
 8002a94:	617b      	str	r3, [r7, #20]
  return(result);
 8002a96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d17e      	bne.n	8002b9a <osThreadNew+0x11a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07b      	beq.n	8002b9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002aa6:	2318      	movs	r3, #24
 8002aa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d045      	beq.n	8002b46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <osThreadNew+0x48>
        name = attr->name;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <osThreadNew+0x6e>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b38      	cmp	r3, #56	@ 0x38
 8002ae0:	d805      	bhi.n	8002aee <osThreadNew+0x6e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <osThreadNew+0x72>
        return (NULL);
 8002aee:	2300      	movs	r3, #0
 8002af0:	e054      	b.n	8002b9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <osThreadNew+0xa8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002b10:	d90a      	bls.n	8002b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <osThreadNew+0xa8>
        mem = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e010      	b.n	8002b4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10c      	bne.n	8002b4a <osThreadNew+0xca>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <osThreadNew+0xca>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <osThreadNew+0xca>
          mem = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e001      	b.n	8002b4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d110      	bne.n	8002b72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b58:	9202      	str	r2, [sp, #8]
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6a3a      	ldr	r2, [r7, #32]
 8002b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fe1a 	bl	80037a0 <xTaskCreateStatic>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e013      	b.n	8002b9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d110      	bne.n	8002b9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fe68 	bl	8003860 <xTaskCreate>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <osThreadNew+0x11a>
            hTask = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b9a:	693b      	ldr	r3, [r7, #16]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	@ 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bac:	f3ef 8305 	mrs	r3, IPSR
 8002bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <osDelay+0x1c>
    stat = osErrorISR;
 8002bb8:	f06f 0305 	mvn.w	r3, #5
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e007      	b.n	8002bd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 ff8e 	bl	8003aec <vTaskDelay>
    }
  }

  return (stat);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a07      	ldr	r2, [pc, #28]	@ (8002c08 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4a06      	ldr	r2, [pc, #24]	@ (8002c0c <vApplicationGetIdleTaskMemory+0x30>)
 8002bf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200000fc 	.word	0x200000fc
 8002c0c:	20000158 	.word	0x20000158

08002c10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <vApplicationGetTimerTaskMemory+0x30>)
 8002c26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20000358 	.word	0x20000358
 8002c40:	200003b4 	.word	0x200003b4

08002c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0208 	add.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 0208 	add.w	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0208 	add.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cfc:	d103      	bne.n	8002d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	e00c      	b.n	8002d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e002      	b.n	8002d14 <vListInsert+0x2e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d2f6      	bcs.n	8002d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	601a      	str	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6892      	ldr	r2, [r2, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6852      	ldr	r2, [r2, #4]
 8002d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d103      	bne.n	8002d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dd8:	f002 f876 	bl	8004ec8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	22ff      	movs	r2, #255	@ 0xff
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	22ff      	movs	r2, #255	@ 0xff
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d114      	bne.n	8002e58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01a      	beq.n	8002e6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3310      	adds	r3, #16
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f91a 	bl	8004074 <xTaskRemoveFromEventList>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <xQueueGenericReset+0xd0>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	e009      	b.n	8002e6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fef1 	bl	8002c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3324      	adds	r3, #36	@ 0x24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff feec 	bl	8002c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e6c:	f002 f85e 	bl	8004f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	@ 0x38
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <xQueueGenericCreateStatic+0x56>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <xQueueGenericCreateStatic+0x5a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <xQueueGenericCreateStatic+0x5c>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	623b      	str	r3, [r7, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <xQueueGenericCreateStatic+0x84>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <xQueueGenericCreateStatic+0x88>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <xQueueGenericCreateStatic+0x8a>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	61fb      	str	r3, [r7, #28]
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f26:	2350      	movs	r3, #80	@ 0x50
 8002f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b50      	cmp	r3, #80	@ 0x50
 8002f2e:	d00b      	beq.n	8002f48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	61bb      	str	r3, [r7, #24]
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f805 	bl	8002f7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3730      	adds	r7, #48	@ 0x30
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e002      	b.n	8002f9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa8:	2101      	movs	r1, #1
 8002faa:	69b8      	ldr	r0, [r7, #24]
 8002fac:	f7ff fefe 	bl	8002dac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	@ 0x38
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <xQueueGenericSend+0x34>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <xQueueGenericSend+0x42>
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <xQueueGenericSend+0x46>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <xQueueGenericSend+0x48>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <xQueueGenericSend+0x64>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <xQueueGenericSend+0x72>
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <xQueueGenericSend+0x76>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <xQueueGenericSend+0x78>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <xQueueGenericSend+0x94>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	623b      	str	r3, [r7, #32]
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003054:	f001 f9ce 	bl	80043f4 <xTaskGetSchedulerState>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <xQueueGenericSend+0xa4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <xQueueGenericSend+0xa8>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <xQueueGenericSend+0xaa>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <xQueueGenericSend+0xc6>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	61fb      	str	r3, [r7, #28]
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	e7fd      	b.n	8003082 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003086:	f001 ff1f 	bl	8004ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <xQueueGenericSend+0xdc>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d129      	bne.n	80030f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030a2:	f000 fa0f 	bl	80034c4 <prvCopyDataToQueue>
 80030a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	3324      	adds	r3, #36	@ 0x24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ffdd 	bl	8004074 <xTaskRemoveFromEventList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030c0:	4b3f      	ldr	r3, [pc, #252]	@ (80031c0 <xQueueGenericSend+0x200>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	e00a      	b.n	80030e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030d8:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <xQueueGenericSend+0x200>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030e8:	f001 ff20 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e063      	b.n	80031b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030f6:	f001 ff19 	bl	8004f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e05c      	b.n	80031b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4618      	mov	r0, r3
 800310a:	f001 f817 	bl	800413c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800310e:	2301      	movs	r3, #1
 8003110:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003112:	f001 ff0b 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003116:	f000 fd87 	bl	8003c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800311a:	f001 fed5 	bl	8004ec8 <vPortEnterCritical>
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003124:	b25b      	sxtb	r3, r3
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800312a:	d103      	bne.n	8003134 <xQueueGenericSend+0x174>
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313a:	b25b      	sxtb	r3, r3
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003140:	d103      	bne.n	800314a <xQueueGenericSend+0x18a>
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800314a:	f001 feef 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800314e:	1d3a      	adds	r2, r7, #4
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f806 	bl	8004168 <xTaskCheckForTimeOut>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d124      	bne.n	80031ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003162:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003164:	f000 faa6 	bl	80036b4 <prvIsQueueFull>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	3310      	adds	r3, #16
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 ff2a 	bl	8003fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800317c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800317e:	f000 fa31 	bl	80035e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003182:	f000 fd5f 	bl	8003c44 <xTaskResumeAll>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f af7c 	bne.w	8003086 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800318e:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <xQueueGenericSend+0x200>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	e772      	b.n	8003086 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031a2:	f000 fa1f 	bl	80035e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031a6:	f000 fd4d 	bl	8003c44 <xTaskResumeAll>
 80031aa:	e76c      	b.n	8003086 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ae:	f000 fa19 	bl	80035e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031b2:	f000 fd47 	bl	8003c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	@ 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b090      	sub	sp, #64	@ 0x40
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <xQueueGenericSendFromISR+0x3e>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xQueueGenericSendFromISR+0x42>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericSendFromISR+0x44>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d103      	bne.n	8003232 <xQueueGenericSendFromISR+0x6e>
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <xQueueGenericSendFromISR+0x72>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueGenericSendFromISR+0x74>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	623b      	str	r3, [r7, #32]
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003254:	f001 ff18 	bl	8005088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003258:	f3ef 8211 	mrs	r2, BASEPRI
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61fa      	str	r2, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003270:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <xQueueGenericSendFromISR+0xc2>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d12f      	bne.n	80032e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800328c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800329c:	f000 f912 	bl	80034c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a8:	d112      	bne.n	80032d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b4:	3324      	adds	r3, #36	@ 0x24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fedc 	bl	8004074 <xTaskRemoveFromEventList>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e007      	b.n	80032e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032d4:	3301      	adds	r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	b25a      	sxtb	r2, r3
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032e0:	2301      	movs	r3, #1
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80032e4:	e001      	b.n	80032ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3740      	adds	r7, #64	@ 0x40
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	@ 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <xQueueReceive+0x32>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	623b      	str	r3, [r7, #32]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <xQueueReceive+0x40>
 8003338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <xQueueReceive+0x44>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <xQueueReceive+0x46>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10b      	bne.n	8003362 <xQueueReceive+0x62>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	61fb      	str	r3, [r7, #28]
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	e7fd      	b.n	800335e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003362:	f001 f847 	bl	80043f4 <xTaskGetSchedulerState>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <xQueueReceive+0x72>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <xQueueReceive+0x76>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <xQueueReceive+0x78>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <xQueueReceive+0x94>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61bb      	str	r3, [r7, #24]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003394:	f001 fd98 	bl	8004ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01f      	beq.n	80033e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a8:	f000 f8f6 	bl	8003598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00f      	beq.n	80033dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	3310      	adds	r3, #16
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fe57 	bl	8004074 <xTaskRemoveFromEventList>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033cc:	4b3c      	ldr	r3, [pc, #240]	@ (80034c0 <xQueueReceive+0x1c0>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033dc:	f001 fda6 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e069      	b.n	80034b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033ea:	f001 fd9f 	bl	8004f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e062      	b.n	80034b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033f8:	f107 0310 	add.w	r3, r7, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe9d 	bl	800413c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003402:	2301      	movs	r3, #1
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003406:	f001 fd91 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800340a:	f000 fc0d 	bl	8003c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800340e:	f001 fd5b 	bl	8004ec8 <vPortEnterCritical>
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003418:	b25b      	sxtb	r3, r3
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800341e:	d103      	bne.n	8003428 <xQueueReceive+0x128>
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003434:	d103      	bne.n	800343e <xQueueReceive+0x13e>
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800343e:	f001 fd75 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003442:	1d3a      	adds	r2, r7, #4
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fe8c 	bl	8004168 <xTaskCheckForTimeOut>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d123      	bne.n	800349e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003458:	f000 f916 	bl	8003688 <prvIsQueueEmpty>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003464:	3324      	adds	r3, #36	@ 0x24
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fdb0 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003472:	f000 f8b7 	bl	80035e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003476:	f000 fbe5 	bl	8003c44 <xTaskResumeAll>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d189      	bne.n	8003394 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <xQueueReceive+0x1c0>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	e780      	b.n	8003394 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003494:	f000 f8a6 	bl	80035e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003498:	f000 fbd4 	bl	8003c44 <xTaskResumeAll>
 800349c:	e77a      	b.n	8003394 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800349e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034a0:	f000 f8a0 	bl	80035e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034a4:	f000 fbce 	bl	8003c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034aa:	f000 f8ed 	bl	8003688 <prvIsQueueEmpty>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f43f af6f 	beq.w	8003394 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3730      	adds	r7, #48	@ 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14d      	bne.n	8003586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 ff9e 	bl	8004430 <xTaskPriorityDisinherit>
 80034f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e043      	b.n	8003586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d119      	bne.n	8003538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6858      	ldr	r0, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	f002 f816 	bl	8005540 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d32b      	bcc.n	8003586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e026      	b.n	8003586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68d8      	ldr	r0, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	f001 fffc 	bl	8005540 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	425b      	negs	r3, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d207      	bcs.n	8003574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	425b      	negs	r3, r3
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d105      	bne.n	8003586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3b01      	subs	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800358e:	697b      	ldr	r3, [r7, #20]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d303      	bcc.n	80035cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68d9      	ldr	r1, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	461a      	mov	r2, r3
 80035d6:	6838      	ldr	r0, [r7, #0]
 80035d8:	f001 ffb2 	bl	8005540 <memcpy>
	}
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035ec:	f001 fc6c 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035f8:	e011      	b.n	800361e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3324      	adds	r3, #36	@ 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fd34 	bl	8004074 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003612:	f000 fe0d 	bl	8004230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3b01      	subs	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	dce9      	bgt.n	80035fa <prvUnlockQueue+0x16>
 8003626:	e000      	b.n	800362a <prvUnlockQueue+0x46>
					break;
 8003628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	22ff      	movs	r2, #255	@ 0xff
 800362e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fc7b 	bl	8004f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003636:	f001 fc47 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003642:	e011      	b.n	8003668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3310      	adds	r3, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd0f 	bl	8004074 <xTaskRemoveFromEventList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800365c:	f000 fde8 	bl	8004230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	3b01      	subs	r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800366c:	2b00      	cmp	r3, #0
 800366e:	dce9      	bgt.n	8003644 <prvUnlockQueue+0x60>
 8003670:	e000      	b.n	8003674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	22ff      	movs	r2, #255	@ 0xff
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800367c:	f001 fc56 	bl	8004f2c <vPortExitCritical>
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003690:	f001 fc1a 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e001      	b.n	80036a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fc41 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036bc:	f001 fc04 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d102      	bne.n	80036d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f001 fc29 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e014      	b.n	800371e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003734 <vQueueAddToRegistry+0x50>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003700:	490c      	ldr	r1, [pc, #48]	@ (8003734 <vQueueAddToRegistry+0x50>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800370a:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <vQueueAddToRegistry+0x50>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003716:	e006      	b.n	8003726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d9e7      	bls.n	80036f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200007b4 	.word	0x200007b4

08003738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003748:	f001 fbbe 	bl	8004ec8 <vPortEnterCritical>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003758:	d103      	bne.n	8003762 <vQueueWaitForMessageRestricted+0x2a>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003768:	b25b      	sxtb	r3, r3
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800376e:	d103      	bne.n	8003778 <vQueueWaitForMessageRestricted+0x40>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003778:	f001 fbd8 	bl	8004f2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3324      	adds	r3, #36	@ 0x24
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fc45 	bl	800401c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff26 	bl	80035e4 <prvUnlockQueue>
	}
 8003798:	bf00      	nop
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	@ 0x38
 80037a4:	af04      	add	r7, sp, #16
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	61fb      	str	r3, [r7, #28]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037ea:	235c      	movs	r3, #92	@ 0x5c
 80037ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80037f2:	d00b      	beq.n	800380c <xTaskCreateStatic+0x6c>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61bb      	str	r3, [r7, #24]
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800380c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01e      	beq.n	8003852 <xTaskCreateStatic+0xb2>
 8003814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01b      	beq.n	8003852 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800382c:	2300      	movs	r3, #0
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	9302      	str	r3, [sp, #8]
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f850 	bl	80038ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800384c:	f000 f8de 	bl	8003a0c <prvAddNewTaskToReadyList>
 8003850:	e001      	b.n	8003856 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	@ 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	@ 0x30
 8003864:	af04      	add	r7, sp, #16
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fc49 	bl	800510c <pvPortMalloc>
 800387a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003882:	205c      	movs	r0, #92	@ 0x5c
 8003884:	f001 fc42 	bl	800510c <pvPortMalloc>
 8003888:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
 8003896:	e005      	b.n	80038a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f001 fd05 	bl	80052a8 <vPortFree>
 800389e:	e001      	b.n	80038a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f80e 	bl	80038ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ce:	69f8      	ldr	r0, [r7, #28]
 80038d0:	f000 f89c 	bl	8003a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e002      	b.n	80038e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e0:	69bb      	ldr	r3, [r7, #24]
	}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b088      	sub	sp, #32
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	461a      	mov	r2, r3
 8003902:	21a5      	movs	r1, #165	@ 0xa5
 8003904:	f001 fdf0 	bl	80054e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003912:	3b01      	subs	r3, #1
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f023 0307 	bic.w	r3, r3, #7
 8003920:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	617b      	str	r3, [r7, #20]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01f      	beq.n	800398a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e012      	b.n	8003976 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	7819      	ldrb	r1, [r3, #0]
 8003958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	3334      	adds	r3, #52	@ 0x34
 8003960:	460a      	mov	r2, r1
 8003962:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d9e9      	bls.n	8003950 <prvInitialiseNewTask+0x66>
 800397c:	e000      	b.n	8003980 <prvInitialiseNewTask+0x96>
			{
				break;
 800397e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003988:	e003      	b.n	8003992 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	2b37      	cmp	r3, #55	@ 0x37
 8003996:	d901      	bls.n	800399c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003998:	2337      	movs	r3, #55	@ 0x37
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	2200      	movs	r2, #0
 80039ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	3304      	adds	r3, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f966 	bl	8002c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	3318      	adds	r3, #24
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff f961 	bl	8002c84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f001 f93e 	bl	8004c6c <pxPortInitialiseStack>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a14:	f001 fa58 	bl	8004ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a30:	4b27      	ldr	r3, [pc, #156]	@ (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d110      	bne.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a38:	f000 fc1e 	bl	8004278 <prvInitialiseTaskLists>
 8003a3c:	e00d      	b.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <prvAddNewTaskToReadyList+0xcc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a46:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d802      	bhi.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a54:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <prvAddNewTaskToReadyList+0xd0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <prvAddNewTaskToReadyList+0xd0>)
 8003a62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <prvAddNewTaskToReadyList+0xd0>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae0 <prvAddNewTaskToReadyList+0xd4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d903      	bls.n	8003a80 <prvAddNewTaskToReadyList+0x74>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <prvAddNewTaskToReadyList+0xd4>)
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <prvAddNewTaskToReadyList+0xd8>)
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f7ff f901 	bl	8002c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a9c:	f001 fa46 	bl	8004f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <prvAddNewTaskToReadyList+0xcc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d207      	bcs.n	8003ac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <prvAddNewTaskToReadyList+0xdc>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000cc8 	.word	0x20000cc8
 8003ad4:	200007f4 	.word	0x200007f4
 8003ad8:	20000cd4 	.word	0x20000cd4
 8003adc:	20000ce4 	.word	0x20000ce4
 8003ae0:	20000cd0 	.word	0x20000cd0
 8003ae4:	200007f8 	.word	0x200007f8
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003afe:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <vTaskDelay+0x64>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <vTaskDelay+0x32>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60bb      	str	r3, [r7, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	e7fd      	b.n	8003b1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b1e:	f000 f883 	bl	8003c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b22:	2100      	movs	r1, #0
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fcf3 	bl	8004510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b2a:	f000 f88b 	bl	8003c44 <xTaskResumeAll>
 8003b2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b36:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <vTaskDelay+0x68>)
 8003b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000cf0 	.word	0x20000cf0
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	@ 0x28
 8003b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b66:	463a      	mov	r2, r7
 8003b68:	1d39      	adds	r1, r7, #4
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f834 	bl	8002bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	9202      	str	r2, [sp, #8]
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	460a      	mov	r2, r1
 8003b86:	4922      	ldr	r1, [pc, #136]	@ (8003c10 <vTaskStartScheduler+0xb8>)
 8003b88:	4822      	ldr	r0, [pc, #136]	@ (8003c14 <vTaskStartScheduler+0xbc>)
 8003b8a:	f7ff fe09 	bl	80037a0 <xTaskCreateStatic>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <vTaskStartScheduler+0xc0>)
 8003b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b94:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <vTaskStartScheduler+0xc0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e001      	b.n	8003ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bac:	f000 fd04 	bl	80045b8 <xTimerCreateTimerTask>
 8003bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d116      	bne.n	8003be6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	613b      	str	r3, [r7, #16]
}
 8003bca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <vTaskStartScheduler+0xc4>)
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <vTaskStartScheduler+0xc8>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bda:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <vTaskStartScheduler+0xcc>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003be0:	f001 f8ce 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003be4:	e00f      	b.n	8003c06 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bec:	d10b      	bne.n	8003c06 <vTaskStartScheduler+0xae>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60fb      	str	r3, [r7, #12]
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	e7fd      	b.n	8003c02 <vTaskStartScheduler+0xaa>
}
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	0800558c 	.word	0x0800558c
 8003c14:	08004249 	.word	0x08004249
 8003c18:	20000cec 	.word	0x20000cec
 8003c1c:	20000ce8 	.word	0x20000ce8
 8003c20:	20000cd4 	.word	0x20000cd4
 8003c24:	20000ccc 	.word	0x20000ccc

08003c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <vTaskSuspendAll+0x18>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a03      	ldr	r2, [pc, #12]	@ (8003c40 <vTaskSuspendAll+0x18>)
 8003c34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	20000cf0 	.word	0x20000cf0

08003c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c52:	4b42      	ldr	r3, [pc, #264]	@ (8003d5c <xTaskResumeAll+0x118>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	603b      	str	r3, [r7, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c72:	f001 f929 	bl	8004ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c76:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <xTaskResumeAll+0x118>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4a37      	ldr	r2, [pc, #220]	@ (8003d5c <xTaskResumeAll+0x118>)
 8003c7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c80:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <xTaskResumeAll+0x118>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d162      	bne.n	8003d4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c88:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <xTaskResumeAll+0x11c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05e      	beq.n	8003d4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c90:	e02f      	b.n	8003cf2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c92:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <xTaskResumeAll+0x120>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3318      	adds	r3, #24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff f85a 	bl	8002d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f855 	bl	8002d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <xTaskResumeAll+0x124>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <xTaskResumeAll+0x7e>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003d68 <xTaskResumeAll+0x124>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a27      	ldr	r2, [pc, #156]	@ (8003d6c <xTaskResumeAll+0x128>)
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe ffe0 	bl	8002c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce2:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <xTaskResumeAll+0x12c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003cec:	4b21      	ldr	r3, [pc, #132]	@ (8003d74 <xTaskResumeAll+0x130>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <xTaskResumeAll+0x120>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1cb      	bne.n	8003c92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d00:	f000 fb58 	bl	80043b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d04:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <xTaskResumeAll+0x134>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d10:	f000 f846 	bl	8003da0 <xTaskIncrementTick>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	@ (8003d74 <xTaskResumeAll+0x130>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f1      	bne.n	8003d10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <xTaskResumeAll+0x134>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <xTaskResumeAll+0x130>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <xTaskResumeAll+0x138>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 f8ed 	bl	8004f2c <vPortExitCritical>

	return xAlreadyYielded;
 8003d52:	68bb      	ldr	r3, [r7, #8]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000cf0 	.word	0x20000cf0
 8003d60:	20000cc8 	.word	0x20000cc8
 8003d64:	20000c88 	.word	0x20000c88
 8003d68:	20000cd0 	.word	0x20000cd0
 8003d6c:	200007f8 	.word	0x200007f8
 8003d70:	200007f4 	.word	0x200007f4
 8003d74:	20000cdc 	.word	0x20000cdc
 8003d78:	20000cd8 	.word	0x20000cd8
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <xTaskGetTickCount+0x1c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d8c:	687b      	ldr	r3, [r7, #4]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000ccc 	.word	0x20000ccc

08003da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee8 <xTaskIncrementTick+0x148>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8090 	bne.w	8003ed4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db4:	4b4d      	ldr	r3, [pc, #308]	@ (8003eec <xTaskIncrementTick+0x14c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8003eec <xTaskIncrementTick+0x14c>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d121      	bne.n	8003e0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dc8:	4b49      	ldr	r3, [pc, #292]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <xTaskIncrementTick+0x4a>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	603b      	str	r3, [r7, #0]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <xTaskIncrementTick+0x46>
 8003dea:	4b41      	ldr	r3, [pc, #260]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <xTaskIncrementTick+0x154>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef4 <xTaskIncrementTick+0x154>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a3c      	ldr	r2, [pc, #240]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	f000 fad4 	bl	80043b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <xTaskIncrementTick+0x15c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d349      	bcc.n	8003eaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e16:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <xTaskIncrementTick+0x15c>)
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e26:	601a      	str	r2, [r3, #0]
					break;
 8003e28:	e03f      	b.n	8003eaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d203      	bcs.n	8003e4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e42:	4a2e      	ldr	r2, [pc, #184]	@ (8003efc <xTaskIncrementTick+0x15c>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e48:	e02f      	b.n	8003eaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe ff82 	bl	8002d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3318      	adds	r3, #24
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe ff79 	bl	8002d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6a:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <xTaskIncrementTick+0x160>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d903      	bls.n	8003e7a <xTaskIncrementTick+0xda>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	4a22      	ldr	r2, [pc, #136]	@ (8003f00 <xTaskIncrementTick+0x160>)
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4a1f      	ldr	r2, [pc, #124]	@ (8003f04 <xTaskIncrementTick+0x164>)
 8003e88:	441a      	add	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f7fe ff04 	bl	8002c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <xTaskIncrementTick+0x168>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3b8      	bcc.n	8003e16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea8:	e7b5      	b.n	8003e16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eaa:	4b17      	ldr	r3, [pc, #92]	@ (8003f08 <xTaskIncrementTick+0x168>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb0:	4914      	ldr	r1, [pc, #80]	@ (8003f04 <xTaskIncrementTick+0x164>)
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d901      	bls.n	8003ec6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <xTaskIncrementTick+0x16c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e004      	b.n	8003ede <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <xTaskIncrementTick+0x170>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <xTaskIncrementTick+0x170>)
 8003edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ede:	697b      	ldr	r3, [r7, #20]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000cf0 	.word	0x20000cf0
 8003eec:	20000ccc 	.word	0x20000ccc
 8003ef0:	20000c80 	.word	0x20000c80
 8003ef4:	20000c84 	.word	0x20000c84
 8003ef8:	20000ce0 	.word	0x20000ce0
 8003efc:	20000ce8 	.word	0x20000ce8
 8003f00:	20000cd0 	.word	0x20000cd0
 8003f04:	200007f8 	.word	0x200007f8
 8003f08:	200007f4 	.word	0x200007f4
 8003f0c:	20000cdc 	.word	0x20000cdc
 8003f10:	20000cd8 	.word	0x20000cd8

08003f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f1a:	4b28      	ldr	r3, [pc, #160]	@ (8003fbc <vTaskSwitchContext+0xa8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f22:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <vTaskSwitchContext+0xac>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f28:	e042      	b.n	8003fb0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f2a:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <vTaskSwitchContext+0xac>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <vTaskSwitchContext+0xb0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e011      	b.n	8003f5c <vTaskSwitchContext+0x48>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <vTaskSwitchContext+0x42>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <vTaskSwitchContext+0x3e>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	491a      	ldr	r1, [pc, #104]	@ (8003fc8 <vTaskSwitchContext+0xb4>)
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0e3      	beq.n	8003f38 <vTaskSwitchContext+0x24>
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <vTaskSwitchContext+0xb4>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3308      	adds	r3, #8
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d104      	bne.n	8003fa0 <vTaskSwitchContext+0x8c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <vTaskSwitchContext+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4a06      	ldr	r2, [pc, #24]	@ (8003fc4 <vTaskSwitchContext+0xb0>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000cf0 	.word	0x20000cf0
 8003fc0:	20000cdc 	.word	0x20000cdc
 8003fc4:	20000cd0 	.word	0x20000cd0
 8003fc8:	200007f8 	.word	0x200007f8
 8003fcc:	200007f4 	.word	0x200007f4

08003fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ff8:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <vTaskPlaceOnEventList+0x48>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fe fe70 	bl	8002ce6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004006:	2101      	movs	r1, #1
 8004008:	6838      	ldr	r0, [r7, #0]
 800400a:	f000 fa81 	bl	8004510 <prvAddCurrentTaskToDelayedList>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200007f4 	.word	0x200007f4

0800401c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	617b      	str	r3, [r7, #20]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004046:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <vTaskPlaceOnEventListRestricted+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3318      	adds	r3, #24
 800404c:	4619      	mov	r1, r3
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7fe fe25 	bl	8002c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800405e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68b8      	ldr	r0, [r7, #8]
 8004064:	f000 fa54 	bl	8004510 <prvAddCurrentTaskToDelayedList>
	}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200007f4 	.word	0x200007f4

08004074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60fb      	str	r3, [r7, #12]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3318      	adds	r3, #24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fe56 	bl	8002d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <xTaskRemoveFromEventList+0xb0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11d      	bne.n	80040f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fe4d 	bl	8002d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c2:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <xTaskRemoveFromEventList+0xb4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d903      	bls.n	80040d2 <xTaskRemoveFromEventList+0x5e>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <xTaskRemoveFromEventList+0xb4>)
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <xTaskRemoveFromEventList+0xb8>)
 80040e0:	441a      	add	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fe fdd8 	bl	8002c9e <vListInsertEnd>
 80040ee:	e005      	b.n	80040fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3318      	adds	r3, #24
 80040f4:	4619      	mov	r1, r3
 80040f6:	480e      	ldr	r0, [pc, #56]	@ (8004130 <xTaskRemoveFromEventList+0xbc>)
 80040f8:	f7fe fdd1 	bl	8002c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <xTaskRemoveFromEventList+0xc0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	429a      	cmp	r2, r3
 8004108:	d905      	bls.n	8004116 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800410e:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <xTaskRemoveFromEventList+0xc4>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e001      	b.n	800411a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800411a:	697b      	ldr	r3, [r7, #20]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000cf0 	.word	0x20000cf0
 8004128:	20000cd0 	.word	0x20000cd0
 800412c:	200007f8 	.word	0x200007f8
 8004130:	20000c88 	.word	0x20000c88
 8004134:	200007f4 	.word	0x200007f4
 8004138:	20000cdc 	.word	0x20000cdc

0800413c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <vTaskInternalSetTimeOutState+0x24>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800414c:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <vTaskInternalSetTimeOutState+0x28>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000ce0 	.word	0x20000ce0
 8004164:	20000ccc 	.word	0x20000ccc

08004168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	613b      	str	r3, [r7, #16]
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60fb      	str	r3, [r7, #12]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041ae:	f000 fe8b 	bl	8004ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <xTaskCheckForTimeOut+0xc0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ca:	d102      	bne.n	80041d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e023      	b.n	800421a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <xTaskCheckForTimeOut+0xc4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d007      	beq.n	80041ee <xTaskCheckForTimeOut+0x86>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d302      	bcc.n	80041ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e015      	b.n	800421a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d20b      	bcs.n	8004210 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff99 	bl	800413c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e004      	b.n	800421a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800421a:	f000 fe87 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 800421e:	69fb      	ldr	r3, [r7, #28]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000ccc 	.word	0x20000ccc
 800422c:	20000ce0 	.word	0x20000ce0

08004230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004234:	4b03      	ldr	r3, [pc, #12]	@ (8004244 <vTaskMissedYield+0x14>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000cdc 	.word	0x20000cdc

08004248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004250:	f000 f852 	bl	80042f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <prvIdleTask+0x28>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d9f9      	bls.n	8004250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <prvIdleTask+0x2c>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800426c:	e7f0      	b.n	8004250 <prvIdleTask+0x8>
 800426e:	bf00      	nop
 8004270:	200007f8 	.word	0x200007f8
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	e00c      	b.n	800429e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <prvInitialiseTaskLists+0x60>)
 8004290:	4413      	add	r3, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fcd6 	bl	8002c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3301      	adds	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b37      	cmp	r3, #55	@ 0x37
 80042a2:	d9ef      	bls.n	8004284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042a4:	480d      	ldr	r0, [pc, #52]	@ (80042dc <prvInitialiseTaskLists+0x64>)
 80042a6:	f7fe fccd 	bl	8002c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042aa:	480d      	ldr	r0, [pc, #52]	@ (80042e0 <prvInitialiseTaskLists+0x68>)
 80042ac:	f7fe fcca 	bl	8002c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042b0:	480c      	ldr	r0, [pc, #48]	@ (80042e4 <prvInitialiseTaskLists+0x6c>)
 80042b2:	f7fe fcc7 	bl	8002c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042b6:	480c      	ldr	r0, [pc, #48]	@ (80042e8 <prvInitialiseTaskLists+0x70>)
 80042b8:	f7fe fcc4 	bl	8002c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042bc:	480b      	ldr	r0, [pc, #44]	@ (80042ec <prvInitialiseTaskLists+0x74>)
 80042be:	f7fe fcc1 	bl	8002c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <prvInitialiseTaskLists+0x78>)
 80042c4:	4a05      	ldr	r2, [pc, #20]	@ (80042dc <prvInitialiseTaskLists+0x64>)
 80042c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <prvInitialiseTaskLists+0x7c>)
 80042ca:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <prvInitialiseTaskLists+0x68>)
 80042cc:	601a      	str	r2, [r3, #0]
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200007f8 	.word	0x200007f8
 80042dc:	20000c58 	.word	0x20000c58
 80042e0:	20000c6c 	.word	0x20000c6c
 80042e4:	20000c88 	.word	0x20000c88
 80042e8:	20000c9c 	.word	0x20000c9c
 80042ec:	20000cb4 	.word	0x20000cb4
 80042f0:	20000c80 	.word	0x20000c80
 80042f4:	20000c84 	.word	0x20000c84

080042f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042fe:	e019      	b.n	8004334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004300:	f000 fde2 	bl	8004ec8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004304:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <prvCheckTasksWaitingTermination+0x50>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fd21 	bl	8002d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <prvCheckTasksWaitingTermination+0x54>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3b01      	subs	r3, #1
 800431c:	4a0b      	ldr	r2, [pc, #44]	@ (800434c <prvCheckTasksWaitingTermination+0x54>)
 800431e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800432a:	f000 fdff 	bl	8004f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f810 	bl	8004354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e1      	bne.n	8004300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000c9c 	.word	0x20000c9c
 800434c:	20000cc8 	.word	0x20000cc8
 8004350:	20000cb0 	.word	0x20000cb0

08004354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	4618      	mov	r0, r3
 800436c:	f000 ff9c 	bl	80052a8 <vPortFree>
				vPortFree( pxTCB );
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 ff99 	bl	80052a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004376:	e019      	b.n	80043ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800437e:	2b01      	cmp	r3, #1
 8004380:	d103      	bne.n	800438a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 ff90 	bl	80052a8 <vPortFree>
	}
 8004388:	e010      	b.n	80043ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004390:	2b02      	cmp	r3, #2
 8004392:	d00b      	beq.n	80043ac <prvDeleteTCB+0x58>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <prvDeleteTCB+0x54>
	}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <prvResetNextTaskUnblockTime+0x38>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <prvResetNextTaskUnblockTime+0x3c>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043cc:	e008      	b.n	80043e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ce:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <prvResetNextTaskUnblockTime+0x38>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <prvResetNextTaskUnblockTime+0x3c>)
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000c80 	.word	0x20000c80
 80043f0:	20000ce8 	.word	0x20000ce8

080043f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <xTaskGetSchedulerState+0x34>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004402:	2301      	movs	r3, #1
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	e008      	b.n	800441a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <xTaskGetSchedulerState+0x38>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004410:	2302      	movs	r3, #2
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e001      	b.n	800441a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800441a:	687b      	ldr	r3, [r7, #4]
	}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20000cd4 	.word	0x20000cd4
 800442c:	20000cf0 	.word	0x20000cf0

08004430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d058      	beq.n	80044f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004446:	4b2f      	ldr	r3, [pc, #188]	@ (8004504 <xTaskPriorityDisinherit+0xd4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	429a      	cmp	r2, r3
 800444e:	d00b      	beq.n	8004468 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60bb      	str	r3, [r7, #8]
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448c:	1e5a      	subs	r2, r3, #1
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449a:	429a      	cmp	r2, r3
 800449c:	d02c      	beq.n	80044f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d128      	bne.n	80044f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fc54 	bl	8002d58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <xTaskPriorityDisinherit+0xd8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d903      	bls.n	80044d8 <xTaskPriorityDisinherit+0xa8>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <xTaskPriorityDisinherit+0xd8>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a09      	ldr	r2, [pc, #36]	@ (800450c <xTaskPriorityDisinherit+0xdc>)
 80044e6:	441a      	add	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7fe fbd5 	bl	8002c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044f8:	697b      	ldr	r3, [r7, #20]
	}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200007f4 	.word	0x200007f4
 8004508:	20000cd0 	.word	0x20000cd0
 800450c:	200007f8 	.word	0x200007f8

08004510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800451a:	4b21      	ldr	r3, [pc, #132]	@ (80045a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004520:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fc16 	bl	8002d58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004532:	d10a      	bne.n	800454a <prvAddCurrentTaskToDelayedList+0x3a>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453a:	4b1a      	ldr	r3, [pc, #104]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4819      	ldr	r0, [pc, #100]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004544:	f7fe fbab 	bl	8002c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004548:	e026      	b.n	8004598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004552:	4b14      	ldr	r3, [pc, #80]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	429a      	cmp	r2, r3
 8004560:	d209      	bcs.n	8004576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe fbb9 	bl	8002ce6 <vListInsert>
}
 8004574:	e010      	b.n	8004598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fbaf 	bl	8002ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004588:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d202      	bcs.n	8004598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004592:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000ccc 	.word	0x20000ccc
 80045a4:	200007f4 	.word	0x200007f4
 80045a8:	20000cb4 	.word	0x20000cb4
 80045ac:	20000c84 	.word	0x20000c84
 80045b0:	20000c80 	.word	0x20000c80
 80045b4:	20000ce8 	.word	0x20000ce8

080045b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045c2:	f000 fb13 	bl	8004bec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045c6:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <xTimerCreateTimerTask+0x84>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d021      	beq.n	8004612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045d6:	1d3a      	adds	r2, r7, #4
 80045d8:	f107 0108 	add.w	r1, r7, #8
 80045dc:	f107 030c 	add.w	r3, r7, #12
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fb15 	bl	8002c10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	9202      	str	r2, [sp, #8]
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	2302      	movs	r3, #2
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	460a      	mov	r2, r1
 80045f8:	4911      	ldr	r1, [pc, #68]	@ (8004640 <xTimerCreateTimerTask+0x88>)
 80045fa:	4812      	ldr	r0, [pc, #72]	@ (8004644 <xTimerCreateTimerTask+0x8c>)
 80045fc:	f7ff f8d0 	bl	80037a0 <xTaskCreateStatic>
 8004600:	4603      	mov	r3, r0
 8004602:	4a11      	ldr	r2, [pc, #68]	@ (8004648 <xTimerCreateTimerTask+0x90>)
 8004604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <xTimerCreateTimerTask+0x90>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800460e:	2301      	movs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	613b      	str	r3, [r7, #16]
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000d24 	.word	0x20000d24
 8004640:	08005594 	.word	0x08005594
 8004644:	08004785 	.word	0x08004785
 8004648:	20000d28 	.word	0x20000d28

0800464c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	@ 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <xTimerGenericCommand+0x30>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800467c:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <xTimerGenericCommand+0x98>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02a      	beq.n	80046da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	dc18      	bgt.n	80046c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004696:	f7ff fead 	bl	80043f4 <xTaskGetSchedulerState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b02      	cmp	r3, #2
 800469e:	d109      	bne.n	80046b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046a0:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <xTimerGenericCommand+0x98>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	f107 0110 	add.w	r1, r7, #16
 80046a8:	2300      	movs	r3, #0
 80046aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ac:	f7fe fc88 	bl	8002fc0 <xQueueGenericSend>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80046b2:	e012      	b.n	80046da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <xTimerGenericCommand+0x98>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f107 0110 	add.w	r1, r7, #16
 80046bc:	2300      	movs	r3, #0
 80046be:	2200      	movs	r2, #0
 80046c0:	f7fe fc7e 	bl	8002fc0 <xQueueGenericSend>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80046c6:	e008      	b.n	80046da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046c8:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <xTimerGenericCommand+0x98>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	f107 0110 	add.w	r1, r7, #16
 80046d0:	2300      	movs	r3, #0
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	f7fe fd76 	bl	80031c4 <xQueueGenericSendFromISR>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	@ 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000d24 	.word	0x20000d24

080046e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f2:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <prvProcessExpiredTimer+0x98>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fb29 	bl	8002d58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d023      	beq.n	800475c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	18d1      	adds	r1, r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f000 f8d5 	bl	80048d0 <prvInsertTimerInActiveList>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2300      	movs	r3, #0
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	2100      	movs	r1, #0
 8004736:	6978      	ldr	r0, [r7, #20]
 8004738:	f7ff ff88 	bl	800464c <xTimerGenericCommand>
 800473c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d114      	bne.n	800476e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	4798      	blx	r3
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000d1c 	.word	0x20000d1c

08004784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800478c:	f107 0308 	add.w	r3, r7, #8
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f859 	bl	8004848 <prvGetNextExpireTime>
 8004796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4619      	mov	r1, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f805 	bl	80047ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047a2:	f000 f8d7 	bl	8004954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047a6:	bf00      	nop
 80047a8:	e7f0      	b.n	800478c <prvTimerTask+0x8>
	...

080047ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047b6:	f7ff fa37 	bl	8003c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f866 	bl	8004890 <prvSampleTimeNow>
 80047c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d130      	bne.n	800482e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <prvProcessTimerOrBlockTask+0x3c>
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d806      	bhi.n	80047e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047da:	f7ff fa33 	bl	8003c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff ff81 	bl	80046e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047e6:	e024      	b.n	8004832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ee:	4b13      	ldr	r3, [pc, #76]	@ (800483c <prvProcessTimerOrBlockTask+0x90>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <prvProcessTimerOrBlockTask+0x50>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <prvProcessTimerOrBlockTask+0x52>
 80047fc:	2300      	movs	r3, #0
 80047fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004800:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <prvProcessTimerOrBlockTask+0x94>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	f7fe ff93 	bl	8003738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004812:	f7ff fa17 	bl	8003c44 <xTaskResumeAll>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800481c:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <prvProcessTimerOrBlockTask+0x98>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
}
 800482c:	e001      	b.n	8004832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800482e:	f7ff fa09 	bl	8003c44 <xTaskResumeAll>
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000d20 	.word	0x20000d20
 8004840:	20000d24 	.word	0x20000d24
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004850:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <prvGetNextExpireTime+0x44>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <prvGetNextExpireTime+0x16>
 800485a:	2201      	movs	r2, #1
 800485c:	e000      	b.n	8004860 <prvGetNextExpireTime+0x18>
 800485e:	2200      	movs	r2, #0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <prvGetNextExpireTime+0x44>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e001      	b.n	800487c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800487c:	68fb      	ldr	r3, [r7, #12]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000d1c 	.word	0x20000d1c

08004890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004898:	f7ff fa72 	bl	8003d80 <xTaskGetTickCount>
 800489c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <prvSampleTimeNow+0x3c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d205      	bcs.n	80048b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048a8:	f000 f93a 	bl	8004b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e002      	b.n	80048ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048ba:	4a04      	ldr	r2, [pc, #16]	@ (80048cc <prvSampleTimeNow+0x3c>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000d2c 	.word	0x20000d2c

080048d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d812      	bhi.n	800491c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e01b      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800490a:	4b10      	ldr	r3, [pc, #64]	@ (800494c <prvInsertTimerInActiveList+0x7c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe f9e6 	bl	8002ce6 <vListInsert>
 800491a:	e012      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d206      	bcs.n	8004932 <prvInsertTimerInActiveList+0x62>
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e007      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <prvInsertTimerInActiveList+0x80>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe f9d2 	bl	8002ce6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004942:	697b      	ldr	r3, [r7, #20]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000d20 	.word	0x20000d20
 8004950:	20000d1c 	.word	0x20000d1c

08004954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	@ 0x38
 8004958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800495a:	e0ce      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da19      	bge.n	8004996 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	3304      	adds	r3, #4
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61fb      	str	r3, [r7, #28]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498c:	6850      	ldr	r0, [r2, #4]
 800498e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004990:	6892      	ldr	r2, [r2, #8]
 8004992:	4611      	mov	r1, r2
 8004994:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f2c0 80ae 	blt.w	8004afa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe f9d2 	bl	8002d58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049b4:	463b      	mov	r3, r7
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ff6a 	bl	8004890 <prvSampleTimeNow>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	f200 8097 	bhi.w	8004af4 <prvProcessReceivedCommands+0x1a0>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <prvProcessReceivedCommands+0x78>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	08004a6b 	.word	0x08004a6b
 80049dc:	08004a7f 	.word	0x08004a7f
 80049e0:	08004acb 	.word	0x08004acb
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	080049f5 	.word	0x080049f5
 80049ec:	08004a6b 	.word	0x08004a6b
 80049f0:	08004a7f 	.word	0x08004a7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	18d1      	adds	r1, r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a14:	f7ff ff5c 	bl	80048d0 <prvInsertTimerInActiveList>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d06c      	beq.n	8004af8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d061      	beq.n	8004af8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	441a      	add	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	2100      	movs	r1, #0
 8004a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a46:	f7ff fe01 	bl	800464c <xTimerGenericCommand>
 8004a4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d152      	bne.n	8004af8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	61bb      	str	r3, [r7, #24]
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a7c:	e03d      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	18d1      	adds	r1, r2, r3
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac4:	f7ff ff04 	bl	80048d0 <prvInsertTimerInActiveList>
					break;
 8004ac8:	e017      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ada:	f000 fbe5 	bl	80052a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ade:	e00c      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004af2:	e002      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <prvProcessReceivedCommands+0x1a6>
					break;
 8004af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <prvProcessReceivedCommands+0x1c8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1d39      	adds	r1, r7, #4
 8004b00:	2200      	movs	r2, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fbfc 	bl	8003300 <xQueueReceive>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f47f af26 	bne.w	800495c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3730      	adds	r7, #48	@ 0x30
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000d24 	.word	0x20000d24

08004b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b26:	e049      	b.n	8004bbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b28:	4b2e      	ldr	r3, [pc, #184]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b32:	4b2c      	ldr	r3, [pc, #176]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe f909 	bl	8002d58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02f      	beq.n	8004bbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90e      	bls.n	8004b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7fe f8ae 	bl	8002ce6 <vListInsert>
 8004b8a:	e017      	b.n	8004bbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	2100      	movs	r1, #0
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fd58 	bl	800464c <xTimerGenericCommand>
 8004b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	603b      	str	r3, [r7, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1b0      	bne.n	8004b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <prvSwitchTimerLists+0xc8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a04      	ldr	r2, [pc, #16]	@ (8004be4 <prvSwitchTimerLists+0xc4>)
 8004bd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bd4:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <prvSwitchTimerLists+0xc8>)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6013      	str	r3, [r2, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000d1c 	.word	0x20000d1c
 8004be8:	20000d20 	.word	0x20000d20

08004bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bf2:	f000 f969 	bl	8004ec8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bf6:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d120      	bne.n	8004c40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bfe:	4814      	ldr	r0, [pc, #80]	@ (8004c50 <prvCheckForValidListAndQueue+0x64>)
 8004c00:	f7fe f820 	bl	8002c44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c04:	4813      	ldr	r0, [pc, #76]	@ (8004c54 <prvCheckForValidListAndQueue+0x68>)
 8004c06:	f7fe f81d 	bl	8002c44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <prvCheckForValidListAndQueue+0x6c>)
 8004c0c:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <prvCheckForValidListAndQueue+0x64>)
 8004c0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c10:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <prvCheckForValidListAndQueue+0x70>)
 8004c12:	4a10      	ldr	r2, [pc, #64]	@ (8004c54 <prvCheckForValidListAndQueue+0x68>)
 8004c14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <prvCheckForValidListAndQueue+0x74>)
 8004c1c:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <prvCheckForValidListAndQueue+0x78>)
 8004c1e:	2110      	movs	r1, #16
 8004c20:	200a      	movs	r0, #10
 8004c22:	f7fe f92d 	bl	8002e80 <xQueueGenericCreateStatic>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004c2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c34:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	490b      	ldr	r1, [pc, #44]	@ (8004c68 <prvCheckForValidListAndQueue+0x7c>)
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fd52 	bl	80036e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c40:	f000 f974 	bl	8004f2c <vPortExitCritical>
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000d24 	.word	0x20000d24
 8004c50:	20000cf4 	.word	0x20000cf4
 8004c54:	20000d08 	.word	0x20000d08
 8004c58:	20000d1c 	.word	0x20000d1c
 8004c5c:	20000d20 	.word	0x20000d20
 8004c60:	20000dd0 	.word	0x20000dd0
 8004c64:	20000d30 	.word	0x20000d30
 8004c68:	0800559c 	.word	0x0800559c

08004c6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd0 <pxPortInitialiseStack+0x64>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b14      	subs	r3, #20
 8004ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f06f 0202 	mvn.w	r2, #2
 8004cba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b20      	subs	r3, #32
 8004cc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	08004cd5 	.word	0x08004cd5

08004cd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cde:	4b13      	ldr	r3, [pc, #76]	@ (8004d2c <prvTaskExitError+0x58>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce6:	d00b      	beq.n	8004d00 <prvTaskExitError+0x2c>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <prvTaskExitError+0x28>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60bb      	str	r3, [r7, #8]
}
 8004d12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d14:	bf00      	nop
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0fc      	beq.n	8004d16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20000020 	.word	0x20000020

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	@ (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <xPortStartScheduler+0x124>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ea8 <xPortStartScheduler+0x128>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10b      	bne.n	8004da8 <xPortStartScheduler+0x28>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	60fb      	str	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea4 <xPortStartScheduler+0x124>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a3f      	ldr	r2, [pc, #252]	@ (8004eac <xPortStartScheduler+0x12c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10b      	bne.n	8004dca <xPortStartScheduler+0x4a>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	613b      	str	r3, [r7, #16]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <xPortStartScheduler+0x130>)
 8004dcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	22ff      	movs	r2, #255	@ 0xff
 8004dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <xPortStartScheduler+0x134>)
 8004df0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df8:	e009      	b.n	8004e0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b80      	cmp	r3, #128	@ 0x80
 8004e18:	d0ef      	beq.n	8004dfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1c3 0307 	rsb	r3, r3, #7
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d00b      	beq.n	8004e3e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60bb      	str	r3, [r7, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e5c:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e68:	4b14      	ldr	r3, [pc, #80]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e74:	f000 f8da 	bl	800502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <xPortStartScheduler+0x140>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e7e:	f000 f8f9 	bl	8005074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <xPortStartScheduler+0x144>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <xPortStartScheduler+0x144>)
 8004e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e8e:	f7ff ff63 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e92:	f7ff f83f 	bl	8003f14 <vTaskSwitchContext>
	prvTaskExitError();
 8004e96:	f7ff ff1d 	bl	8004cd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed00 	.word	0xe000ed00
 8004ea8:	410fc271 	.word	0x410fc271
 8004eac:	410fc270 	.word	0x410fc270
 8004eb0:	e000e400 	.word	0xe000e400
 8004eb4:	20000e20 	.word	0x20000e20
 8004eb8:	20000e24 	.word	0x20000e24
 8004ebc:	e000ed20 	.word	0xe000ed20
 8004ec0:	20000020 	.word	0x20000020
 8004ec4:	e000ef34 	.word	0xe000ef34

08004ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004eea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d110      	bne.n	8004f16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <vPortEnterCritical+0x60>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <vPortEnterCritical+0x4e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	603b      	str	r3, [r7, #0]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortEnterCritical+0x4a>
	}
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000020 	.word	0x20000020
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f32:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortExitCritical+0x26>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	607b      	str	r3, [r7, #4]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <vPortExitCritical+0x44>
 8004f64:	2300      	movs	r3, #0
 8004f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000020 	.word	0x20000020

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f01e 0f10 	tst.w	lr, #16
 8004f90:	bf08      	it	eq
 8004f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	6010      	str	r0, [r2, #0]
 8004f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fa4:	f380 8811 	msr	BASEPRI, r0
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f7fe ffb0 	bl	8003f14 <vTaskSwitchContext>
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f380 8811 	msr	BASEPRI, r0
 8004fbc:	bc09      	pop	{r0, r3}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc6:	f01e 0f10 	tst.w	lr, #16
 8004fca:	bf08      	it	eq
 8004fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fd0:	f380 8809 	msr	PSP, r0
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst>:
 8004fe0:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005002:	f7fe fecd 	bl	8003da0 <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <xPortSysTickHandler+0x40>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005036:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <vPortSetupTimerInterrupt+0x38>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800503c:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <vPortSetupTimerInterrupt+0x3c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <vPortSetupTimerInterrupt+0x40>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	4a09      	ldr	r2, [pc, #36]	@ (8005070 <vPortSetupTimerInterrupt+0x44>)
 800504a:	3b01      	subs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800504e:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010
 8005064:	e000e018 	.word	0xe000e018
 8005068:	20000000 	.word	0x20000000
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	e000e014 	.word	0xe000e014

08005074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005084 <vPortEnableVFP+0x10>
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800507e:	6001      	str	r1, [r0, #0]
 8005080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005082:	bf00      	nop
 8005084:	e000ed88 	.word	0xe000ed88

08005088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d915      	bls.n	80050c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800509a:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <vPortValidateInterruptPriority+0x74>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <vPortValidateInterruptPriority+0x78>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	7afa      	ldrb	r2, [r7, #11]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d20b      	bcs.n	80050c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <vPortValidateInterruptPriority+0x7c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005108 <vPortValidateInterruptPriority+0x80>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90b      	bls.n	80050ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	603b      	str	r3, [r7, #0]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <vPortValidateInterruptPriority+0x62>
	}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e3f0 	.word	0xe000e3f0
 8005100:	20000e20 	.word	0x20000e20
 8005104:	e000ed0c 	.word	0xe000ed0c
 8005108:	20000e24 	.word	0x20000e24

0800510c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005118:	f7fe fd86 	bl	8003c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800511c:	4b5c      	ldr	r3, [pc, #368]	@ (8005290 <pvPortMalloc+0x184>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005124:	f000 f924 	bl	8005370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005128:	4b5a      	ldr	r3, [pc, #360]	@ (8005294 <pvPortMalloc+0x188>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 8095 	bne.w	8005260 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01e      	beq.n	800517a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800513c:	2208      	movs	r2, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d015      	beq.n	800517a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f023 0307 	bic.w	r3, r3, #7
 8005154:	3308      	adds	r3, #8
 8005156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <pvPortMalloc+0x6e>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	617b      	str	r3, [r7, #20]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d06f      	beq.n	8005260 <pvPortMalloc+0x154>
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <pvPortMalloc+0x18c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d86a      	bhi.n	8005260 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800518a:	4b44      	ldr	r3, [pc, #272]	@ (800529c <pvPortMalloc+0x190>)
 800518c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800518e:	4b43      	ldr	r3, [pc, #268]	@ (800529c <pvPortMalloc+0x190>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005194:	e004      	b.n	80051a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <pvPortMalloc+0xa6>
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f1      	bne.n	8005196 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <pvPortMalloc+0x184>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d051      	beq.n	8005260 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2208      	movs	r2, #8
 80051c2:	4413      	add	r3, r2
 80051c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	2308      	movs	r3, #8
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	429a      	cmp	r2, r3
 80051dc:	d920      	bls.n	8005220 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <pvPortMalloc+0xfc>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800521a:	69b8      	ldr	r0, [r7, #24]
 800521c:	f000 f90a 	bl	8005434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005220:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <pvPortMalloc+0x18c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a1b      	ldr	r2, [pc, #108]	@ (8005298 <pvPortMalloc+0x18c>)
 800522c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800522e:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <pvPortMalloc+0x18c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <pvPortMalloc+0x194>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d203      	bcs.n	8005242 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800523a:	4b17      	ldr	r3, [pc, #92]	@ (8005298 <pvPortMalloc+0x18c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <pvPortMalloc+0x194>)
 8005240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <pvPortMalloc+0x188>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	431a      	orrs	r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <pvPortMalloc+0x198>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <pvPortMalloc+0x198>)
 800525e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005260:	f7fe fcf0 	bl	8003c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <pvPortMalloc+0x17a>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <pvPortMalloc+0x176>
	return pvReturn;
 8005286:	69fb      	ldr	r3, [r7, #28]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	@ 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20001a30 	.word	0x20001a30
 8005294:	20001a44 	.word	0x20001a44
 8005298:	20001a34 	.word	0x20001a34
 800529c:	20001a28 	.word	0x20001a28
 80052a0:	20001a38 	.word	0x20001a38
 80052a4:	20001a3c 	.word	0x20001a3c

080052a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04f      	beq.n	800535a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ba:	2308      	movs	r3, #8
 80052bc:	425b      	negs	r3, r3
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <vPortFree+0xbc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <vPortFree+0x46>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <vPortFree+0x66>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <vPortFree+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <vPortFree+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005334:	f7fe fc78 	bl	8003c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <vPortFree+0xc0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4413      	add	r3, r2
 8005342:	4a09      	ldr	r2, [pc, #36]	@ (8005368 <vPortFree+0xc0>)
 8005344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005346:	6938      	ldr	r0, [r7, #16]
 8005348:	f000 f874 	bl	8005434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800534c:	4b07      	ldr	r3, [pc, #28]	@ (800536c <vPortFree+0xc4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a06      	ldr	r2, [pc, #24]	@ (800536c <vPortFree+0xc4>)
 8005354:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005356:	f7fe fc75 	bl	8003c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20001a44 	.word	0x20001a44
 8005368:	20001a34 	.word	0x20001a34
 800536c:	20001a40 	.word	0x20001a40

08005370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005376:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800537a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800537c:	4b27      	ldr	r3, [pc, #156]	@ (800541c <prvHeapInit+0xac>)
 800537e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a1f      	ldr	r2, [pc, #124]	@ (800541c <prvHeapInit+0xac>)
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005420 <prvHeapInit+0xb0>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <prvHeapInit+0xb0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053bc:	2208      	movs	r2, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <prvHeapInit+0xb4>)
 80053d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <prvHeapInit+0xb4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <prvHeapInit+0xb4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <prvHeapInit+0xb4>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <prvHeapInit+0xb8>)
 80053fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a09      	ldr	r2, [pc, #36]	@ (800542c <prvHeapInit+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005408:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <prvHeapInit+0xc0>)
 800540a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20000e28 	.word	0x20000e28
 8005420:	20001a28 	.word	0x20001a28
 8005424:	20001a30 	.word	0x20001a30
 8005428:	20001a38 	.word	0x20001a38
 800542c:	20001a34 	.word	0x20001a34
 8005430:	20001a44 	.word	0x20001a44

08005434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800543c:	4b28      	ldr	r3, [pc, #160]	@ (80054e0 <prvInsertBlockIntoFreeList+0xac>)
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e002      	b.n	8005448 <prvInsertBlockIntoFreeList+0x14>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d8f7      	bhi.n	8005442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d108      	bne.n	8005476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d118      	bne.n	80054bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d00d      	beq.n	80054b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e008      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e003      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d002      	beq.n	80054d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20001a28 	.word	0x20001a28
 80054e4:	20001a30 	.word	0x20001a30

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	@ (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	@ (800553c <__libc_init_array+0x44>)
 800550c:	f000 f826 	bl	800555c <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08005628 	.word	0x08005628
 8005534:	08005628 	.word	0x08005628
 8005538:	08005628 	.word	0x08005628
 800553c:	0800562c 	.word	0x0800562c

08005540 <memcpy>:
 8005540:	440a      	add	r2, r1
 8005542:	4291      	cmp	r1, r2
 8005544:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005548:	d100      	bne.n	800554c <memcpy+0xc>
 800554a:	4770      	bx	lr
 800554c:	b510      	push	{r4, lr}
 800554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005556:	4291      	cmp	r1, r2
 8005558:	d1f9      	bne.n	800554e <memcpy+0xe>
 800555a:	bd10      	pop	{r4, pc}

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
